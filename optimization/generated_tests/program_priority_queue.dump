
program.debug_priority_queue.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <crt>:

.global crt
.section .text.prologue, "ax"
.align 4
crt:
	nop
   0:	00000013          	addi	zero,zero,0
	la ra, exit
   4:	00000097          	auipc	ra,0x0
   8:	09c08093          	addi	ra,ra,156 # a0 <exit>
	la sp, _sp
   c:	00010117          	auipc	sp,0x10
  10:	ff410113          	addi	sp,sp,-12 # 10000 <_sp>
	mv s0, sp
  14:	00010413          	addi	s0,sp,0
	la gp, __global_pointer$
  18:	00001197          	auipc	gp,0x1
  1c:	02818193          	addi	gp,gp,40 # 1040 <__global_pointer$>
	li tp, 0
  20:	00000213          	addi	tp,zero,0
	li t0, 0
  24:	00000293          	addi	t0,zero,0
	li t1, 0
  28:	00000313          	addi	t1,zero,0
	li t2, 0
  2c:	00000393          	addi	t2,zero,0
	li s1, 0
  30:	00000493          	addi	s1,zero,0
	li a0, 0
  34:	00000513          	addi	a0,zero,0
	li a1, 0
  38:	00000593          	addi	a1,zero,0
	li a2, 0
  3c:	00000613          	addi	a2,zero,0
	li a3, 0
  40:	00000693          	addi	a3,zero,0
	li a4, 0
  44:	00000713          	addi	a4,zero,0
	li a5, 0
  48:	00000793          	addi	a5,zero,0
	li a6, 0
  4c:	00000813          	addi	a6,zero,0
	li a7, 0
  50:	00000893          	addi	a7,zero,0
	li s2, 0
  54:	00000913          	addi	s2,zero,0
	li s3, 0
  58:	00000993          	addi	s3,zero,0
	li s4, 0
  5c:	00000a13          	addi	s4,zero,0
	li s5, 0
  60:	00000a93          	addi	s5,zero,0
	li s6, 0
  64:	00000b13          	addi	s6,zero,0
	li s7, 0
  68:	00000b93          	addi	s7,zero,0
	li s8, 0
  6c:	00000c13          	addi	s8,zero,0
	li s9, 0
  70:	00000c93          	addi	s9,zero,0
	li s10, 0
  74:	00000d13          	addi	s10,zero,0
	li s11, 0
  78:	00000d93          	addi	s11,zero,0
	li t3, 0
  7c:	00000e13          	addi	t3,zero,0
	li t4, 0
  80:	00000e93          	addi	t4,zero,0
	li t5, 0
  84:	00000f13          	addi	t5,zero,0
	li t6, 0
  88:	00000f93          	addi	t6,zero,0
	j main
  8c:	6240006f          	jal	zero,6b0 <main>
	...

000000a0 <exit>:

.global exit
.section .text
.align 4
exit:
	la sp, _sp
  a0:	00010117          	auipc	sp,0x10
  a4:	f6010113          	addi	sp,sp,-160 # 10000 <_sp>
	sw a0, -8(sp)
  a8:	fea12c23          	sw	a0,-8(sp)
	nop
  ac:	00000013          	addi	zero,zero,0
	wfi
  b0:	10500073          	wfi

000000b4 <tj_free>:
} Header;
static Header base; //empty list to get started
static Header *freep = NULL; //start of the free list


void tj_free(void *mem) {
  b4:	fd010113          	addi	sp,sp,-48
  b8:	02112623          	sw	ra,44(sp)
  bc:	02812423          	sw	s0,40(sp)
  c0:	03010413          	addi	s0,sp,48
  c4:	fca42e23          	sw	a0,-36(s0)
	//sanity check, we don't want to free memory that's not
	//in the heap
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	fdc42703          	lw	a4,-36(s0)
  cc:	000017b7          	lui	a5,0x1
  d0:	88078793          	addi	a5,a5,-1920 # 880 <heap>
  d4:	00f76a63          	bltu	a4,a5,e8 <tj_free+0x34>
  d8:	000057b7          	lui	a5,0x5
  dc:	88078793          	addi	a5,a5,-1920 # 4880 <base>
  e0:	fdc42703          	lw	a4,-36(s0)
  e4:	00e7f863          	bgeu	a5,a4,f4 <tj_free+0x40>
		exit(1);
  e8:	00100513          	addi	a0,zero,1
  ec:	00000097          	auipc	ra,0x0
  f0:	fb4080e7          	jalr	ra,-76(ra) # a0 <exit>

	Header *bp, *p;
	bp = (Header *)mem - 1; //point to block header
  f4:	fdc42783          	lw	a5,-36(s0)
  f8:	ff878793          	addi	a5,a5,-8
  fc:	fef42423          	sw	a5,-24(s0)
	//scan the free list to see where the current block should sit in between
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	000057b7          	lui	a5,0x5
 104:	8887a783          	lw	a5,-1912(a5) # 4888 <freep>
 108:	fef42623          	sw	a5,-20(s0)
 10c:	03c0006f          	jal	zero,148 <tj_free+0x94>
		// self wrapped free list with only one entry
		//                  or you are just at the very beginning/end
		if (p >= p->next && (bp > p || bp < p->next))
 110:	fec42783          	lw	a5,-20(s0)
 114:	0007a783          	lw	a5,0(a5)
 118:	fec42703          	lw	a4,-20(s0)
 11c:	02f76063          	bltu	a4,a5,13c <tj_free+0x88>
 120:	fe842703          	lw	a4,-24(s0)
 124:	fec42783          	lw	a5,-20(s0)
 128:	02e7ee63          	bltu	a5,a4,164 <tj_free+0xb0>
 12c:	fec42783          	lw	a5,-20(s0)
 130:	0007a783          	lw	a5,0(a5)
 134:	fe842703          	lw	a4,-24(s0)
 138:	02f76663          	bltu	a4,a5,164 <tj_free+0xb0>
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	fec42783          	lw	a5,-20(s0)
 140:	0007a783          	lw	a5,0(a5)
 144:	fef42623          	sw	a5,-20(s0)
 148:	fe842703          	lw	a4,-24(s0)
 14c:	fec42783          	lw	a5,-20(s0)
 150:	fce7f0e3          	bgeu	a5,a4,110 <tj_free+0x5c>
 154:	fec42783          	lw	a5,-20(s0)
 158:	0007a783          	lw	a5,0(a5)
 15c:	fe842703          	lw	a4,-24(s0)
 160:	faf778e3          	bgeu	a4,a5,110 <tj_free+0x5c>
			break; //freed block at start of end of the arena
		//we can merge the 2 free blocks if they are adjacent to each other
		//or we just can append a new entry into the free list
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	fe842783          	lw	a5,-24(s0)
 168:	0047a783          	lw	a5,4(a5)
 16c:	00379793          	slli	a5,a5,0x3
 170:	fe842703          	lw	a4,-24(s0)
 174:	00f70733          	add	a4,a4,a5
 178:	fec42783          	lw	a5,-20(s0)
 17c:	0007a783          	lw	a5,0(a5)
 180:	02f71e63          	bne	a4,a5,1bc <tj_free+0x108>
		//merge if exactly adjacent
		bp->size += p->next->size;
 184:	fe842783          	lw	a5,-24(s0)
 188:	0047a703          	lw	a4,4(a5)
 18c:	fec42783          	lw	a5,-20(s0)
 190:	0007a783          	lw	a5,0(a5)
 194:	0047a783          	lw	a5,4(a5)
 198:	00f70733          	add	a4,a4,a5
 19c:	fe842783          	lw	a5,-24(s0)
 1a0:	00e7a223          	sw	a4,4(a5)
		bp->next = p->next->next;
 1a4:	fec42783          	lw	a5,-20(s0)
 1a8:	0007a783          	lw	a5,0(a5)
 1ac:	0007a703          	lw	a4,0(a5)
 1b0:	fe842783          	lw	a5,-24(s0)
 1b4:	00e7a023          	sw	a4,0(a5)
 1b8:	0140006f          	jal	zero,1cc <tj_free+0x118>
	} else
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	fec42783          	lw	a5,-20(s0)
 1c0:	0007a703          	lw	a4,0(a5)
 1c4:	fe842783          	lw	a5,-24(s0)
 1c8:	00e7a023          	sw	a4,0(a5)
		//if p is freep which is base, then this will make the newly
		//allocated block point to base

	if (p + p->size == bp) { //join to lower nbr
 1cc:	fec42783          	lw	a5,-20(s0)
 1d0:	0047a783          	lw	a5,4(a5)
 1d4:	00379793          	slli	a5,a5,0x3
 1d8:	fec42703          	lw	a4,-20(s0)
 1dc:	00f707b3          	add	a5,a4,a5
 1e0:	fe842703          	lw	a4,-24(s0)
 1e4:	02f71a63          	bne	a4,a5,218 <tj_free+0x164>
		//merge if exactly adjacent
		p->size += bp->size;
 1e8:	fec42783          	lw	a5,-20(s0)
 1ec:	0047a703          	lw	a4,4(a5)
 1f0:	fe842783          	lw	a5,-24(s0)
 1f4:	0047a783          	lw	a5,4(a5)
 1f8:	00f70733          	add	a4,a4,a5
 1fc:	fec42783          	lw	a5,-20(s0)
 200:	00e7a223          	sw	a4,4(a5)
		p->next = bp->next;
 204:	fe842783          	lw	a5,-24(s0)
 208:	0007a703          	lw	a4,0(a5)
 20c:	fec42783          	lw	a5,-20(s0)
 210:	00e7a023          	sw	a4,0(a5)
 214:	0100006f          	jal	zero,224 <tj_free+0x170>
	} else //or just append to linked list
		p->next = bp; //again, if the free list is just the base
 218:	fec42783          	lw	a5,-20(s0)
 21c:	fe842703          	lw	a4,-24(s0)
 220:	00e7a023          	sw	a4,0(a5)
		//then effectively we just created a new entry
		//and make it point to the base which has a size of 0
	freep = p;
 224:	000057b7          	lui	a5,0x5
 228:	fec42703          	lw	a4,-20(s0)
 22c:	88e7a423          	sw	a4,-1912(a5) # 4888 <freep>
}
 230:	00000013          	addi	zero,zero,0
 234:	02c12083          	lw	ra,44(sp)
 238:	02812403          	lw	s0,40(sp)
 23c:	03010113          	addi	sp,sp,48
 240:	00008067          	jalr	zero,0(ra)

00000244 <getmoremem>:

static Header* getmoremem(unsigned int total_size) {
 244:	fd010113          	addi	sp,sp,-48
 248:	02112623          	sw	ra,44(sp)
 24c:	02812423          	sw	s0,40(sp)
 250:	03010413          	addi	s0,sp,48
 254:	fca42e23          	sw	a0,-36(s0)
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 258:	000017b7          	lui	a5,0x1
 25c:	8647a783          	lw	a5,-1948(a5) # 864 <avail_mem>
 260:	fdc42703          	lw	a4,-36(s0)
 264:	00e7f663          	bgeu	a5,a4,270 <getmoremem+0x2c>
 268:	00000793          	addi	a5,zero,0
 26c:	0700006f          	jal	zero,2dc <getmoremem+0x98>
	Header* up = (Header *)next_index;
 270:	000017b7          	lui	a5,0x1
 274:	8607a783          	lw	a5,-1952(a5) # 860 <next_index>
 278:	fef42623          	sw	a5,-20(s0)
	next_index += total_size; //allocate the block
 27c:	000017b7          	lui	a5,0x1
 280:	8607a703          	lw	a4,-1952(a5) # 860 <next_index>
 284:	fdc42783          	lw	a5,-36(s0)
 288:	00f70733          	add	a4,a4,a5
 28c:	000017b7          	lui	a5,0x1
 290:	86e7a023          	sw	a4,-1952(a5) # 860 <next_index>
	avail_mem -= total_size; //deduct from avail mem;
 294:	000017b7          	lui	a5,0x1
 298:	8647a703          	lw	a4,-1948(a5) # 864 <avail_mem>
 29c:	fdc42783          	lw	a5,-36(s0)
 2a0:	40f70733          	sub	a4,a4,a5
 2a4:	000017b7          	lui	a5,0x1
 2a8:	86e7a223          	sw	a4,-1948(a5) # 864 <avail_mem>
	up->size = total_size - sizeof(Header); //set the size right
 2ac:	fdc42783          	lw	a5,-36(s0)
 2b0:	ff878713          	addi	a4,a5,-8
 2b4:	fec42783          	lw	a5,-20(s0)
 2b8:	00e7a223          	sw	a4,4(a5)
	tj_free((void *)(++up)); //append the new block to the free list first
 2bc:	fec42783          	lw	a5,-20(s0)
 2c0:	00878793          	addi	a5,a5,8
 2c4:	fef42623          	sw	a5,-20(s0)
 2c8:	fec42503          	lw	a0,-20(s0)
 2cc:	00000097          	auipc	ra,0x0
 2d0:	de8080e7          	jalr	ra,-536(ra) # b4 <tj_free>
	return freep;
 2d4:	000057b7          	lui	a5,0x5
 2d8:	8887a783          	lw	a5,-1912(a5) # 4888 <freep>
}
 2dc:	00078513          	addi	a0,a5,0
 2e0:	02c12083          	lw	ra,44(sp)
 2e4:	02812403          	lw	s0,40(sp)
 2e8:	03010113          	addi	sp,sp,48
 2ec:	00008067          	jalr	zero,0(ra)

000002f0 <tj_malloc>:

void *tj_malloc(unsigned int size) {
 2f0:	fd010113          	addi	sp,sp,-48
 2f4:	02112623          	sw	ra,44(sp)
 2f8:	02812423          	sw	s0,40(sp)
 2fc:	03010413          	addi	s0,sp,48
 300:	fca42e23          	sw	a0,-36(s0)
	//sanity check, so that you don't blow the memory space
	if (size > sizeof(heap)) return NULL;
 304:	fdc42703          	lw	a4,-36(s0)
 308:	000047b7          	lui	a5,0x4
 30c:	00e7f663          	bgeu	a5,a4,318 <tj_malloc+0x28>
 310:	00000793          	addi	a5,zero,0
 314:	15c0006f          	jal	zero,470 <tj_malloc+0x180>
	//we want strict word alignment just to make things easier
	//and so that we don't have improper alignment issues
	if ((size & 3) != 0) {
 318:	fdc42783          	lw	a5,-36(s0)
 31c:	0037f793          	andi	a5,a5,3
 320:	00078a63          	beq	a5,zero,334 <tj_malloc+0x44>
		size = size + 4 - (size & 3);
 324:	fdc42783          	lw	a5,-36(s0)
 328:	ffc7f793          	andi	a5,a5,-4
 32c:	00478793          	addi	a5,a5,4 # 4004 <__global_pointer$+0x2fc4>
 330:	fcf42e23          	sw	a5,-36(s0)
	}

	//we want to build a linked list of the existing blocks and free blocks
	Header *p, *prevp; //iterators
	
	unsigned int total_size = size + sizeof(Header); //need to include the header size as well
 334:	fdc42783          	lw	a5,-36(s0)
 338:	00878793          	addi	a5,a5,8
 33c:	fef42223          	sw	a5,-28(s0)
	//check the linked list
	prevp = freep;
 340:	000057b7          	lui	a5,0x5
 344:	8887a783          	lw	a5,-1912(a5) # 4888 <freep>
 348:	fef42423          	sw	a5,-24(s0)
	//if there's no linked list yet
	if (prevp == NULL) {
 34c:	fe842783          	lw	a5,-24(s0)
 350:	02079e63          	bne	a5,zero,38c <tj_malloc+0x9c>
		prevp = &base;
 354:	000057b7          	lui	a5,0x5
 358:	88078793          	addi	a5,a5,-1920 # 4880 <base>
 35c:	fef42423          	sw	a5,-24(s0)
		freep = prevp;
 360:	000057b7          	lui	a5,0x5
 364:	fe842703          	lw	a4,-24(s0)
 368:	88e7a423          	sw	a4,-1912(a5) # 4888 <freep>
		base.next = freep;
 36c:	000057b7          	lui	a5,0x5
 370:	8887a703          	lw	a4,-1912(a5) # 4888 <freep>
 374:	000057b7          	lui	a5,0x5
 378:	88078793          	addi	a5,a5,-1920 # 4880 <base>
 37c:	00e7a023          	sw	a4,0(a5)
		base.size = 0;
 380:	000057b7          	lui	a5,0x5
 384:	88078793          	addi	a5,a5,-1920 # 4880 <base>
 388:	0007a223          	sw	zero,4(a5)
	}
	//traverse through the linked list, note there's no stopping condition
	for (p = prevp->next; ;prevp = p, p = p->next) {
 38c:	fe842783          	lw	a5,-24(s0)
 390:	0007a783          	lw	a5,0(a5)
 394:	fef42623          	sw	a5,-20(s0)
		if (p->size >= size) { //big enough
 398:	fec42783          	lw	a5,-20(s0)
 39c:	0047a783          	lw	a5,4(a5)
 3a0:	fdc42703          	lw	a4,-36(s0)
 3a4:	08e7e263          	bltu	a5,a4,428 <tj_malloc+0x138>
			if (p->size == size) // exact size
 3a8:	fec42783          	lw	a5,-20(s0)
 3ac:	0047a783          	lw	a5,4(a5)
 3b0:	fdc42703          	lw	a4,-36(s0)
 3b4:	00f71c63          	bne	a4,a5,3cc <tj_malloc+0xdc>
				prevp->next = p->next; // just return that block
 3b8:	fec42783          	lw	a5,-20(s0)
 3bc:	0007a703          	lw	a4,0(a5)
 3c0:	fe842783          	lw	a5,-24(s0)
 3c4:	00e7a023          	sw	a4,0(a5)
 3c8:	0400006f          	jal	zero,408 <tj_malloc+0x118>
			else {
				p->size -= total_size; //break up the block
 3cc:	fec42783          	lw	a5,-20(s0)
 3d0:	0047a703          	lw	a4,4(a5)
 3d4:	fe442783          	lw	a5,-28(s0)
 3d8:	40f70733          	sub	a4,a4,a5
 3dc:	fec42783          	lw	a5,-20(s0)
 3e0:	00e7a223          	sw	a4,4(a5)
				p += p->size;
 3e4:	fec42783          	lw	a5,-20(s0)
 3e8:	0047a783          	lw	a5,4(a5)
 3ec:	00379793          	slli	a5,a5,0x3
 3f0:	fec42703          	lw	a4,-20(s0)
 3f4:	00f707b3          	add	a5,a4,a5
 3f8:	fef42623          	sw	a5,-20(s0)
				p->size = size;
 3fc:	fec42783          	lw	a5,-20(s0)
 400:	fdc42703          	lw	a4,-36(s0)
 404:	00e7a223          	sw	a4,4(a5)
			}
			freep = prevp;
 408:	000057b7          	lui	a5,0x5
 40c:	fe842703          	lw	a4,-24(s0)
 410:	88e7a423          	sw	a4,-1912(a5) # 4888 <freep>
#ifdef DEBUG
			printf("returned pointer is %i\n", (int)p + 1);
#endif
			return (void *)(++p);
 414:	fec42783          	lw	a5,-20(s0)
 418:	00878793          	addi	a5,a5,8
 41c:	fef42623          	sw	a5,-20(s0)
 420:	fec42783          	lw	a5,-20(s0)
 424:	04c0006f          	jal	zero,470 <tj_malloc+0x180>
		}
		if (p == freep) //wrapped around free list
 428:	000057b7          	lui	a5,0x5
 42c:	8887a783          	lw	a5,-1912(a5) # 4888 <freep>
 430:	fec42703          	lw	a4,-20(s0)
 434:	02f71263          	bne	a4,a5,458 <tj_malloc+0x168>
			if ((p = getmoremem(total_size)) == NULL) //if the heap runs out
 438:	fe442503          	lw	a0,-28(s0)
 43c:	00000097          	auipc	ra,0x0
 440:	e08080e7          	jalr	ra,-504(ra) # 244 <getmoremem>
 444:	fea42623          	sw	a0,-20(s0)
 448:	fec42783          	lw	a5,-20(s0)
 44c:	00079663          	bne	a5,zero,458 <tj_malloc+0x168>
				return NULL; //well, you got nothing left, gg
 450:	00000793          	addi	a5,zero,0
 454:	01c0006f          	jal	zero,470 <tj_malloc+0x180>
	for (p = prevp->next; ;prevp = p, p = p->next) {
 458:	fec42783          	lw	a5,-20(s0)
 45c:	fef42423          	sw	a5,-24(s0)
 460:	fec42783          	lw	a5,-20(s0)
 464:	0007a783          	lw	a5,0(a5)
 468:	fef42623          	sw	a5,-20(s0)
		if (p->size >= size) { //big enough
 46c:	f2dff06f          	jal	zero,398 <tj_malloc+0xa8>
	}
}
 470:	00078513          	addi	a0,a5,0
 474:	02c12083          	lw	ra,44(sp)
 478:	02812403          	lw	s0,40(sp)
 47c:	03010113          	addi	sp,sp,48
 480:	00008067          	jalr	zero,0(ra)

00000484 <tj_calloc>:

void *tj_calloc(unsigned int size) {
 484:	fd010113          	addi	sp,sp,-48
 488:	02112623          	sw	ra,44(sp)
 48c:	02812423          	sw	s0,40(sp)
 490:	03010413          	addi	s0,sp,48
 494:	fca42e23          	sw	a0,-36(s0)
	void *mem = tj_malloc(size);
 498:	fdc42503          	lw	a0,-36(s0)
 49c:	00000097          	auipc	ra,0x0
 4a0:	e54080e7          	jalr	ra,-428(ra) # 2f0 <tj_malloc>
 4a4:	fea42623          	sw	a0,-20(s0)
	memset(mem, 0, size);
 4a8:	fdc42603          	lw	a2,-36(s0)
 4ac:	00000593          	addi	a1,zero,0
 4b0:	fec42503          	lw	a0,-20(s0)
 4b4:	00000097          	auipc	ra,0x0
 4b8:	2b0080e7          	jalr	ra,688(ra) # 764 <memset>
	return mem;
 4bc:	fec42783          	lw	a5,-20(s0)
}
 4c0:	00078513          	addi	a0,a5,0
 4c4:	02c12083          	lw	ra,44(sp)
 4c8:	02812403          	lw	s0,40(sp)
 4cc:	03010113          	addi	sp,sp,48
 4d0:	00008067          	jalr	zero,0(ra)

000004d4 <newNode>:
  
} Node; 
  
// Function to Create A New Node 
Node* newNode(int d, int p) 
{ 
 4d4:	fd010113          	addi	sp,sp,-48
 4d8:	02112623          	sw	ra,44(sp)
 4dc:	02812423          	sw	s0,40(sp)
 4e0:	03010413          	addi	s0,sp,48
 4e4:	fca42e23          	sw	a0,-36(s0)
 4e8:	fcb42c23          	sw	a1,-40(s0)
    Node* temp = (Node*)tj_malloc(sizeof(Node)); 
 4ec:	00c00513          	addi	a0,zero,12
 4f0:	00000097          	auipc	ra,0x0
 4f4:	e00080e7          	jalr	ra,-512(ra) # 2f0 <tj_malloc>
 4f8:	fea42623          	sw	a0,-20(s0)
    temp->data = d; 
 4fc:	fec42783          	lw	a5,-20(s0)
 500:	fdc42703          	lw	a4,-36(s0)
 504:	00e7a023          	sw	a4,0(a5)
    temp->priority = p; 
 508:	fec42783          	lw	a5,-20(s0)
 50c:	fd842703          	lw	a4,-40(s0)
 510:	00e7a223          	sw	a4,4(a5)
    temp->next = NULL; 
 514:	fec42783          	lw	a5,-20(s0)
 518:	0007a423          	sw	zero,8(a5)
  
    return temp; 
 51c:	fec42783          	lw	a5,-20(s0)
} 
 520:	00078513          	addi	a0,a5,0
 524:	02c12083          	lw	ra,44(sp)
 528:	02812403          	lw	s0,40(sp)
 52c:	03010113          	addi	sp,sp,48
 530:	00008067          	jalr	zero,0(ra)

00000534 <peek>:
  
// Return the value at head 
int peek(Node** head) 
{ 
 534:	fe010113          	addi	sp,sp,-32
 538:	00812e23          	sw	s0,28(sp)
 53c:	02010413          	addi	s0,sp,32
 540:	fea42623          	sw	a0,-20(s0)
    return (*head)->data; 
 544:	fec42783          	lw	a5,-20(s0)
 548:	0007a783          	lw	a5,0(a5)
 54c:	0007a783          	lw	a5,0(a5)
} 
 550:	00078513          	addi	a0,a5,0
 554:	01c12403          	lw	s0,28(sp)
 558:	02010113          	addi	sp,sp,32
 55c:	00008067          	jalr	zero,0(ra)

00000560 <pop>:
  
// Removes the element with the 
// highest priority form the list 
void pop(Node** head) 
{ 
 560:	fd010113          	addi	sp,sp,-48
 564:	02112623          	sw	ra,44(sp)
 568:	02812423          	sw	s0,40(sp)
 56c:	03010413          	addi	s0,sp,48
 570:	fca42e23          	sw	a0,-36(s0)
    Node* temp = *head; 
 574:	fdc42783          	lw	a5,-36(s0)
 578:	0007a783          	lw	a5,0(a5)
 57c:	fef42623          	sw	a5,-20(s0)
    (*head) = (*head)->next; 
 580:	fdc42783          	lw	a5,-36(s0)
 584:	0007a783          	lw	a5,0(a5)
 588:	0087a703          	lw	a4,8(a5)
 58c:	fdc42783          	lw	a5,-36(s0)
 590:	00e7a023          	sw	a4,0(a5)
    tj_free(temp); 
 594:	fec42503          	lw	a0,-20(s0)
 598:	00000097          	auipc	ra,0x0
 59c:	b1c080e7          	jalr	ra,-1252(ra) # b4 <tj_free>
} 
 5a0:	00000013          	addi	zero,zero,0
 5a4:	02c12083          	lw	ra,44(sp)
 5a8:	02812403          	lw	s0,40(sp)
 5ac:	03010113          	addi	sp,sp,48
 5b0:	00008067          	jalr	zero,0(ra)

000005b4 <push>:
  
// Function to push according to priority 
void push(Node** head, int d, int p) 
{ 
 5b4:	fd010113          	addi	sp,sp,-48
 5b8:	02112623          	sw	ra,44(sp)
 5bc:	02812423          	sw	s0,40(sp)
 5c0:	03010413          	addi	s0,sp,48
 5c4:	fca42e23          	sw	a0,-36(s0)
 5c8:	fcb42c23          	sw	a1,-40(s0)
 5cc:	fcc42a23          	sw	a2,-44(s0)
    Node* start = (*head); 
 5d0:	fdc42783          	lw	a5,-36(s0)
 5d4:	0007a783          	lw	a5,0(a5)
 5d8:	fef42623          	sw	a5,-20(s0)
  
    // Create new Node 
    Node* temp = newNode(d, p); 
 5dc:	fd442583          	lw	a1,-44(s0)
 5e0:	fd842503          	lw	a0,-40(s0)
 5e4:	00000097          	auipc	ra,0x0
 5e8:	ef0080e7          	jalr	ra,-272(ra) # 4d4 <newNode>
 5ec:	fea42423          	sw	a0,-24(s0)
  
    // Special Case: The head of list has lesser 
    // priority than new node. So insert new 
    // node before head node and change head node. 
    if ((*head)->priority > p) { 
 5f0:	fdc42783          	lw	a5,-36(s0)
 5f4:	0007a783          	lw	a5,0(a5)
 5f8:	0047a783          	lw	a5,4(a5)
 5fc:	fd442703          	lw	a4,-44(s0)
 600:	02f75863          	bge	a4,a5,630 <push+0x7c>
  
        // Insert New Node before head 
        temp->next = *head; 
 604:	fdc42783          	lw	a5,-36(s0)
 608:	0007a703          	lw	a4,0(a5)
 60c:	fe842783          	lw	a5,-24(s0)
 610:	00e7a423          	sw	a4,8(a5)
        (*head) = temp; 
 614:	fdc42783          	lw	a5,-36(s0)
 618:	fe842703          	lw	a4,-24(s0)
 61c:	00e7a023          	sw	a4,0(a5)
        // Either at the ends of the list 
        // or at required position 
        temp->next = start->next; 
        start->next = temp; 
    } 
} 
 620:	04c0006f          	jal	zero,66c <push+0xb8>
            start = start->next; 
 624:	fec42783          	lw	a5,-20(s0)
 628:	0087a783          	lw	a5,8(a5)
 62c:	fef42623          	sw	a5,-20(s0)
        while (start->next != NULL && 
 630:	fec42783          	lw	a5,-20(s0)
 634:	0087a783          	lw	a5,8(a5)
 638:	00078c63          	beq	a5,zero,650 <push+0x9c>
               start->next->priority < p) { 
 63c:	fec42783          	lw	a5,-20(s0)
 640:	0087a783          	lw	a5,8(a5)
 644:	0047a783          	lw	a5,4(a5)
        while (start->next != NULL && 
 648:	fd442703          	lw	a4,-44(s0)
 64c:	fce7cce3          	blt	a5,a4,624 <push+0x70>
        temp->next = start->next; 
 650:	fec42783          	lw	a5,-20(s0)
 654:	0087a703          	lw	a4,8(a5)
 658:	fe842783          	lw	a5,-24(s0)
 65c:	00e7a423          	sw	a4,8(a5)
        start->next = temp; 
 660:	fec42783          	lw	a5,-20(s0)
 664:	fe842703          	lw	a4,-24(s0)
 668:	00e7a423          	sw	a4,8(a5)
} 
 66c:	00000013          	addi	zero,zero,0
 670:	02c12083          	lw	ra,44(sp)
 674:	02812403          	lw	s0,40(sp)
 678:	03010113          	addi	sp,sp,48
 67c:	00008067          	jalr	zero,0(ra)

00000680 <isEmpty>:
  
// Function to check is list is empty 
int isEmpty(Node** head) 
{ 
 680:	fe010113          	addi	sp,sp,-32
 684:	00812e23          	sw	s0,28(sp)
 688:	02010413          	addi	s0,sp,32
 68c:	fea42623          	sw	a0,-20(s0)
    return (*head) == NULL; 
 690:	fec42783          	lw	a5,-20(s0)
 694:	0007a783          	lw	a5,0(a5)
 698:	0017b793          	sltiu	a5,a5,1
 69c:	0ff7f793          	andi	a5,a5,255
} 
 6a0:	00078513          	addi	a0,a5,0
 6a4:	01c12403          	lw	s0,28(sp)
 6a8:	02010113          	addi	sp,sp,32
 6ac:	00008067          	jalr	zero,0(ra)

000006b0 <main>:
  
// Driver code 
int main() 
{ 
 6b0:	fe010113          	addi	sp,sp,-32
 6b4:	00112e23          	sw	ra,28(sp)
 6b8:	00812c23          	sw	s0,24(sp)
 6bc:	02010413          	addi	s0,sp,32
    // Create a Priority Queue 
    // 7->4->5->6 
    Node* pq = newNode(4, 1); 
 6c0:	00100593          	addi	a1,zero,1
 6c4:	00400513          	addi	a0,zero,4
 6c8:	00000097          	auipc	ra,0x0
 6cc:	e0c080e7          	jalr	ra,-500(ra) # 4d4 <newNode>
 6d0:	00050793          	addi	a5,a0,0
 6d4:	fef42623          	sw	a5,-20(s0)
    push(&pq, 5, 2); 
 6d8:	fec40793          	addi	a5,s0,-20
 6dc:	00200613          	addi	a2,zero,2
 6e0:	00500593          	addi	a1,zero,5
 6e4:	00078513          	addi	a0,a5,0
 6e8:	00000097          	auipc	ra,0x0
 6ec:	ecc080e7          	jalr	ra,-308(ra) # 5b4 <push>
    push(&pq, 6, 3); 
 6f0:	fec40793          	addi	a5,s0,-20
 6f4:	00300613          	addi	a2,zero,3
 6f8:	00600593          	addi	a1,zero,6
 6fc:	00078513          	addi	a0,a5,0
 700:	00000097          	auipc	ra,0x0
 704:	eb4080e7          	jalr	ra,-332(ra) # 5b4 <push>
    push(&pq, 7, 0); 
 708:	fec40793          	addi	a5,s0,-20
 70c:	00000613          	addi	a2,zero,0
 710:	00700593          	addi	a1,zero,7
 714:	00078513          	addi	a0,a5,0
 718:	00000097          	auipc	ra,0x0
 71c:	e9c080e7          	jalr	ra,-356(ra) # 5b4 <push>
  
    while (!isEmpty(&pq)) { 
 720:	0140006f          	jal	zero,734 <main+0x84>
#ifdef DEBUG
        printf("%d ", peek(&pq)); 
#endif
        pop(&pq); 
 724:	fec40793          	addi	a5,s0,-20
 728:	00078513          	addi	a0,a5,0
 72c:	00000097          	auipc	ra,0x0
 730:	e34080e7          	jalr	ra,-460(ra) # 560 <pop>
    while (!isEmpty(&pq)) { 
 734:	fec40793          	addi	a5,s0,-20
 738:	00078513          	addi	a0,a5,0
 73c:	00000097          	auipc	ra,0x0
 740:	f44080e7          	jalr	ra,-188(ra) # 680 <isEmpty>
 744:	00050793          	addi	a5,a0,0
 748:	fc078ee3          	beq	a5,zero,724 <main+0x74>
    } 
  
    return 0; 
 74c:	00000793          	addi	a5,zero,0
}
 750:	00078513          	addi	a0,a5,0
 754:	01c12083          	lw	ra,28(sp)
 758:	01812403          	lw	s0,24(sp)
 75c:	02010113          	addi	sp,sp,32
 760:	00008067          	jalr	zero,0(ra)

00000764 <memset>:
 764:	433d                	c.li	t1,15
 766:	872a                	c.mv	a4,a0
 768:	02c37363          	bgeu	t1,a2,78e <memset+0x2a>
 76c:	00f77793          	andi	a5,a4,15
 770:	efbd                	c.bnez	a5,7ee <memset+0x8a>
 772:	e5ad                	c.bnez	a1,7dc <memset+0x78>
 774:	ff067693          	andi	a3,a2,-16
 778:	8a3d                	c.andi	a2,15
 77a:	96ba                	c.add	a3,a4
 77c:	c30c                	c.sw	a1,0(a4)
 77e:	c34c                	c.sw	a1,4(a4)
 780:	c70c                	c.sw	a1,8(a4)
 782:	c74c                	c.sw	a1,12(a4)
 784:	0741                	c.addi	a4,16
 786:	fed76be3          	bltu	a4,a3,77c <memset+0x18>
 78a:	e211                	c.bnez	a2,78e <memset+0x2a>
 78c:	8082                	c.jr	ra
 78e:	40c306b3          	sub	a3,t1,a2
 792:	068a                	c.slli	a3,0x2
 794:	00000297          	auipc	t0,0x0
 798:	9696                	c.add	a3,t0
 79a:	00a68067          	jalr	zero,10(a3)
 79e:	00b70723          	sb	a1,14(a4)
 7a2:	00b706a3          	sb	a1,13(a4)
 7a6:	00b70623          	sb	a1,12(a4)
 7aa:	00b705a3          	sb	a1,11(a4)
 7ae:	00b70523          	sb	a1,10(a4)
 7b2:	00b704a3          	sb	a1,9(a4)
 7b6:	00b70423          	sb	a1,8(a4)
 7ba:	00b703a3          	sb	a1,7(a4)
 7be:	00b70323          	sb	a1,6(a4)
 7c2:	00b702a3          	sb	a1,5(a4)
 7c6:	00b70223          	sb	a1,4(a4)
 7ca:	00b701a3          	sb	a1,3(a4)
 7ce:	00b70123          	sb	a1,2(a4)
 7d2:	00b700a3          	sb	a1,1(a4)
 7d6:	00b70023          	sb	a1,0(a4)
 7da:	8082                	c.jr	ra
 7dc:	0ff5f593          	andi	a1,a1,255
 7e0:	00859693          	slli	a3,a1,0x8
 7e4:	8dd5                	c.or	a1,a3
 7e6:	01059693          	slli	a3,a1,0x10
 7ea:	8dd5                	c.or	a1,a3
 7ec:	b761                	c.j	774 <memset+0x10>
 7ee:	00279693          	slli	a3,a5,0x2
 7f2:	00000297          	auipc	t0,0x0
 7f6:	9696                	c.add	a3,t0
 7f8:	8286                	c.mv	t0,ra
 7fa:	fa8680e7          	jalr	ra,-88(a3)
 7fe:	8096                	c.mv	ra,t0
 800:	17c1                	c.addi	a5,-16
 802:	8f1d                	c.sub	a4,a5
 804:	963e                	c.add	a2,a5
 806:	f8c374e3          	bgeu	t1,a2,78e <memset+0x2a>
 80a:	b7a5                	c.j	772 <memset+0xe>
	...

Disassembly of section .sdata:

00000860 <next_index>:
static void* next_index = (void *)heap; //the next place to be allocated
 860:	0880                	c.addi4spn	s0,sp,80
	...

00000864 <avail_mem>:
static unsigned int avail_mem = sizeof(heap); //the most CONTIGUOUS memory available
 864:	4000                	c.lw	s0,0(s0)
	...

Disassembly of section .bss:

00000880 <heap>:
	...

00001040 <__global_pointer$>:
	...

00004880 <base>:
	...

00004888 <freep>:
static Header *freep = NULL; //start of the free list
    4888:	0000                	c.unimp
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
	nop
   0:	2941                	c.jal	490 <tj_calloc+0xc>
   2:	0000                	c.unimp
	la ra, exit
   4:	7200                	.2byte	0x7200
   6:	7369                	c.lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <crt+0x14>
	la sp, _sp
   c:	001f 0000 1004      	.byte	0x1f, 0x00, 0x00, 0x00, 0x04, 0x10
  12:	7205                	c.lui	tp,0xfffe1
	mv s0, sp
  14:	3376                	.2byte	0x3376
  16:	6932                	.2byte	0x6932
	la gp, __global_pointer$
  18:	7032                	.2byte	0x7032
  1a:	5f30                	c.lw	a2,120(a4)
  1c:	326d                	c.jal	fffff9c6 <_sp+0xfffef9c6>
  1e:	3070                	.2byte	0x3070
	li tp, 0
  20:	635f 7032 0030      	.byte	0x5f, 0x63, 0x32, 0x70, 0x30, 0x00
	li t0, 0
  26:	0108                	c.addi4spn	a0,sp,128
	li t1, 0
  28:	0b0a                	c.slli	s6,0x2

Disassembly of section .comment:

00000000 <.comment>:
	nop
   0:	3a434347          	.4byte	0x3a434347
	la ra, exit
   4:	2820                	.2byte	0x2820
   6:	31202967          	.4byte	0x31202967
   a:	2e31                	c.jal	326 <tj_malloc+0x36>
	la sp, _sp
   c:	2e31                	c.jal	328 <tj_malloc+0x38>
   e:	0030                	c.addi4spn	a2,sp,8

Disassembly of section .debug_line:

00000000 <.debug_line>:
	nop
   0:	0124                	c.addi4spn	s1,sp,136
   2:	0000                	c.unimp
	la ra, exit
   4:	0005                	c.addi	zero,1
   6:	0004                	.2byte	0x4
   8:	002a                	c.slli	zero,0xa
   a:	0000                	c.unimp
	la sp, _sp
   c:	0101                	c.addi	sp,0
   e:	fb01                	c.bnez	a4,ffffff1e <_sp+0xfffeff1e>
  10:	0d0e                	c.slli	s10,0x3
  12:	0100                	c.addi4spn	s0,sp,128
	mv s0, sp
  14:	0101                	c.addi	sp,0
  16:	0001                	c.addi	zero,0
	la gp, __global_pointer$
  18:	0000                	c.unimp
  1a:	0001                	c.addi	zero,0
  1c:	0100                	c.addi4spn	s0,sp,128
  1e:	0101                	c.addi	sp,0
	li tp, 0
  20:	011f 0000 0000      	.byte	0x1f, 0x01, 0x00, 0x00, 0x00, 0x00
	li t0, 0
  26:	0102                	c.slli64	sp
	li t1, 0
  28:	021f 020f 004b      	.byte	0x1f, 0x02, 0x0f, 0x02, 0x4b, 0x00
	li t2, 0
  2e:	0000                	c.unimp
	li s1, 0
  30:	4b00                	c.lw	s0,16(a4)
  32:	0000                	c.unimp
	li a0, 0
  34:	0000                	c.unimp
  36:	0500                	c.addi4spn	s0,sp,640
	li a1, 0
  38:	0002                	c.slli64	zero
  3a:	0000                	c.unimp
	li a2, 0
  3c:	0300                	c.addi4spn	s0,sp,384
  3e:	010d                	c.addi	sp,3
	li a3, 0
  40:	04090103          	lb	sp,64(s2)
	li a4, 0
  44:	0100                	c.addi4spn	s0,sp,128
  46:	08090103          	lb	sp,128(s2)
	li a5, 0
  4a:	0100                	c.addi4spn	s0,sp,128
	li a6, 0
  4c:	08090103          	lb	sp,128(s2)
	li a7, 0
  50:	0100                	c.addi4spn	s0,sp,128
  52:	04090103          	lb	sp,64(s2)
	li s2, 0
  56:	0100                	c.addi4spn	s0,sp,128
	li s3, 0
  58:	08090103          	lb	sp,128(s2)
	li s4, 0
  5c:	0100                	c.addi4spn	s0,sp,128
  5e:	04090103          	lb	sp,64(s2)
	li s5, 0
  62:	0100                	c.addi4spn	s0,sp,128
	li s6, 0
  64:	04090103          	lb	sp,64(s2)
	li s7, 0
  68:	0100                	c.addi4spn	s0,sp,128
  6a:	04090103          	lb	sp,64(s2)
	li s8, 0
  6e:	0100                	c.addi4spn	s0,sp,128
	li s9, 0
  70:	04090103          	lb	sp,64(s2)
	li s10, 0
  74:	0100                	c.addi4spn	s0,sp,128
  76:	04090103          	lb	sp,64(s2)
	li s11, 0
  7a:	0100                	c.addi4spn	s0,sp,128
	li t3, 0
  7c:	04090103          	lb	sp,64(s2)
	li t4, 0
  80:	0100                	c.addi4spn	s0,sp,128
  82:	04090103          	lb	sp,64(s2)
	li t5, 0
  86:	0100                	c.addi4spn	s0,sp,128
	li t6, 0
  88:	04090103          	lb	sp,64(s2)
	j main
  8c:	0100                	c.addi4spn	s0,sp,128
  8e:	04090103          	lb	sp,64(s2)
  92:	0100                	c.addi4spn	s0,sp,128
  94:	04090103          	lb	sp,64(s2)
  98:	0100                	c.addi4spn	s0,sp,128
  9a:	04090103          	lb	sp,64(s2)
  9e:	0100                	c.addi4spn	s0,sp,128
	la sp, _sp
  a0:	04090103          	lb	sp,64(s2)
  a4:	0100                	c.addi4spn	s0,sp,128
  a6:	04090103          	lb	sp,64(s2)
	sw a0, -8(sp)
  aa:	0100                	c.addi4spn	s0,sp,128
	nop
  ac:	04090103          	lb	sp,64(s2)
	wfi
  b0:	0100                	c.addi4spn	s0,sp,128
  b2:	04090103          	lb	sp,64(s2)
void tj_free(void *mem) {
  b6:	0100                	c.addi4spn	s0,sp,128
  b8:	04090103          	lb	sp,64(s2)
  bc:	0100                	c.addi4spn	s0,sp,128
  be:	04090103          	lb	sp,64(s2)
  c2:	0100                	c.addi4spn	s0,sp,128
  c4:	04090103          	lb	sp,64(s2)
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	0100                	c.addi4spn	s0,sp,128
  ca:	04090103          	lb	sp,64(s2)
  ce:	0100                	c.addi4spn	s0,sp,128
  d0:	04090103          	lb	sp,64(s2)
  d4:	0100                	c.addi4spn	s0,sp,128
  d6:	04090103          	lb	sp,64(s2)
  da:	0100                	c.addi4spn	s0,sp,128
  dc:	04090103          	lb	sp,64(s2)
  e0:	0100                	c.addi4spn	s0,sp,128
  e2:	04090103          	lb	sp,64(s2)
  e6:	0100                	c.addi4spn	s0,sp,128
		exit(1);
  e8:	04090103          	lb	sp,64(s2)
  ec:	0100                	c.addi4spn	s0,sp,128
  ee:	04090103          	lb	sp,64(s2)
  f2:	0100                	c.addi4spn	s0,sp,128
	bp = (Header *)mem - 1; //point to block header
  f4:	04090103          	lb	sp,64(s2)
  f8:	0100                	c.addi4spn	s0,sp,128
  fa:	04090103          	lb	sp,64(s2)
  fe:	0100                	c.addi4spn	s0,sp,128
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	0409                	c.addi	s0,2
 102:	0000                	c.unimp
 104:	0101                	c.addi	sp,0
 106:	0500                	c.addi4spn	s0,sp,640
 108:	a002                	.2byte	0xa002
 10a:	0000                	c.unimp
 10c:	0300                	c.addi4spn	s0,sp,384
 10e:	01030133          	add	sp,t1,a6
		if (p >= p->next && (bp > p || bp < p->next))
 112:	0809                	c.addi	a6,2
 114:	0100                	c.addi4spn	s0,sp,128
 116:	04090103          	lb	sp,64(s2)
 11a:	0100                	c.addi4spn	s0,sp,128
 11c:	04090103          	lb	sp,64(s2)
 120:	0100                	c.addi4spn	s0,sp,128
 122:	0409                	c.addi	s0,2
 124:	0000                	c.unimp
 126:	0101                	c.addi	sp,0
 128:	051f 0000 0005      	.byte	0x1f, 0x05, 0x00, 0x00, 0x05, 0x00
 12e:	0004                	.2byte	0x4
 130:	004a                	c.slli	zero,0x12
 132:	0000                	c.unimp
 134:	0101                	c.addi	sp,0
 136:	fb01                	c.bnez	a4,46 <crt+0x46>
 138:	0d0e                	c.slli	s10,0x3
 13a:	0100                	c.addi4spn	s0,sp,128
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	0101                	c.addi	sp,0
 13e:	0001                	c.addi	zero,0
 140:	0000                	c.unimp
 142:	0001                	c.addi	zero,0
 144:	0100                	c.addi4spn	s0,sp,128
 146:	0101                	c.addi	sp,0
 148:	041f 0000 0000      	.byte	0x1f, 0x04, 0x00, 0x00, 0x00, 0x00
 14e:	006d                	c.addi	zero,27
 150:	0000                	c.unimp
 152:	0078                	c.addi4spn	a4,sp,12
 154:	0000                	c.unimp
 156:	00b0                	c.addi4spn	a2,sp,72
 158:	0000                	c.unimp
 15a:	0102                	c.slli64	sp
 15c:	021f 060f 005c      	.byte	0x1f, 0x02, 0x0f, 0x06, 0x5c, 0x00
 162:	0000                	c.unimp
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	d901                	c.beqz	a0,74 <crt+0x74>
 166:	0000                	c.unimp
 168:	0100                	c.addi4spn	s0,sp,128
 16a:	005c                	c.addi4spn	a5,sp,4
 16c:	0000                	c.unimp
 16e:	e501                	c.bnez	a0,176 <tj_free+0xc2>
 170:	0000                	c.unimp
 172:	0200                	c.addi4spn	s0,sp,256
 174:	00ee                	c.slli	ra,0x1b
 176:	0000                	c.unimp
 178:	0000f703          	.4byte	0xf703
 17c:	0300                	c.addi4spn	s0,sp,384
 17e:	1905                	c.addi	s2,-31
 180:	0500                	c.addi4spn	s0,sp,640
 182:	b402                	.2byte	0xb402
		bp->size += p->next->size;
 184:	0000                	c.unimp
 186:	0300                	c.addi4spn	s0,sp,384
 188:	0129                	c.addi	sp,10
 18a:	0505                	c.addi	a0,1
 18c:	14090303          	lb	t1,320(s2)
 190:	0100                	c.addi4spn	s0,sp,128
 192:	2205                	c.jal	2b2 <getmoremem+0x6e>
 194:	0200                	c.addi4spn	s0,sp,256
 196:	0104                	c.addi4spn	s1,sp,128
 198:	10090003          	lb	zero,256(s2)
 19c:	0100                	c.addi4spn	s0,sp,128
 19e:	1905                	c.addi	s2,-31
 1a0:	0200                	c.addi4spn	s0,sp,256
 1a2:	0104                	c.addi4spn	s1,sp,128
		bp->next = p->next->next;
 1a4:	08090003          	lb	zero,128(s2)
 1a8:	0100                	c.addi4spn	s0,sp,128
 1aa:	0305                	c.addi	t1,1 # ffffa001 <_sp+0xfffea001>
 1ac:	08090103          	lb	sp,128(s2)
 1b0:	0100                	c.addi4spn	s0,sp,128
 1b2:	0505                	c.addi	a0,1
 1b4:	0c090303          	lb	t1,192(s2)
 1b8:	0100                	c.addi4spn	s0,sp,128
 1ba:	0905                	c.addi	s2,1
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	0c090203          	lb	tp,192(s2)
 1c0:	0100                	c.addi4spn	s0,sp,128
 1c2:	0205                	c.addi	tp,1 # fffe1001 <_sp+0xfffd1001>
 1c4:	0c090003          	lb	zero,192(s2)
 1c8:	0100                	c.addi4spn	s0,sp,128
 1ca:	0d05                	c.addi	s10,1
	if (p + p->size == bp) { //join to lower nbr
 1cc:	04090303          	lb	t1,64(s2)
 1d0:	0100                	c.addi4spn	s0,sp,128
 1d2:	0605                	c.addi	a2,1
 1d4:	08090003          	lb	zero,128(s2)
 1d8:	0100                	c.addi4spn	s0,sp,128
 1da:	1405                	c.addi	s0,-31
 1dc:	0200                	c.addi4spn	s0,sp,256
 1de:	0104                	c.addi4spn	s1,sp,128
 1e0:	08090003          	lb	zero,128(s2)
 1e4:	0100                	c.addi4spn	s0,sp,128
 1e6:	2805                	c.jal	216 <tj_free+0x162>
		p->size += bp->size;
 1e8:	0200                	c.addi4spn	s0,sp,256
 1ea:	0204                	c.addi4spn	s1,sp,256
 1ec:	0c090003          	lb	zero,192(s2)
 1f0:	0100                	c.addi4spn	s0,sp,128
 1f2:	1f05                	c.addi	t5,-31
 1f4:	0200                	c.addi4spn	s0,sp,256
 1f6:	0204                	c.addi4spn	s1,sp,256
 1f8:	08090003          	lb	zero,128(s2)
 1fc:	0100                	c.addi4spn	s0,sp,128
 1fe:	2f05                	c.jal	92e <heap+0xae>
 200:	0200                	c.addi4spn	s0,sp,256
 202:	0204                	c.addi4spn	s1,sp,256
		p->next = bp->next;
 204:	08097d03          	.4byte	0x8097d03
 208:	0100                	c.addi4spn	s0,sp,128
 20a:	1205                	c.addi	tp,-31 # ffffffe1 <_sp+0xfffeffe1>
 20c:	0200                	c.addi4spn	s0,sp,256
 20e:	0104                	c.addi4spn	s1,sp,128
 210:	0c090003          	lb	zero,192(s2)
 214:	0100                	c.addi4spn	s0,sp,128
 216:	2405                	c.jal	436 <tj_malloc+0x146>
		p->next = bp; //again, if the free list is just the base
 218:	0200                	c.addi4spn	s0,sp,256
 21a:	0304                	c.addi4spn	s1,sp,384
 21c:	0c090003          	lb	zero,192(s2)
 220:	0100                	c.addi4spn	s0,sp,128
 222:	1205                	c.addi	tp,-31 # ffffffe1 <_sp+0xfffeffe1>
	freep = p;
 224:	0200                	c.addi4spn	s0,sp,256
 226:	0304                	c.addi4spn	s1,sp,384
 228:	08090003          	lb	zero,128(s2)
 22c:	0100                	c.addi4spn	s0,sp,128
 22e:	0d05                	c.addi	s10,1
}
 230:	08090703          	lb	a4,128(s2)
 234:	0100                	c.addi4spn	s0,sp,128
 236:	0905                	c.addi	s2,1
 238:	08090003          	lb	zero,128(s2)
 23c:	0100                	c.addi4spn	s0,sp,128
 23e:	1805                	c.addi	a6,-31
 240:	0c090003          	lb	zero,192(s2)
static Header* getmoremem(unsigned int total_size) {
 244:	0100                	c.addi4spn	s0,sp,128
 246:	0505                	c.addi	a0,1
 248:	08090003          	lb	zero,128(s2)
 24c:	0100                	c.addi4spn	s0,sp,128
 24e:	0c05                	c.addi	s8,1
 250:	04090203          	lb	tp,64(s2)
 254:	0100                	c.addi4spn	s0,sp,128
 256:	1005                	c.addi	zero,-31
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 258:	08090003          	lb	zero,128(s2)
 25c:	0100                	c.addi4spn	s0,sp,128
 25e:	1605                	c.addi	a2,-31
 260:	08090003          	lb	zero,128(s2)
 264:	0100                	c.addi4spn	s0,sp,128
 266:	0c05                	c.addi	s8,1
 268:	04090003          	lb	zero,64(s2)
 26c:	0100                	c.addi4spn	s0,sp,128
 26e:	0f05                	c.addi	t5,1
	Header* up = (Header *)next_index;
 270:	0c090103          	lb	sp,192(s2)
 274:	0100                	c.addi4spn	s0,sp,128
 276:	1505                	c.addi	a0,-31
 278:	08090003          	lb	zero,128(s2)
	next_index += total_size; //allocate the block
 27c:	0100                	c.addi4spn	s0,sp,128
 27e:	0c05                	c.addi	s8,1
 280:	04090003          	lb	zero,64(s2)
 284:	0100                	c.addi4spn	s0,sp,128
 286:	0f05                	c.addi	t5,1
 288:	0c090203          	lb	tp,192(s2)
 28c:	0100                	c.addi4spn	s0,sp,128
 28e:	0c05                	c.addi	s8,1
 290:	08090003          	lb	zero,128(s2)
	avail_mem -= total_size; //deduct from avail mem;
 294:	0100                	c.addi4spn	s0,sp,128
 296:	0b05                	c.addi	s6,1
 298:	08090403          	lb	s0,128(s2)
 29c:	0100                	c.addi4spn	s0,sp,128
 29e:	0805                	c.addi	a6,1
 2a0:	08090003          	lb	zero,128(s2)
 2a4:	0100                	c.addi4spn	s0,sp,128
 2a6:	0505                	c.addi	a0,1
 2a8:	0c090003          	lb	zero,192(s2)
	up->size = total_size - sizeof(Header); //set the size right
 2ac:	0100                	c.addi4spn	s0,sp,128
 2ae:	0b05                	c.addi	s6,1
 2b0:	08090203          	lb	tp,128(s2)
 2b4:	0100                	c.addi4spn	s0,sp,128
 2b6:	1005                	c.addi	zero,-31
 2b8:	08090003          	lb	zero,128(s2)
	tj_free((void *)(++up)); //append the new block to the free list first
 2bc:	0100                	c.addi4spn	s0,sp,128
 2be:	0b05                	c.addi	s6,1
 2c0:	08090003          	lb	zero,128(s2)
 2c4:	0100                	c.addi4spn	s0,sp,128
 2c6:	0f05                	c.addi	t5,1
 2c8:	0c090103          	lb	sp,192(s2)
 2cc:	0100                	c.addi4spn	s0,sp,128
 2ce:	0b05                	c.addi	s6,1
 2d0:	08090003          	lb	zero,128(s2)
	return freep;
 2d4:	0100                	c.addi4spn	s0,sp,128
 2d6:	0c090203          	lb	tp,192(s2)
 2da:	0100                	c.addi4spn	s0,sp,128
}
 2dc:	0805                	c.addi	a6,1
 2de:	0c090303          	lb	t1,192(s2)
 2e2:	0100                	c.addi4spn	s0,sp,128
 2e4:	0105                	c.addi	sp,1
 2e6:	0c090103          	lb	sp,192(s2)
 2ea:	0100                	c.addi4spn	s0,sp,128
 2ec:	3405                	c.jal	fffffd0c <_sp+0xfffefd0c>
 2ee:	14090203          	lb	tp,320(s2)
void *tj_malloc(unsigned int size) {
 2f2:	0100                	c.addi4spn	s0,sp,128
 2f4:	1005                	c.addi	zero,-31
 2f6:	14090103          	lb	sp,320(s2)
 2fa:	0100                	c.addi4spn	s0,sp,128
 2fc:	0505                	c.addi	a0,1
 2fe:	08090003          	lb	zero,128(s2)
 302:	0100                	c.addi4spn	s0,sp,128
	if (size > sizeof(heap)) return NULL;
 304:	2505                	c.jal	924 <heap+0xa4>
 306:	0200                	c.addi4spn	s0,sp,256
 308:	0104                	c.addi4spn	s1,sp,128
 30a:	08090003          	lb	zero,128(s2)
 30e:	0100                	c.addi4spn	s0,sp,128
 310:	0a05                	c.addi	s4,1
 312:	08090103          	lb	sp,128(s2)
 316:	0100                	c.addi4spn	s0,sp,128
	if ((size & 3) != 0) {
 318:	0d05                	c.addi	s10,1
 31a:	0c090103          	lb	sp,192(s2)
 31e:	0100                	c.addi4spn	s0,sp,128
 320:	0c05                	c.addi	s8,1
 322:	18090103          	lb	sp,384(s2)
		size = size + 4 - (size & 3);
 326:	0100                	c.addi4spn	s0,sp,128
 328:	1805                	c.addi	a6,-31
 32a:	18090103          	lb	sp,384(s2)
 32e:	0100                	c.addi4spn	s0,sp,128
 330:	0b05                	c.addi	s6,1
 332:	08090003          	lb	zero,128(s2)
	unsigned int total_size = size + sizeof(Header); //need to include the header size as well
 336:	0100                	c.addi4spn	s0,sp,128
 338:	0205                	c.addi	tp,1 # 1 <crt+0x1>
 33a:	08090103          	lb	sp,128(s2)
 33e:	0100                	c.addi4spn	s0,sp,128
	prevp = freep;
 340:	0905                	c.addi	s2,1
 342:	18090103          	lb	sp,384(s2)
 346:	0100                	c.addi4spn	s0,sp,128
 348:	0105                	c.addi	sp,1
 34a:	08090103          	lb	sp,128(s2)
	if (prevp == NULL) {
 34e:	0100                	c.addi4spn	s0,sp,128
 350:	2405                	c.jal	570 <pop+0x10>
 352:	14090203          	lb	tp,320(s2)
		prevp = &base;
 356:	0100                	c.addi4spn	s0,sp,128
 358:	0505                	c.addi	a0,1
 35a:	14090203          	lb	tp,320(s2)
 35e:	0100                	c.addi4spn	s0,sp,128
		freep = prevp;
 360:	2205                	c.jal	480 <tj_malloc+0x190>
 362:	0200                	c.addi4spn	s0,sp,256
 364:	0104                	c.addi4spn	s1,sp,128
 366:	0c090003          	lb	zero,192(s2)
 36a:	0100                	c.addi4spn	s0,sp,128
		base.next = freep;
 36c:	0c05                	c.addi	s8,1
 36e:	08090303          	lb	t1,128(s2)
 372:	0100                	c.addi4spn	s0,sp,128
 374:	0505                	c.addi	a0,1
 376:	08090003          	lb	zero,128(s2)
 37a:	0100                	c.addi4spn	s0,sp,128
 37c:	1305                	c.addi	t1,-31
 37e:	04090103          	lb	sp,64(s2)
		base.size = 0;
 382:	0100                	c.addi4spn	s0,sp,128
 384:	0805                	c.addi	a6,1
 386:	08090003          	lb	zero,128(s2)
 38a:	0100                	c.addi4spn	s0,sp,128
	for (p = prevp->next; ;prevp = p, p = p->next) {
 38c:	0f05                	c.addi	t5,1
 38e:	08090603          	lb	a2,128(s2)
 392:	0100                	c.addi4spn	s0,sp,128
 394:	0805                	c.addi	a6,1
 396:	0c090203          	lb	tp,192(s2)
		if (p->size >= size) { //big enough
 39a:	0100                	c.addi4spn	s0,sp,128
 39c:	0505                	c.addi	a0,1
 39e:	0c090203          	lb	tp,192(s2)
 3a2:	0100                	c.addi4spn	s0,sp,128
 3a4:	0905                	c.addi	s2,1
 3a6:	08090103          	lb	sp,128(s2)
			if (p->size == size) // exact size
 3aa:	0100                	c.addi4spn	s0,sp,128
 3ac:	0c090103          	lb	sp,192(s2)
 3b0:	0100                	c.addi4spn	s0,sp,128
 3b2:	0d05                	c.addi	s10,1
 3b4:	0c090103          	lb	sp,192(s2)
				prevp->next = p->next; // just return that block
 3b8:	0100                	c.addi4spn	s0,sp,128
 3ba:	14090103          	lb	sp,320(s2)
 3be:	0100                	c.addi4spn	s0,sp,128
 3c0:	0905                	c.addi	s2,1
 3c2:	0c090303          	lb	t1,192(s2)
 3c6:	0100                	c.addi4spn	s0,sp,128
 3c8:	0805                	c.addi	a6,1
 3ca:	0c090103          	lb	sp,192(s2)
				p->size -= total_size; //break up the block
 3ce:	0100                	c.addi4spn	s0,sp,128
 3d0:	0605                	c.addi	a2,1
 3d2:	08090003          	lb	zero,128(s2)
 3d6:	0100                	c.addi4spn	s0,sp,128
 3d8:	0905                	c.addi	s2,1
 3da:	08090103          	lb	sp,128(s2)
 3de:	0100                	c.addi4spn	s0,sp,128
 3e0:	0705                	c.addi	a4,1
 3e2:	08090003          	lb	zero,128(s2)
				p += p->size;
 3e6:	0100                	c.addi4spn	s0,sp,128
 3e8:	1405                	c.addi	s0,-31
 3ea:	08090103          	lb	sp,128(s2)
 3ee:	0100                	c.addi4spn	s0,sp,128
 3f0:	1105                	c.addi	sp,-31
 3f2:	08090003          	lb	zero,128(s2)
 3f6:	0100                	c.addi4spn	s0,sp,128
 3f8:	0d05                	c.addi	s10,1
 3fa:	0c090203          	lb	tp,192(s2)
				p->size = size;
 3fe:	0100                	c.addi4spn	s0,sp,128
 400:	0b05                	c.addi	s6,1
 402:	18090103          	lb	sp,384(s2)
 406:	0100                	c.addi4spn	s0,sp,128
			freep = prevp;
 408:	0705                	c.addi	a4,1
 40a:	08090003          	lb	zero,128(s2)
 40e:	0100                	c.addi4spn	s0,sp,128
 410:	0d05                	c.addi	s10,1
 412:	10090103          	lb	sp,256(s2)
			return (void *)(++p);
 416:	0100                	c.addi4spn	s0,sp,128
 418:	0a05                	c.addi	s4,1
 41a:	0c090203          	lb	tp,192(s2)
 41e:	0100                	c.addi4spn	s0,sp,128
 420:	0b05                	c.addi	s6,1
 422:	0c090403          	lb	s0,192(s2)
 426:	0100                	c.addi4spn	s0,sp,128
		if (p == freep) //wrapped around free list
 428:	0905                	c.addi	s2,1
 42a:	14090203          	lb	tp,320(s2)
 42e:	0100                	c.addi4spn	s0,sp,128
 430:	0605                	c.addi	a2,1
 432:	08090003          	lb	zero,128(s2)
 436:	0100                	c.addi4spn	s0,sp,128
			if ((p = getmoremem(total_size)) == NULL) //if the heap runs out
 438:	0d05                	c.addi	s10,1
 43a:	08090103          	lb	sp,128(s2)
 43e:	0100                	c.addi4spn	s0,sp,128
 440:	0705                	c.addi	a4,1
 442:	10090003          	lb	zero,256(s2)
 446:	0100                	c.addi4spn	s0,sp,128
 448:	0c05                	c.addi	s8,1
 44a:	08090103          	lb	sp,128(s2)
 44e:	0100                	c.addi4spn	s0,sp,128
				return NULL; //well, you got nothing left, gg
 450:	1f05                	c.addi	t5,-31
 452:	08096f03          	.4byte	0x8096f03
 456:	0100                	c.addi4spn	s0,sp,128
	for (p = prevp->next; ;prevp = p, p = p->next) {
 458:	2605                	c.jal	778 <memset+0x14>
 45a:	08090003          	lb	zero,128(s2)
 45e:	0100                	c.addi4spn	s0,sp,128
 460:	0605                	c.addi	a2,1
 462:	0c090103          	lb	sp,192(s2)
 466:	0100                	c.addi4spn	s0,sp,128
 468:	0105                	c.addi	sp,1
 46a:	04091203          	lh	tp,64(s2)
		if (p->size >= size) { //big enough
 46e:	0100                	c.addi4spn	s0,sp,128
}
 470:	2405                	c.jal	690 <isEmpty+0x10>
 472:	14090203          	lb	tp,320(s2)
 476:	0100                	c.addi4spn	s0,sp,128
 478:	0e05                	c.addi	t3,1
 47a:	14090103          	lb	sp,320(s2)
 47e:	0100                	c.addi4spn	s0,sp,128
 480:	0205                	c.addi	tp,1 # 1 <crt+0x1>
 482:	10090103          	lb	sp,256(s2)
void *tj_calloc(unsigned int size) {
 486:	0100                	c.addi4spn	s0,sp,128
 488:	0905                	c.addi	s2,1
 48a:	14090103          	lb	sp,320(s2)
 48e:	0100                	c.addi4spn	s0,sp,128
 490:	0105                	c.addi	sp,1
 492:	04090103          	lb	sp,64(s2)
 496:	0100                	c.addi4spn	s0,sp,128
	void *mem = tj_malloc(size);
 498:	0204                	c.addi4spn	s1,sp,256
 49a:	097f9103          	lh	sp,151(t6)
 49e:	0014                	.2byte	0x14
 4a0:	0501                	c.addi	a0,0
 4a2:	0319                	c.addi	t1,6
 4a4:	0901                	c.addi	s2,0
 4a6:	0018                	.2byte	0x18
	memset(mem, 0, size);
 4a8:	0501                	c.addi	a0,0
 4aa:	0310                	c.addi4spn	a2,sp,384
 4ac:	0901                	c.addi	s2,0
 4ae:	0010                	.2byte	0x10
 4b0:	0501                	c.addi	a0,0
 4b2:	0314                	c.addi4spn	a3,sp,384
 4b4:	0901                	c.addi	s2,0
 4b6:	000c                	.2byte	0xc
 4b8:	0501                	c.addi	a0,0
 4ba:	0310                	c.addi4spn	a2,sp,384
	return mem;
 4bc:	0901                	c.addi	s2,0
 4be:	000c                	.2byte	0xc
}
 4c0:	0501                	c.addi	a0,0
 4c2:	030c                	c.addi4spn	a1,sp,384
 4c4:	0902                	c.slli64	s2
 4c6:	0008                	.2byte	0x8
 4c8:	0501                	c.addi	a0,0
 4ca:	0301                	c.addi	t1,0
 4cc:	0901                	c.addi	s2,0
 4ce:	0004                	.2byte	0x4
 4d0:	0301                	c.addi	t1,0
 4d2:	0904                	c.addi4spn	s1,sp,144
{ 
 4d4:	0014                	.2byte	0x14
 4d6:	0501                	c.addi	a0,0
 4d8:	030d                	c.addi	t1,3
 4da:	0901                	c.addi	s2,0
 4dc:	0010                	.2byte	0x10
 4de:	0501                	c.addi	a0,0
 4e0:	09000313          	addi	t1,zero,144
 4e4:	0008                	.2byte	0x8
 4e6:	0501                	c.addi	a0,0
 4e8:	0301                	c.addi	t1,0
 4ea:	0901                	c.addi	s2,0
    Node* temp = (Node*)tj_malloc(sizeof(Node)); 
 4ec:	0004                	.2byte	0x4
 4ee:	0301                	c.addi	t1,0
 4f0:	0905                	c.addi	s2,1
 4f2:	0010                	.2byte	0x10
 4f4:	0501                	c.addi	a0,0
 4f6:	0901030b          	.4byte	0x901030b
 4fa:	0014                	.2byte	0x14
    temp->data = d; 
 4fc:	0501                	c.addi	a0,0
 4fe:	0310                	c.addi4spn	a2,sp,384
 500:	0901                	c.addi	s2,0
 502:	000c                	.2byte	0xc
 504:	0501                	c.addi	a0,0
 506:	0316                	c.slli	t1,0x5
    temp->priority = p; 
 508:	0900                	c.addi4spn	s0,sp,144
 50a:	0008                	.2byte	0x8
 50c:	0501                	c.addi	a0,0
 50e:	030d                	c.addi	t1,3
 510:	0900                	c.addi4spn	s0,sp,144
 512:	0004                	.2byte	0x4
    temp->next = NULL; 
 514:	0501                	c.addi	a0,0
 516:	0305                	c.addi	t1,1
 518:	0901                	c.addi	s2,0
 51a:	0008                	.2byte	0x8
    return temp; 
 51c:	0501                	c.addi	a0,0
 51e:	0301                	c.addi	t1,0
} 
 520:	0901                	c.addi	s2,0
 522:	000c                	.2byte	0xc
 524:	0301                	c.addi	t1,0
 526:	0904                	c.addi4spn	s1,sp,144
 528:	0014                	.2byte	0x14
 52a:	0501                	c.addi	a0,0
 52c:	0901030b          	.4byte	0x901030b
 530:	001c                	.2byte	0x1c
 532:	0501                	c.addi	a0,0
{ 
 534:	0312                	c.slli	t1,0x4
 536:	000c0903          	lb	s2,0(s8)
 53a:	0501                	c.addi	a0,0
 53c:	030a                	c.slli	t1,0x2
 53e:	0905                	c.addi	s2,1
 540:	0014                	.2byte	0x14
 542:	0501                	c.addi	a0,0
    return (*head)->data; 
 544:	0310                	c.addi4spn	a2,sp,384
 546:	0900                	c.addi4spn	s0,sp,144
 548:	0008                	.2byte	0x8
 54a:	0501                	c.addi	a0,0
 54c:	0308                	c.addi4spn	a0,sp,384
 54e:	0900                	c.addi4spn	s0,sp,144
} 
 550:	0004                	.2byte	0x4
 552:	0501                	c.addi	a0,0
 554:	0316                	c.slli	t1,0x5
 556:	00080903          	lb	s2,0(a6)
 55a:	0501                	c.addi	a0,0
 55c:	0314                	c.addi4spn	a3,sp,384
 55e:	0900                	c.addi4spn	s0,sp,144
{ 
 560:	0008                	.2byte	0x8
 562:	0501                	c.addi	a0,0
 564:	0311                	c.addi	t1,4
 566:	0901                	c.addi	s2,0
 568:	0008                	.2byte	0x8
 56a:	0501                	c.addi	a0,0
 56c:	0301                	c.addi	t1,0
 56e:	0910                	c.addi4spn	a2,sp,144
 570:	000c                	.2byte	0xc
 572:	0501                	c.addi	a0,0
    Node* temp = *head; 
 574:	09780313          	addi	t1,a6,151
 578:	0004                	.2byte	0x4
 57a:	0501                	c.addi	a0,0
 57c:	0315                	c.addi	t1,5
 57e:	097e                	c.slli	s2,0x1f
    (*head) = (*head)->next; 
 580:	000c                	.2byte	0xc
 582:	0501                	c.addi	a0,0
 584:	0324                	c.addi4spn	s1,sp,392
 586:	0900                	c.addi4spn	s0,sp,144
 588:	0008                	.2byte	0x8
 58a:	0501                	c.addi	a0,0
 58c:	0015                	c.addi	zero,5
 58e:	0402                	c.slli64	s0
 590:	0301                	c.addi	t1,0
 592:	0901                	c.addi	s2,0
    tj_free(temp); 
 594:	0004                	.2byte	0x4
 596:	0501                	c.addi	a0,0
 598:	0402001b          	.4byte	0x402001b
 59c:	0301                	c.addi	t1,0
 59e:	0900                	c.addi4spn	s0,sp,144
} 
 5a0:	0008                	.2byte	0x8
 5a2:	0501                	c.addi	a0,0
 5a4:	0024                	c.addi4spn	s1,sp,8
 5a6:	0402                	c.slli64	s0
 5a8:	0301                	c.addi	t1,0
 5aa:	097f                	.2byte	0x97f
 5ac:	0004                	.2byte	0x4
 5ae:	0501                	c.addi	a0,0
 5b0:	0907031b          	.4byte	0x907031b
{ 
 5b4:	0008                	.2byte	0x8
 5b6:	0501                	c.addi	a0,0
 5b8:	0314                	c.addi4spn	a3,sp,384
 5ba:	0900                	c.addi4spn	s0,sp,144
 5bc:	0008                	.2byte	0x8
 5be:	0501                	c.addi	a0,0
 5c0:	0315                	c.addi	t1,5
 5c2:	0901                	c.addi	s2,0
 5c4:	0008                	.2byte	0x8
 5c6:	0501                	c.addi	a0,0
 5c8:	0301                	c.addi	t1,0
 5ca:	0902                	c.slli64	s2
 5cc:	000c                	.2byte	0xc
 5ce:	0301                	c.addi	t1,0
    Node* start = (*head); 
 5d0:	0904                	c.addi4spn	s1,sp,144
 5d2:	0014                	.2byte	0x14
 5d4:	0501                	c.addi	a0,0
 5d6:	030d                	c.addi	t1,3
 5d8:	0901                	c.addi	s2,0
 5da:	0010                	.2byte	0x10
    Node* temp = newNode(d, p); 
 5dc:	0501                	c.addi	a0,0
 5de:	0314                	c.addi4spn	a3,sp,384
 5e0:	0900                	c.addi4spn	s0,sp,144
 5e2:	0008                	.2byte	0x8
 5e4:	0501                	c.addi	a0,0
 5e6:	0301                	c.addi	t1,0
 5e8:	0901                	c.addi	s2,0
 5ea:	0008                	.2byte	0x8
 5ec:	0301                	c.addi	t1,0
 5ee:	0904                	c.addi4spn	s1,sp,144
    if ((*head)->priority > p) { 
 5f0:	0010                	.2byte	0x10
 5f2:	0501                	c.addi	a0,0
 5f4:	0310                	c.addi4spn	a2,sp,384
 5f6:	00100903          	lb	s2,1(zero) # 1 <crt+0x1>
 5fa:	0501                	c.addi	a0,0
 5fc:	0900030b          	.4byte	0x900030b
 600:	0014                	.2byte	0x14
 602:	0501                	c.addi	a0,0
        temp->next = *head; 
 604:	0305                	c.addi	t1,1
 606:	0901                	c.addi	s2,0
 608:	0004                	.2byte	0x4
 60a:	0301                	c.addi	t1,0
 60c:	0901                	c.addi	s2,0
 60e:	0018                	.2byte	0x18
 610:	0301                	c.addi	t1,0
 612:	0901                	c.addi	s2,0
        (*head) = temp; 
 614:	0018                	.2byte	0x18
 616:	0501                	c.addi	a0,0
 618:	0902030b          	.4byte	0x902030b
 61c:	0018                	.2byte	0x18
 61e:	0501                	c.addi	a0,0
} 
 620:	0309                	c.addi	t1,2
 622:	0904                	c.addi4spn	s1,sp,144
            start = start->next; 
 624:	0004                	.2byte	0x4
 626:	0501                	c.addi	a0,0
 628:	030d                	c.addi	t1,3
 62a:	097c                	c.addi4spn	a5,sp,156
 62c:	0010                	.2byte	0x10
 62e:	0501                	c.addi	a0,0
        while (start->next != NULL && 
 630:	030c                	c.addi4spn	a1,sp,384
 632:	0900                	c.addi4spn	s0,sp,144
 634:	0014                	.2byte	0x14
 636:	0301                	c.addi	t1,0
 638:	00040907          	.4byte	0x40907
               start->next->priority < p) { 
 63c:	0501                	c.addi	a0,0
 63e:	0301                	c.addi	t1,0
 640:	0901                	c.addi	s2,0
 642:	0004                	.2byte	0x4
 644:	0901                	c.addi	s2,0
 646:	0014                	.2byte	0x14
        while (start->next != NULL && 
 648:	0100                	c.addi4spn	s0,sp,128
 64a:	01              	Address 0x000000000000064a is out of bounds.


Disassembly of section .debug_line_str:

00000000 <.debug_line_str>:
	nop
   0:	6d6f682f          	.4byte	0x6d6f682f
	la ra, exit
   4:	2f65                	c.jal	7bc <memset+0x58>
   6:	7961                	c.lui	s2,0xffff8
   8:	742d616b          	.4byte	0x742d616b
	la sp, _sp
   c:	757a7573          	csrrci	a0,0x757,20
  10:	442f696b          	.4byte	0x442f696b
	mv s0, sp
  14:	6d75636f          	jal	t1,56eea <_sp+0x46eea>
	la gp, __global_pointer$
  18:	6e65                	c.lui	t3,0x19
  1a:	7374                	.2byte	0x7374
  1c:	6f72702f          	.4byte	0x6f72702f
	li tp, 0
  20:	656a                	.2byte	0x656a
  22:	762d7463          	bgeu	s10,sp,78a <memset+0x26>
	li t0, 0
  26:	6f2d                	c.lui	t5,0xb
	li t1, 0
  28:	6570                	.2byte	0x6570
  2a:	2d6e                	.2byte	0x2d6e
	li t2, 0
  2c:	6562                	.2byte	0x6562
  2e:	6174                	.2byte	0x6174
	li s1, 0
  30:	462d                	c.li	a2,11
  32:	452d726f          	jal	tp,d7484 <_sp+0xc7484>
	li a0, 0
  36:	37344543          	.4byte	0x37344543
	li a1, 0
  3a:	3030                	.2byte	0x3030
	li a2, 0
  3c:	2f4a                	.2byte	0x2f4a
  3e:	6974706f          	jal	zero,47ed4 <_sp+0x37ed4>
	li a3, 0
  42:	696d                	c.lui	s2,0x1b
	li a4, 0
  44:	617a                	.2byte	0x617a
  46:	6974                	.2byte	0x6974
	li a5, 0
  48:	63006e6f          	jal	t3,6678 <_ebss+0x1dec>
	li a6, 0
  4c:	7472                	.2byte	0x7472
  4e:	732e                	.2byte	0x732e
	li a7, 0
  50:	7400                	.2byte	0x7400
  52:	7365                	c.lui	t1,0xffff9
	li s2, 0
  54:	5f74                	c.lw	a3,124(a4)
  56:	7270                	.2byte	0x7270
	li s3, 0
  58:	2f73676f          	jal	a4,36b4e <_sp+0x26b4e>
	li s4, 0
  5c:	7270                	.2byte	0x7270
  5e:	6f69                	c.lui	t5,0x1a
	li s5, 0
  60:	6972                	.2byte	0x6972
  62:	7974                	.2byte	0x7974
	li s6, 0
  64:	715f 6575 6575      	.byte	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65
	li s7, 0
  6a:	632e                	.2byte	0x632e
	li s8, 0
  6c:	7400                	.2byte	0x7400
  6e:	7365                	c.lui	t1,0xffff9
	li s9, 0
  70:	5f74                	c.lw	a3,124(a4)
  72:	7270                	.2byte	0x7270
	li s10, 0
  74:	0073676f          	jal	a4,3687a <_sp+0x2687a>
	li s11, 0
  78:	74706f2f          	.4byte	0x74706f2f
	li t3, 0
  7c:	7369722f          	.4byte	0x7369722f
	li t4, 0
  80:	32337663          	bgeu	t1,gp,3ac <tj_malloc+0xbc>
	li t5, 0
  84:	62696c2f          	.4byte	0x62696c2f
	li t6, 0
  88:	6363672f          	.4byte	0x6363672f
	j main
  8c:	7369722f          	.4byte	0x7369722f
  90:	32337663          	bgeu	t1,gp,3bc <tj_malloc+0xcc>
  94:	752d                	c.lui	a0,0xfffeb
  96:	6b6e                	.2byte	0x6b6e
  98:	6f6e                	.2byte	0x6f6e
  9a:	652d6e77          	.4byte	0x652d6e77
  9e:	666c                	.2byte	0x666c
	la sp, _sp
  a0:	2e31312f          	.4byte	0x2e31312f
  a4:	2e31                	c.jal	3c0 <tj_malloc+0xd0>
  a6:	2f30                	.2byte	0x2f30
	sw a0, -8(sp)
  a8:	6e69                	c.lui	t3,0x1a
  aa:	64756c63          	bltu	a0,t2,702 <main+0x52>
	nop
  ae:	0065                	c.addi	zero,25
	wfi
  b0:	74706f2f          	.4byte	0x74706f2f
void tj_free(void *mem) {
  b4:	7369722f          	.4byte	0x7369722f
  b8:	32337663          	bgeu	t1,gp,3e4 <tj_malloc+0xf4>
  bc:	7369722f          	.4byte	0x7369722f
  c0:	32337663          	bgeu	t1,gp,3ec <tj_malloc+0xfc>
  c4:	752d                	c.lui	a0,0xfffeb
  c6:	6b6e                	.2byte	0x6b6e
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	6f6e                	.2byte	0x6f6e
  ca:	652d6e77          	.4byte	0x652d6e77
  ce:	666c                	.2byte	0x666c
  d0:	636e692f          	.4byte	0x636e692f
  d4:	756c                	.2byte	0x756c
  d6:	6564                	.2byte	0x6564
  d8:	7400                	.2byte	0x7400
  da:	5f6a                	c.lwsp	t5,184(sp)
  dc:	616d                	c.addi16sp	sp,240
  de:	6c6c                	.2byte	0x6c6c
  e0:	682e636f          	jal	t1,e6762 <_sp+0xd6762>
  e4:	7300                	.2byte	0x7300
  e6:	6474                	.2byte	0x6474
		exit(1);
  e8:	6564                	.2byte	0x6564
  ea:	2e66                	.2byte	0x2e66
  ec:	0068                	c.addi4spn	a0,sp,12
  ee:	69727473          	csrrci	s0,0x697,4
  f2:	676e                	.2byte	0x676e
	bp = (Header *)mem - 1; //point to block header
  f4:	682e                	.2byte	0x682e
  f6:	7300                	.2byte	0x7300
  f8:	6474                	.2byte	0x6474
  fa:	696c                	.2byte	0x696c
  fc:	2e62                	.2byte	0x2e62
  fe:	0068                	c.addi4spn	a0,sp,12

Disassembly of section .debug_info:

00000000 <.debug_info>:
	nop
   0:	001f 0000 0005      	.byte	0x1f, 0x00, 0x00, 0x00, 0x05, 0x00
	la ra, exit
   6:	0401                	c.addi	s0,0
   8:	0000                	c.unimp
   a:	0000                	c.unimp
	la sp, _sp
   c:	0001                	c.addi	zero,0
   e:	0000                	c.unimp
  10:	0c00                	c.addi4spn	s0,sp,528
  12:	0000                	c.unimp
	mv s0, sp
  14:	0000                	c.unimp
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	0600                	c.addi4spn	s0,sp,768
  1a:	0000                	c.unimp
  1c:	5100                	c.lw	s0,32(a0)
  1e:	0000                	c.unimp
	li tp, 0
  20:	0100                	c.addi4spn	s0,sp,128
  22:	fe80                	.2byte	0xfe80
	li t0, 0
  24:	05000003          	lb	zero,80(zero) # 50 <crt+0x50>
	li t1, 0
  28:	0100                	c.addi4spn	s0,sp,128
  2a:	1204                	c.addi4spn	s1,sp,288
	li t2, 0
  2c:	0000                	c.unimp
  2e:	0d00                	c.addi4spn	s0,sp,656
	li s1, 0
  30:	00000177          	.4byte	0x177
	li a0, 0
  34:	511d                	c.li	sp,-25
  36:	0000                	c.unimp
	li a1, 0
  38:	0000                	c.unimp
  3a:	0000                	c.unimp
	li a2, 0
  3c:	b400                	.2byte	0xb400
  3e:	0000                	c.unimp
	li a3, 0
  40:	b000                	.2byte	0xb000
  42:	0006                	c.slli	zero,0x1
	li a4, 0
  44:	2800                	.2byte	0x2800
  46:	0001                	c.addi	zero,0
	li a5, 0
  48:	0100                	c.addi4spn	s0,sp,128
  4a:	0601                	c.addi	a2,0
	li a6, 0
  4c:	00dd                	c.addi	ra,23
  4e:	0000                	c.unimp
	li a7, 0
  50:	0101                	c.addi	sp,0
  52:	db08                	c.sw	a0,48(a4)
	li s2, 0
  54:	0000                	c.unimp
  56:	0100                	c.addi4spn	s0,sp,128
	li s3, 0
  58:	0502                	c.slli64	a0
  5a:	0152                	c.slli	sp,0x14
	li s4, 0
  5c:	0000                	c.unimp
  5e:	0201                	c.addi	tp,0 # 0 <crt>
	li s5, 0
  60:	0000ba07          	.4byte	0xba07
	li s6, 0
  64:	0100                	c.addi4spn	s0,sp,128
  66:	0504                	c.addi4spn	s1,sp,640
	li s7, 0
  68:	0126                	c.slli	sp,0x9
  6a:	0000                	c.unimp
	li s8, 0
  6c:	0401                	c.addi	s0,0
  6e:	00010a07          	.4byte	0x10a07
	li s9, 0
  72:	0100                	c.addi4spn	s0,sp,128
	li s10, 0
  74:	0508                	c.addi4spn	a0,sp,640
  76:	0121                	c.addi	sp,8
	li s11, 0
  78:	0000                	c.unimp
  7a:	0801                	c.addi	a6,0
	li t3, 0
  7c:	00010507          	.4byte	0x10507
	li t4, 0
  80:	0e00                	c.addi4spn	s0,sp,784
  82:	0504                	c.addi4spn	s1,sp,640
	li t5, 0
  84:	6e69                	c.lui	t3,0x1a
  86:	0074                	c.addi4spn	a3,sp,12
	li t6, 0
  88:	0401                	c.addi	s0,0
  8a:	00010f07          	.4byte	0x10f07
	j main
  8e:	0900                	c.addi4spn	s0,sp,144
  90:	0064                	c.addi4spn	s1,sp,12
  92:	0000                	c.unimp
  94:	6517d103          	lhu	sp,1617(a5)
  98:	0000                	c.unimp
  9a:	0100                	c.addi4spn	s0,sp,128
  9c:	0410                	c.addi4spn	a2,sp,512
  9e:	0000016b          	.4byte	0x16b
	la sp, _sp
  a2:	0101040f          	.4byte	0x101040f
  a6:	e408                	.2byte	0xe408
	sw a0, -8(sp)
  a8:	0000                	c.unimp
  aa:	1000                	c.addi4spn	s0,sp,32
	nop
  ac:	002d                	c.addi	zero,11
  ae:	0000                	c.unimp
	wfi
  b0:	0099                	c.addi	ra,6
  b2:	0000                	c.unimp
void tj_free(void *mem) {
  b4:	6511                	c.lui	a0,0x4
  b6:	0000                	c.unimp
  b8:	ff00                	.2byte	0xff00
  ba:	1c02003f 01000001 	.8byte	0x10000011c02003f
  c2:	161e                	c.slli	a2,0x27
  c4:	0088                	c.addi4spn	a0,sp,64
  c6:	0000                	c.unimp
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	0305                	c.addi	t1,1 # ffff9001 <_sp+0xfffe9001>
  ca:	0880                	c.addi4spn	s0,sp,80
  cc:	0000                	c.unimp
  ce:	3f02                	.2byte	0x3f02
  d0:	0001                	c.addi	zero,0
  d2:	0100                	c.addi4spn	s0,sp,128
  d4:	0e1f 007f 0000      	.byte	0x1f, 0x0e, 0x7f, 0x00, 0x00, 0x00
  da:	0305                	c.addi	t1,1
  dc:	0860                	c.addi4spn	s0,sp,28
  de:	0000                	c.unimp
  e0:	7e02                	.2byte	0x7e02
  e2:	0000                	c.unimp
  e4:	0100                	c.addi4spn	s0,sp,128
  e6:	1520                	c.addi4spn	s0,sp,680
		exit(1);
  e8:	0065                	c.addi	zero,25
  ea:	0000                	c.unimp
  ec:	0305                	c.addi	t1,1
  ee:	0864                	c.addi4spn	s1,sp,28
  f0:	0000                	c.unimp
  f2:	00005d0b          	.4byte	0x5d0b
	bp = (Header *)mem - 1; //point to block header
  f6:	0800                	c.addi4spn	s0,sp,16
  f8:	2201                	c.jal	1f8 <tj_free+0x144>
  fa:	00f6                	c.slli	ra,0x1d
  fc:	0000                	c.unimp
  fe:	6b05                	c.lui	s6,0x1
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	0000                	c.unimp
 102:	0100                	c.addi4spn	s0,sp,128
 104:	00f61123          	sh	a5,2(a2)
 108:	0000                	c.unimp
 10a:	0500                	c.addi4spn	s0,sp,640
 10c:	0099                	c.addi	ra,6
 10e:	0000                	c.unimp
		if (p >= p->next && (bp > p || bp < p->next))
 110:	2401                	c.jal	310 <tj_malloc+0x20>
 112:	0000650f          	.4byte	0x650f
 116:	0400                	c.addi4spn	s0,sp,512
 118:	0600                	c.addi4spn	s0,sp,768
 11a:	000000cf          	.4byte	0xcf
 11e:	f109                	c.bnez	a0,20 <crt+0x20>
 120:	0001                	c.addi	zero,0
 122:	0100                	c.addi4spn	s0,sp,128
 124:	0325                	c.addi	t1,9
 126:	000000cf          	.4byte	0xcf
 12a:	fa02                	.2byte	0xfa02
 12c:	0000                	c.unimp
 12e:	0100                	c.addi4spn	s0,sp,128
 130:	0f26                	c.slli	t5,0x9
 132:	000000fb          	.4byte	0xfb
 136:	0305                	c.addi	t1,1
 138:	4880                	c.lw	s0,16(s1)
 13a:	0000                	c.unimp
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	7002                	.2byte	0x7002
 13e:	0000                	c.unimp
 140:	0100                	c.addi4spn	s0,sp,128
 142:	012b1027          	.4byte	0x12b1027
 146:	0000                	c.unimp
 148:	0305                	c.addi	t1,1
 14a:	4888                	c.lw	a0,16(s1)
 14c:	0000                	c.unimp
 14e:	fb06                	.2byte	0xfb06
 150:	0000                	c.unimp
 152:	0b00                	c.addi4spn	s0,sp,400
 154:	015c                	c.addi4spn	a5,sp,132
 156:	0000                	c.unimp
 158:	020c                	c.addi4spn	a1,sp,256
 15a:	640d                	c.lui	s0,0x3
 15c:	0001                	c.addi	zero,0
 15e:	0500                	c.addi4spn	s0,sp,640
 160:	009e                	c.slli	ra,0x7
 162:	0000                	c.unimp
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	0e02                	c.slli64	t3
 166:	5e09                	c.li	t3,-30
 168:	0000                	c.unimp
 16a:	0000                	c.unimp
 16c:	d205                	c.beqz	a2,8c <crt+0x8c>
 16e:	0000                	c.unimp
 170:	0200                	c.addi4spn	s0,sp,256
 172:	0911                	c.addi	s2,4 # 1b004 <_sp+0xb004>
 174:	005e                	c.slli	zero,0x17
 176:	0000                	c.unimp
 178:	0504                	c.addi4spn	s1,sp,640
 17a:	0000006b          	.4byte	0x6b
 17e:	1302                	c.slli	t1,0x20
 180:	6412                	.2byte	0x6412
 182:	0001                	c.addi	zero,0
		bp->size += p->next->size;
 184:	0800                	c.addi4spn	s0,sp,16
 186:	0600                	c.addi4spn	s0,sp,768
 188:	0130                	c.addi4spn	a2,sp,136
 18a:	0000                	c.unimp
 18c:	b009                	c.j	fffff98e <_sp+0xfffef98e>
 18e:	0000                	c.unimp
 190:	0200                	c.addi4spn	s0,sp,256
 192:	0315                	c.addi	t1,5
 194:	0130                	c.addi4spn	a2,sp,136
 196:	0000                	c.unimp
 198:	e912                	.2byte	0xe912
 19a:	0000                	c.unimp
 19c:	0400                	c.addi4spn	s0,sp,512
 19e:	0921                	c.addi	s2,8
 1a0:	007f                	.2byte	0x7f
 1a2:	0000                	c.unimp
		bp->next = p->next->next;
 1a4:	0195                	c.addi	gp,5 # 1045 <__global_pointer$+0x5>
 1a6:	0000                	c.unimp
 1a8:	7f08                	.2byte	0x7f08
 1aa:	0000                	c.unimp
 1ac:	0800                	c.addi4spn	s0,sp,16
 1ae:	005e                	c.slli	zero,0x17
 1b0:	0000                	c.unimp
 1b2:	6c08                	.2byte	0x6c08
 1b4:	0000                	c.unimp
 1b6:	0000                	c.unimp
 1b8:	0000a813          	slti	a6,ra,0
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	0500                	c.addi4spn	s0,sp,640
 1be:	065d                	c.addi	a2,23
 1c0:	000001a7          	.4byte	0x1a7
 1c4:	5e08                	c.lw	a0,56(a2)
 1c6:	0000                	c.unimp
 1c8:	0000                	c.unimp
 1ca:	f014                	.2byte	0xf014
	if (p + p->size == bp) { //join to lower nbr
 1cc:	0000                	c.unimp
 1ce:	0200                	c.addi4spn	s0,sp,256
 1d0:	0559                	c.addi	a0,22 # 4016 <__global_pointer$+0x2fd6>
 1d2:	005e                	c.slli	zero,0x17
 1d4:	0000                	c.unimp
 1d6:	06b0                	c.addi4spn	a2,sp,840
 1d8:	0000                	c.unimp
 1da:	00b4                	c.addi4spn	a3,sp,72
 1dc:	0000                	c.unimp
 1de:	9c01                	.2byte	0x9c01
 1e0:	01d0                	c.addi4spn	a2,sp,196
 1e2:	0000                	c.unimp
 1e4:	7004                	.2byte	0x7004
 1e6:	0071                	c.addi	zero,28
		p->size += bp->size;
 1e8:	5d02                	c.lwsp	s10,32(sp)
 1ea:	0001d00b          	.4byte	0x1d00b
 1ee:	0200                	c.addi4spn	s0,sp,256
 1f0:	6c91                	c.lui	s9,0x4
 1f2:	0600                	c.addi4spn	s0,sp,768
 1f4:	0169                	c.addi	sp,26
 1f6:	0000                	c.unimp
 1f8:	4a0c                	c.lw	a1,16(a2)
 1fa:	0001                	c.addi	zero,0
 1fc:	5300                	c.lw	s0,32(a4)
 1fe:	005e                	c.slli	zero,0x17
 200:	0000                	c.unimp
 202:	0680                	c.addi4spn	s0,sp,832
		p->next = bp->next;
 204:	0000                	c.unimp
 206:	0030                	c.addi4spn	a2,sp,8
 208:	0000                	c.unimp
 20a:	9c01                	.2byte	0x9c01
 20c:	01fd                	c.addi	gp,31 # 105f <__global_pointer$+0x1f>
 20e:	0000                	c.unimp
 210:	0000f503          	.4byte	0xf503
 214:	0200                	c.addi4spn	s0,sp,256
 216:	01fd1453          	.4byte	0x1fd1453
		p->next = bp; //again, if the free list is just the base
 21a:	0000                	c.unimp
 21c:	9102                	c.jalr	sp
 21e:	006c                	c.addi4spn	a1,sp,12
 220:	d006                	c.swsp	ra,32(sp)
 222:	0001                	c.addi	zero,0
	freep = p;
 224:	1500                	c.addi4spn	s0,sp,672
 226:	000000a3          	sb	zero,1(zero) # 1 <crt+0x1>
 22a:	3202                	.2byte	0x3202
 22c:	b406                	.2byte	0xb406
 22e:	0005                	c.addi	zero,1
}
 230:	cc00                	c.sw	s0,24(s0)
 232:	0000                	c.unimp
 234:	0100                	c.addi4spn	s0,sp,128
 236:	609c                	.2byte	0x609c
 238:	0002                	c.slli64	zero
 23a:	0300                	c.addi4spn	s0,sp,384
 23c:	00f5                	c.addi	ra,29
 23e:	0000                	c.unimp
 240:	3202                	.2byte	0x3202
 242:	fd12                	.2byte	0xfd12
static Header* getmoremem(unsigned int total_size) {
 244:	0001                	c.addi	zero,0
 246:	0200                	c.addi4spn	s0,sp,256
 248:	5c91                	c.li	s9,-28
 24a:	02006407          	.4byte	0x2006407
 24e:	1c32                	c.slli	s8,0x2c
 250:	005e                	c.slli	zero,0x17
 252:	0000                	c.unimp
 254:	9102                	c.jalr	sp
 256:	0758                	c.addi4spn	a4,sp,900
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 258:	0070                	c.addi4spn	a2,sp,12
 25a:	3202                	.2byte	0x3202
 25c:	00005e23          	.4byte	0x5e23
 260:	0200                	c.addi4spn	s0,sp,256
 262:	5491                	c.li	s1,-28
 264:	ff02                	.2byte	0xff02
 266:	0000                	c.unimp
 268:	0200                	c.addi4spn	s0,sp,256
 26a:	0b34                	c.addi4spn	a3,sp,408
 26c:	01d0                	c.addi4spn	a2,sp,196
 26e:	0000                	c.unimp
	Header* up = (Header *)next_index;
 270:	9102                	c.jalr	sp
 272:	026c                	c.addi4spn	a1,sp,268
 274:	00b5                	c.addi	ra,13
 276:	0000                	c.unimp
 278:	3702                	.2byte	0x3702
 27a:	0001d00b          	.4byte	0x1d00b
	next_index += total_size; //allocate the block
 27e:	0200                	c.addi4spn	s0,sp,256
 280:	6891                	c.lui	a7,0x4
 282:	1600                	c.addi4spn	s0,sp,800
 284:	6f70                	.2byte	0x6f70
 286:	0070                	c.addi4spn	a2,sp,12
 288:	2a02                	.2byte	0x2a02
 28a:	6006                	.2byte	0x6006
 28c:	0005                	c.addi	zero,1
 28e:	5400                	c.lw	s0,40(s0)
 290:	0000                	c.unimp
 292:	0100                	c.addi4spn	s0,sp,128
	avail_mem -= total_size; //deduct from avail mem;
 294:	959c                	.2byte	0x959c
 296:	0002                	c.slli64	zero
 298:	0300                	c.addi4spn	s0,sp,384
 29a:	00f5                	c.addi	ra,29
 29c:	0000                	c.unimp
 29e:	2a02                	.2byte	0x2a02
 2a0:	fd11                	c.bnez	a0,1bc <tj_free+0x108>
 2a2:	0001                	c.addi	zero,0
 2a4:	0200                	c.addi4spn	s0,sp,256
 2a6:	5c91                	c.li	s9,-28
 2a8:	b502                	.2byte	0xb502
 2aa:	0000                	c.unimp
	up->size = total_size - sizeof(Header); //set the size right
 2ac:	0200                	c.addi4spn	s0,sp,256
 2ae:	0b2c                	c.addi4spn	a1,sp,408
 2b0:	01d0                	c.addi4spn	a2,sp,196
 2b2:	0000                	c.unimp
 2b4:	9102                	c.jalr	sp
 2b6:	006c                	c.addi4spn	a1,sp,12
 2b8:	cd0c                	c.sw	a1,24(a0)
 2ba:	0000                	c.unimp
	tj_free((void *)(++up)); //append the new block to the free list first
 2bc:	2300                	.2byte	0x2300
 2be:	005e                	c.slli	zero,0x17
 2c0:	0000                	c.unimp
 2c2:	0534                	c.addi4spn	a3,sp,648
 2c4:	0000                	c.unimp
 2c6:	002c                	c.addi4spn	a1,sp,8
 2c8:	0000                	c.unimp
 2ca:	9c01                	.2byte	0x9c01
 2cc:	02bd                	c.addi	t0,15 # 801 <memset+0x9d>
 2ce:	0000                	c.unimp
 2d0:	0000f503          	.4byte	0xf503
	return freep;
 2d4:	0200                	c.addi4spn	s0,sp,256
 2d6:	01fd1123          	sh	t6,2(s10)
 2da:	0000                	c.unimp
}
 2dc:	9102                	c.jalr	sp
 2de:	006c                	c.addi4spn	a1,sp,12
 2e0:	ad0a                	.2byte	0xad0a
 2e2:	0000                	c.unimp
 2e4:	0200                	c.addi4spn	s0,sp,256
 2e6:	d018                	c.sw	a4,32(s0)
 2e8:	0001                	c.addi	zero,0
 2ea:	d400                	c.sw	s0,40(s0)
 2ec:	0004                	.2byte	0x4
 2ee:	6000                	.2byte	0x6000
void *tj_malloc(unsigned int size) {
 2f0:	0000                	c.unimp
 2f2:	0100                	c.addi4spn	s0,sp,128
 2f4:	009c                	c.addi4spn	a5,sp,64
 2f6:	07000003          	lb	zero,112(zero) # 70 <crt+0x70>
 2fa:	0064                	c.addi4spn	s1,sp,12
 2fc:	1802                	c.slli	a6,0x20
 2fe:	00005e13          	srli	t3,zero,0x0
 302:	0200                	c.addi4spn	s0,sp,256
	if (size > sizeof(heap)) return NULL;
 304:	5c91                	c.li	s9,-28
 306:	02007007          	.4byte	0x2007007
 30a:	1a18                	c.addi4spn	a4,sp,304
 30c:	005e                	c.slli	zero,0x17
 30e:	0000                	c.unimp
 310:	9102                	c.jalr	sp
 312:	0258                	c.addi4spn	a4,sp,260
 314:	00b5                	c.addi	ra,13
 316:	0000                	c.unimp
	if ((size & 3) != 0) {
 318:	1a02                	c.slli	s4,0x20
 31a:	0001d00b          	.4byte	0x1d00b
 31e:	0200                	c.addi4spn	s0,sp,256
 320:	6c91                	c.lui	s9,0x4
 322:	0a00                	c.addi4spn	s0,sp,272
		size = size + 4 - (size & 3);
 324:	0000012f          	.4byte	0x12f
 328:	8401                	c.srai64	s0
 32a:	007f                	.2byte	0x7f
 32c:	0000                	c.unimp
 32e:	0484                	c.addi4spn	s1,sp,576
 330:	0000                	c.unimp
 332:	0050                	c.addi4spn	a2,sp,4
	unsigned int total_size = size + sizeof(Header); //need to include the header size as well
 334:	0000                	c.unimp
 336:	9c01                	.2byte	0x9c01
 338:	0338                	c.addi4spn	a4,sp,392
 33a:	0000                	c.unimp
 33c:	00009903          	lh	s2,0(ra)
	prevp = freep;
 340:	0100                	c.addi4spn	s0,sp,128
 342:	1e84                	c.addi4spn	s1,sp,880
 344:	0065                	c.addi	zero,25
 346:	0000                	c.unimp
 348:	9102                	c.jalr	sp
 34a:	045c                	c.addi4spn	a5,sp,516
	if (prevp == NULL) {
 34c:	656d                	c.lui	a0,0x1b
 34e:	006d                	c.addi	zero,27
 350:	8501                	c.srai64	a0
 352:	7f08                	.2byte	0x7f08
		prevp = &base;
 354:	0000                	c.unimp
 356:	0200                	c.addi4spn	s0,sp,256
 358:	6c91                	c.lui	s9,0x4
 35a:	0a00                	c.addi4spn	s0,sp,272
 35c:	0161                	c.addi	sp,24
 35e:	0000                	c.unimp
		freep = prevp;
 360:	5801                	c.li	a6,-32
 362:	007f                	.2byte	0x7f
 364:	0000                	c.unimp
 366:	02f0                	c.addi4spn	a2,sp,332
 368:	0000                	c.unimp
 36a:	0194                	c.addi4spn	a3,sp,192
		base.next = freep;
 36c:	0000                	c.unimp
 36e:	9c01                	.2byte	0x9c01
 370:	038c                	c.addi4spn	a1,sp,448
 372:	0000                	c.unimp
 374:	00009903          	lh	s2,0(ra)
 378:	0100                	c.addi4spn	s0,sp,128
 37a:	1e58                	c.addi4spn	a4,sp,820
 37c:	0065                	c.addi	zero,25
 37e:	0000                	c.unimp
		base.size = 0;
 380:	9102                	c.jalr	sp
 382:	045c                	c.addi4spn	a5,sp,516
 384:	0070                	c.addi4spn	a2,sp,12
 386:	6201                	.2byte	0x6201
 388:	2b0a                	.2byte	0x2b0a
 38a:	0001                	c.addi	zero,0
	for (p = prevp->next; ;prevp = p, p = p->next) {
 38c:	0200                	c.addi4spn	s0,sp,256
 38e:	6c91                	c.lui	s9,0x4
 390:	3902                	.2byte	0x3902
 392:	0001                	c.addi	zero,0
 394:	0100                	c.addi4spn	s0,sp,128
 396:	0e62                	c.slli	t3,0x18
		if (p->size >= size) { //big enough
 398:	0000012b          	.4byte	0x12b
 39c:	9102                	c.jalr	sp
 39e:	0268                	c.addi4spn	a0,sp,268
 3a0:	00000093          	addi	ra,zero,0
 3a4:	6401                	.2byte	0x6401
 3a6:	0000650f          	.4byte	0x650f
			if (p->size == size) // exact size
 3aa:	0200                	c.addi4spn	s0,sp,256
 3ac:	6491                	c.lui	s1,0x4
 3ae:	1700                	c.addi4spn	s0,sp,928
 3b0:	0088                	c.addi4spn	a0,sp,64
 3b2:	0000                	c.unimp
 3b4:	4e01                	c.li	t3,0
 3b6:	2b10                	.2byte	0x2b10
				prevp->next = p->next; // just return that block
 3b8:	0001                	c.addi	zero,0
 3ba:	4400                	c.lw	s0,8(s0)
 3bc:	0002                	c.slli64	zero
 3be:	ac00                	.2byte	0xac00
 3c0:	0000                	c.unimp
 3c2:	0100                	c.addi4spn	s0,sp,128
 3c4:	c49c                	c.sw	a5,8(s1)
 3c6:	03000003          	lb	zero,48(zero) # 30 <crt+0x30>
 3ca:	00000093          	addi	ra,zero,0
				p->size -= total_size; //break up the block
 3ce:	4e01                	c.li	t3,0
 3d0:	6528                	.2byte	0x6528
 3d2:	0000                	c.unimp
 3d4:	0200                	c.addi4spn	s0,sp,256
 3d6:	5c91                	c.li	s9,-28
 3d8:	7504                	.2byte	0x7504
 3da:	0070                	c.addi4spn	a2,sp,12
 3dc:	5001                	c.li	zero,-32
 3de:	2b0a                	.2byte	0x2b0a
 3e0:	0001                	c.addi	zero,0
 3e2:	0200                	c.addi4spn	s0,sp,256
				p += p->size;
 3e4:	6c91                	c.lui	s9,0x4
 3e6:	1800                	c.addi4spn	s0,sp,48
 3e8:	0076                	c.slli	zero,0x1d
 3ea:	0000                	c.unimp
 3ec:	2a01                	c.jal	4fc <newNode+0x28>
 3ee:	b406                	.2byte	0xb406
 3f0:	0000                	c.unimp
 3f2:	9000                	.2byte	0x9000
 3f4:	0001                	c.addi	zero,0
 3f6:	0100                	c.addi4spn	s0,sp,128
 3f8:	079c                	c.addi4spn	a5,sp,960
 3fa:	656d                	c.lui	a0,0x1b
				p->size = size;
 3fc:	006d                	c.addi	zero,27
 3fe:	2a01                	c.jal	50e <newNode+0x3a>
 400:	7f14                	.2byte	0x7f14
 402:	0000                	c.unimp
 404:	0200                	c.addi4spn	s0,sp,256
 406:	5c91                	c.li	s9,-28
			freep = prevp;
 408:	6204                	.2byte	0x6204
 40a:	0070                	c.addi4spn	a2,sp,12
 40c:	3001                	c.jal	fffffc0c <_sp+0xfffefc0c>
 40e:	2b0a                	.2byte	0x2b0a
 410:	0001                	c.addi	zero,0
 412:	0200                	c.addi4spn	s0,sp,256
			return (void *)(++p);
 414:	6891                	c.lui	a7,0x4
 416:	7004                	.2byte	0x7004
 418:	0100                	c.addi4spn	s0,sp,128
 41a:	0f30                	c.addi4spn	a2,sp,920
 41c:	0000012b          	.4byte	0x12b
 420:	9102                	c.jalr	sp
 422:	006c                	c.addi4spn	a1,sp,12
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
	nop
   0:	1101                	c.addi	sp,-32
   2:	1000                	c.addi4spn	s0,sp,32
	la ra, exit
   4:	03175517          	auipc	a0,0x3175
   8:	1b0e                	c.slli	s6,0x23
   a:	250e                	.2byte	0x250e
	la sp, _sp
   c:	130e                	c.slli	t1,0x23
   e:	0005                	c.addi	zero,1
  10:	0000                	c.unimp
  12:	2401                	c.jal	212 <tj_free+0x15e>
	mv s0, sp
  14:	0b00                	c.addi4spn	s0,sp,400
  16:	030b3e0b          	.4byte	0x30b3e0b
	la gp, __global_pointer$
  1a:	000e                	c.slli	zero,0x3
  1c:	0200                	c.addi4spn	s0,sp,256
  1e:	0034                	c.addi4spn	a3,sp,8
	li tp, 0
  20:	0b3a0e03          	lb	t3,179(s4)
	li t0, 0
  24:	0b390b3b          	.4byte	0xb390b3b
	li t1, 0
  28:	1349                	c.addi	t1,-14
  2a:	1802                	c.slli	a6,0x20
	li t2, 0
  2c:	0000                	c.unimp
  2e:	03000503          	lb	a0,48(zero) # 30 <crt+0x30>
	li s1, 0
  32:	3a0e                	.2byte	0x3a0e
	li a0, 0
  34:	390b3b0b          	.4byte	0x390b3b0b
	li a1, 0
  38:	0213490b          	.4byte	0x213490b
	li a2, 0
  3c:	0018                	.2byte	0x18
  3e:	0400                	c.addi4spn	s0,sp,512
	li a3, 0
  40:	0034                	c.addi4spn	a3,sp,8
  42:	0b3a0803          	lb	a6,179(s4)
	li a4, 0
  46:	0b390b3b          	.4byte	0xb390b3b
	li a5, 0
  4a:	1349                	c.addi	t1,-14
	li a6, 0
  4c:	1802                	c.slli	a6,0x20
  4e:	0000                	c.unimp
	li a7, 0
  50:	0d05                	c.addi	s10,1
  52:	0300                	c.addi4spn	s0,sp,384
	li s2, 0
  54:	3a0e                	.2byte	0x3a0e
  56:	390b3b0b          	.4byte	0x390b3b0b
	li s3, 0
  5a:	3813490b          	.4byte	0x3813490b
	li s4, 0
  5e:	0600000b          	.4byte	0x600000b
	li s5, 0
  62:	210b000f          	.4byte	0x210b000f
	li s6, 0
  66:	4904                	c.lw	s1,16(a0)
	li s7, 0
  68:	07000013          	addi	zero,zero,112
	li s8, 0
  6c:	0005                	c.addi	zero,1
  6e:	0b3a0803          	lb	a6,179(s4)
	li s9, 0
  72:	0b390b3b          	.4byte	0xb390b3b
	li s10, 0
  76:	1349                	c.addi	t1,-14
	li s11, 0
  78:	1802                	c.slli	a6,0x20
  7a:	0000                	c.unimp
	li t3, 0
  7c:	0508                	c.addi4spn	a0,sp,640
  7e:	4900                	c.lw	s0,16(a0)
	li t4, 0
  80:	09000013          	addi	zero,zero,144
	li t5, 0
  84:	0016                	c.slli	zero,0x5
  86:	0b3a0e03          	lb	t3,179(s4)
	li t6, 0
  8a:	0b390b3b          	.4byte	0xb390b3b
	j main
  8e:	1349                	c.addi	t1,-14
  90:	0000                	c.unimp
  92:	2e0a                	.2byte	0x2e0a
  94:	3f01                	c.jal	ffffffa4 <_sp+0xfffeffa4>
  96:	0319                	c.addi	t1,6
  98:	3a0e                	.2byte	0x3a0e
  9a:	390b3b0b          	.4byte	0x390b3b0b
  9e:	0721                	c.addi	a4,8
	la sp, _sp
  a0:	13491927          	.4byte	0x13491927
  a4:	0111                	c.addi	sp,4
  a6:	0612                	c.slli	a2,0x4
	sw a0, -8(sp)
  a8:	1840                	c.addi4spn	s0,sp,52
  aa:	197c                	c.addi4spn	a5,sp,188
	nop
  ac:	1301                	c.addi	t1,-32
  ae:	0000                	c.unimp
	wfi
  b0:	0301130b          	.4byte	0x301130b
void tj_free(void *mem) {
  b4:	0b0e                	c.slli	s6,0x3
  b6:	3b0b3a0b          	.4byte	0x3b0b3a0b
  ba:	1021390b          	.4byte	0x1021390b
  be:	1301                	c.addi	t1,-32
  c0:	0000                	c.unimp
  c2:	2e0c                	.2byte	0x2e0c
  c4:	3f01                	c.jal	ffffffd4 <_sp+0xfffeffd4>
  c6:	0319                	c.addi	t1,6
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	3a0e                	.2byte	0x3a0e
  ca:	0221                	c.addi	tp,8 # 8 <crt+0x8>
  cc:	21390b3b          	.4byte	0x21390b3b
  d0:	2705                	c.jal	7f0 <memset+0x8c>
  d2:	4919                	c.li	s2,6
  d4:	12011113          	.4byte	0x12011113
  d8:	4006                	.2byte	0x4006
  da:	7a18                	.2byte	0x7a18
  dc:	0119                	c.addi	sp,6
  de:	0d000013          	addi	zero,zero,208
  e2:	0111                	c.addi	sp,4
  e4:	0e25                	c.addi	t3,9 # 1a009 <_sp+0xa009>
  e6:	1f030b13          	addi	s6,t1,496
		exit(1);
  ea:	01111f1b          	.4byte	0x1111f1b
  ee:	0612                	c.slli	a2,0x4
  f0:	1710                	c.addi4spn	a2,sp,928
  f2:	0000                	c.unimp
	bp = (Header *)mem - 1; //point to block header
  f4:	240e                	.2byte	0x240e
  f6:	0b00                	c.addi4spn	s0,sp,400
  f8:	030b3e0b          	.4byte	0x30b3e0b
  fc:	0008                	.2byte	0x8
  fe:	0f00                	c.addi4spn	s0,sp,912
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	0b0b000f          	.4byte	0xb0b000f
 104:	0000                	c.unimp
 106:	0110                	c.addi4spn	a2,sp,128
 108:	4901                	c.li	s2,0
 10a:	00130113          	addi	sp,t1,1
 10e:	1100                	c.addi4spn	s0,sp,160
		if (p >= p->next && (bp > p || bp < p->next))
 110:	0021                	c.addi	zero,8
 112:	1349                	c.addi	t1,-14
 114:	0000052f          	.4byte	0x52f
 118:	2e12                	.2byte	0x2e12
 11a:	3f01                	c.jal	2a <crt+0x2a>
 11c:	0319                	c.addi	t1,6
 11e:	3a0e                	.2byte	0x3a0e
 120:	390b3b0b          	.4byte	0x390b3b0b
 124:	4919270b          	.4byte	0x4919270b
 128:	01193c13          	sltiu	s8,s2,17
 12c:	13000013          	addi	zero,zero,304
 130:	012e                	c.slli	sp,0xb
 132:	0e03193f 0b3b0b3a 	.8byte	0xb3b0b3a0e03193f
 13a:	0b39                	c.addi	s6,14 # 100e <heap+0x78e>
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	01871927          	.4byte	0x1871927
 140:	3c19                	c.jal	fffffb56 <_sp+0xfffefb56>
 142:	0119                	c.addi	sp,6
 144:	14000013          	addi	zero,zero,320
 148:	012e                	c.slli	sp,0xb
 14a:	0e03193f 0b3b0b3a 	.8byte	0xb3b0b3a0e03193f
 152:	0b39                	c.addi	s6,14
 154:	1349                	c.addi	t1,-14
 156:	0111                	c.addi	sp,4
 158:	0612                	c.slli	a2,0x4
 15a:	1840                	c.addi4spn	s0,sp,52
 15c:	197c                	c.addi4spn	a5,sp,188
 15e:	1301                	c.addi	t1,-32
 160:	0000                	c.unimp
 162:	2e15                	c.jal	496 <tj_calloc+0x12>
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	3f01                	c.jal	74 <crt+0x74>
 166:	0319                	c.addi	t1,6
 168:	3a0e                	.2byte	0x3a0e
 16a:	390b3b0b          	.4byte	0x390b3b0b
 16e:	1119270b          	.4byte	0x1119270b
 172:	1201                	c.addi	tp,-32 # ffffffe0 <_sp+0xfffeffe0>
 174:	4006                	.2byte	0x4006
 176:	7c18                	.2byte	0x7c18
 178:	0119                	c.addi	sp,6
 17a:	16000013          	addi	zero,zero,352
 17e:	012e                	c.slli	sp,0xb
 180:	0803193f 0b3b0b3a 	.8byte	0xb3b0b3a0803193f
		bp->size += p->next->size;
 188:	0b39                	c.addi	s6,14
 18a:	01111927          	.4byte	0x1111927
 18e:	0612                	c.slli	a2,0x4
 190:	1840                	c.addi4spn	s0,sp,52
 192:	197c                	c.addi4spn	a5,sp,188
 194:	1301                	c.addi	t1,-32
 196:	0000                	c.unimp
 198:	03012e17          	auipc	t3,0x3012
 19c:	3a0e                	.2byte	0x3a0e
 19e:	390b3b0b          	.4byte	0x390b3b0b
 1a2:	4919270b          	.4byte	0x4919270b
		bp->next = p->next->next;
 1a6:	12011113          	.4byte	0x12011113
 1aa:	4006                	.2byte	0x4006
 1ac:	7c18                	.2byte	0x7c18
 1ae:	0119                	c.addi	sp,6
 1b0:	18000013          	addi	zero,zero,384
 1b4:	012e                	c.slli	sp,0xb
 1b6:	0e03193f 0b3b0b3a 	.8byte	0xb3b0b3a0e03193f
		bp->next = p->next; //insert bp after p in the linked list
 1be:	0b39                	c.addi	s6,14
 1c0:	01111927          	.4byte	0x1111927
 1c4:	0612                	c.slli	a2,0x4
 1c6:	1840                	c.addi4spn	s0,sp,52
 1c8:	197c                	c.addi4spn	a5,sp,188
 1ca:	0000                	c.unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
	nop
   0:	0024                	c.addi4spn	s1,sp,8
   2:	0000                	c.unimp
	la ra, exit
   4:	0002                	c.slli64	zero
   6:	0000                	c.unimp
   8:	0000                	c.unimp
   a:	0004                	.2byte	0x4
	...
	mv s0, sp
  14:	0090                	c.addi4spn	a2,sp,64
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	00a0                	c.addi4spn	s0,sp,72
  1a:	0000                	c.unimp
  1c:	0014                	.2byte	0x14
	...
	li t0, 0
  26:	0000                	c.unimp
	li t1, 0
  28:	001c                	.2byte	0x1c
  2a:	0000                	c.unimp
	li t2, 0
  2c:	0002                	c.slli64	zero
  2e:	00000023          	sb	zero,0(zero) # 0 <crt>
	li s1, 0
  32:	0004                	.2byte	0x4
	li a0, 0
  34:	0000                	c.unimp
  36:	0000                	c.unimp
	li a1, 0
  38:	00b4                	c.addi4spn	a3,sp,72
  3a:	0000                	c.unimp
	li a2, 0
  3c:	06b0                	c.addi4spn	a2,sp,840
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
	nop
   0:	2e747263          	bgeu	s0,t2,2e4 <getmoremem+0xa0>
	la ra, exit
   4:	682f0073          	.4byte	0x682f0073
   8:	2f656d6f          	jal	s10,562fe <_sp+0x462fe>
	la sp, _sp
   c:	7961                	c.lui	s2,0xffff8
   e:	742d616b          	.4byte	0x742d616b
  12:	757a7573          	csrrci	a0,0x757,20
	mv s0, sp
  16:	442f696b          	.4byte	0x442f696b
	la gp, __global_pointer$
  1a:	6d75636f          	jal	t1,56ef0 <_sp+0x46ef0>
  1e:	6e65                	c.lui	t3,0x19
	li tp, 0
  20:	7374                	.2byte	0x7374
  22:	6f72702f          	.4byte	0x6f72702f
	li t0, 0
  26:	656a                	.2byte	0x656a
	li t1, 0
  28:	762d7463          	bgeu	s10,sp,790 <memset+0x2c>
	li t2, 0
  2c:	6f2d                	c.lui	t5,0xb
  2e:	6570                	.2byte	0x6570
	li s1, 0
  30:	2d6e                	.2byte	0x2d6e
  32:	6562                	.2byte	0x6562
	li a0, 0
  34:	6174                	.2byte	0x6174
  36:	462d                	c.li	a2,11
	li a1, 0
  38:	452d726f          	jal	tp,d748a <_sp+0xc748a>
	li a2, 0
  3c:	37344543          	.4byte	0x37344543
	li a3, 0
  40:	3030                	.2byte	0x3030
  42:	2f4a                	.2byte	0x2f4a
	li a4, 0
  44:	6974706f          	jal	zero,47eda <_sp+0x37eda>
	li a5, 0
  48:	696d                	c.lui	s2,0x1b
  4a:	617a                	.2byte	0x617a
	li a6, 0
  4c:	6974                	.2byte	0x6974
  4e:	47006e6f          	jal	t3,64be <_ebss+0x1c32>
	li a7, 0
  52:	554e                	c.lwsp	a0,240(sp)
	li s2, 0
  54:	4120                	c.lw	s0,64(a0)
  56:	2e322053          	.4byte	0x2e322053
	li s3, 0
  5a:	68003833          	.4byte	0x68003833
	li s4, 0
  5e:	6165                	c.addi16sp	sp,112
	li s5, 0
  60:	6564                	.2byte	0x6564
  62:	0072                	c.slli	zero,0x1c
	li s6, 0
  64:	657a6973          	csrrsi	s2,0x657,20
	li s7, 0
  68:	745f 6e00 7865      	.byte	0x5f, 0x74, 0x00, 0x6e, 0x65, 0x78
	li s8, 0
  6e:	0074                	c.addi4spn	a3,sp,12
	li s9, 0
  70:	7266                	.2byte	0x7266
  72:	6565                	c.lui	a0,0x19
	li s10, 0
  74:	0070                	c.addi4spn	a2,sp,12
  76:	6a74                	.2byte	0x6a74
	li s11, 0
  78:	665f 6572 0065      	.byte	0x5f, 0x66, 0x72, 0x65, 0x65, 0x00
	li t3, 0
  7e:	7661                	c.lui	a2,0xffff8
	li t4, 0
  80:	6961                	c.lui	s2,0x18
  82:	5f6c                	c.lw	a1,124(a4)
	li t5, 0
  84:	656d                	c.lui	a0,0x1b
  86:	006d                	c.addi	zero,27
	li t6, 0
  88:	6d746567          	.4byte	0x6d746567
	j main
  8c:	6d65726f          	jal	tp,57762 <_sp+0x47762>
  90:	6d65                	c.lui	s10,0x19
  92:	7400                	.2byte	0x7400
  94:	6c61746f          	jal	s0,1775a <_sp+0x775a>
  98:	735f 7a69 0065      	.byte	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x00
  9e:	6164                	.2byte	0x6164
	la sp, _sp
  a0:	6174                	.2byte	0x6174
  a2:	7000                	.2byte	0x7000
  a4:	7375                	c.lui	t1,0xffffd
  a6:	0068                	c.addi4spn	a0,sp,12
	sw a0, -8(sp)
  a8:	7865                	c.lui	a6,0xffff9
  aa:	7469                	c.lui	s0,0xffffa
	nop
  ac:	6e00                	.2byte	0x6e00
  ae:	7765                	c.lui	a4,0xffff9
	wfi
  b0:	6f4e                	.2byte	0x6f4e
  b2:	6564                	.2byte	0x6564
void tj_free(void *mem) {
  b4:	7400                	.2byte	0x7400
  b6:	6d65                	c.lui	s10,0x19
  b8:	0070                	c.addi4spn	a2,sp,12
  ba:	726f6873          	csrrsi	a6,0x726,30
  be:	2074                	.2byte	0x2074
  c0:	6e75                	c.lui	t3,0x1d
  c2:	6e676973          	csrrsi	s2,0x6e6,14
  c6:	6465                	c.lui	s0,0x19
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	6920                	.2byte	0x6920
  ca:	746e                	.2byte	0x746e
  cc:	7000                	.2byte	0x7000
  ce:	6565                	c.lui	a0,0x19
  d0:	7270006b          	.4byte	0x7270006b
  d4:	6f69                	c.lui	t5,0x1a
  d6:	6972                	.2byte	0x6972
  d8:	7974                	.2byte	0x7974
  da:	7500                	.2byte	0x7500
  dc:	736e                	.2byte	0x736e
  de:	6769                	c.lui	a4,0x1a
  e0:	656e                	.2byte	0x656e
  e2:	2064                	.2byte	0x2064
  e4:	72616863          	bltu	sp,t1,814 <memset+0xb0>
		exit(1);
  e8:	6d00                	.2byte	0x6d00
  ea:	6d65                	c.lui	s10,0x19
  ec:	00746573          	csrrsi	a0,0x7,8
  f0:	616d                	c.addi16sp	sp,240
  f2:	6e69                	c.lui	t3,0x1a
	bp = (Header *)mem - 1; //point to block header
  f4:	6800                	.2byte	0x6800
  f6:	6165                	c.addi16sp	sp,112
  f8:	0064                	c.addi4spn	s1,sp,12
  fa:	6162                	.2byte	0x6162
  fc:	73006573          	csrrsi	a0,0x730,0
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	6174                	.2byte	0x6174
 102:	7472                	.2byte	0x7472
 104:	6c00                	.2byte	0x6c00
 106:	20676e6f          	jal	t3,7630c <_sp+0x6630c>
 10a:	6f6c                	.2byte	0x6f6c
 10c:	676e                	.2byte	0x676e
 10e:	7520                	.2byte	0x7520
		if (p >= p->next && (bp > p || bp < p->next))
 110:	736e                	.2byte	0x736e
 112:	6769                	c.lui	a4,0x1a
 114:	656e                	.2byte	0x656e
 116:	2064                	.2byte	0x2064
 118:	6e69                	c.lui	t3,0x1a
 11a:	0074                	c.addi4spn	a3,sp,12
 11c:	6568                	.2byte	0x6568
 11e:	7061                	c.lui	zero,0xffff8
 120:	6c00                	.2byte	0x6c00
 122:	20676e6f          	jal	t3,76328 <_sp+0x66328>
 126:	6f6c                	.2byte	0x6f6c
 128:	676e                	.2byte	0x676e
 12a:	6920                	.2byte	0x6920
 12c:	746e                	.2byte	0x746e
 12e:	7400                	.2byte	0x7400
 130:	5f6a                	c.lwsp	t5,184(sp)
 132:	6c6c6163          	bltu	s8,t1,7f4 <memset+0x90>
 136:	7000636f          	jal	t1,6836 <_ebss+0x1faa>
 13a:	6572                	.2byte	0x6572
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	7076                	.2byte	0x7076
 13e:	6e00                	.2byte	0x6e00
 140:	7865                	c.lui	a6,0xffff9
 142:	5f74                	c.lw	a3,124(a4)
 144:	6e69                	c.lui	t3,0x1a
 146:	6564                	.2byte	0x6564
 148:	0078                	c.addi4spn	a4,sp,12
 14a:	7369                	c.lui	t1,0xffffa
 14c:	6d45                	c.lui	s10,0x11
 14e:	7470                	.2byte	0x7470
 150:	0079                	c.addi	zero,30
 152:	726f6873          	csrrsi	a6,0x726,30
 156:	2074                	.2byte	0x2074
 158:	6e69                	c.lui	t3,0x1a
 15a:	0074                	c.addi4spn	a3,sp,12
 15c:	6f6e                	.2byte	0x6f6e
 15e:	6564                	.2byte	0x6564
 160:	7400                	.2byte	0x7400
 162:	5f6a                	c.lwsp	t5,184(sp)
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	616d                	c.addi16sp	sp,240
 166:	6c6c                	.2byte	0x6c6c
 168:	6c00636f          	jal	t1,6828 <_ebss+0x1f9c>
 16c:	20676e6f          	jal	t3,76372 <_sp+0x66372>
 170:	6f64                	.2byte	0x6f64
 172:	6275                	c.lui	tp,0x1d
 174:	656c                	.2byte	0x656c
 176:	4700                	c.lw	s0,8(a4)
 178:	554e                	c.lwsp	a0,240(sp)
 17a:	4320                	c.lw	s0,64(a4)
 17c:	3131                	c.jal	fffffd88 <_sp+0xfffefd88>
 17e:	3120                	.2byte	0x3120
 180:	2e31                	c.jal	49c <tj_calloc+0x18>
 182:	2e31                	c.jal	49e <tj_calloc+0x1a>
		bp->size += p->next->size;
 184:	2030                	.2byte	0x2030
 186:	6d2d                	c.lui	s10,0xb
 188:	6f6e                	.2byte	0x6f6e
 18a:	722d                	c.lui	tp,0xfffeb
 18c:	6c65                	c.lui	s8,0x19
 18e:	7861                	c.lui	a6,0xffff8
 190:	2d20                	.2byte	0x2d20
 192:	616d                	c.addi16sp	sp,240
 194:	6372                	.2byte	0x6372
 196:	3d68                	.2byte	0x3d68
 198:	7672                	.2byte	0x7672
 19a:	6d693233          	.4byte	0x6d693233
 19e:	2d20                	.2byte	0x2d20
 1a0:	616d                	c.addi16sp	sp,240
 1a2:	6962                	.2byte	0x6962
		bp->next = p->next->next;
 1a4:	693d                	c.lui	s2,0xf
 1a6:	706c                	.2byte	0x706c
 1a8:	2d203233          	.4byte	0x2d203233
 1ac:	736d                	c.lui	t1,0xffffb
 1ae:	7274                	.2byte	0x7274
 1b0:	6369                	c.lui	t1,0x1a
 1b2:	2d74                	.2byte	0x2d74
 1b4:	6c61                	c.lui	s8,0x18
 1b6:	6769                	c.lui	a4,0x1a
 1b8:	206e                	.2byte	0x206e
 1ba:	6d2d                	c.lui	s10,0xb
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	6f6e                	.2byte	0x6f6e
 1be:	642d                	c.lui	s0,0xb
 1c0:	7669                	c.lui	a2,0xffffa
 1c2:	2d20                	.2byte	0x2d20
 1c4:	746d                	c.lui	s0,0xffffb
 1c6:	6e75                	c.lui	t3,0x1d
 1c8:	3d65                	c.jal	80 <crt+0x80>
 1ca:	6f72                	.2byte	0x6f72
	if (p + p->size == bp) { //join to lower nbr
 1cc:	74656b63          	bltu	a0,t1,922 <heap+0xa2>
 1d0:	2d20                	.2byte	0x2d20
 1d2:	616d                	c.addi16sp	sp,240
 1d4:	6372                	.2byte	0x6372
 1d6:	3d68                	.2byte	0x3d68
 1d8:	7672                	.2byte	0x7672
 1da:	6d693233          	.4byte	0x6d693233
 1de:	2d20                	.2byte	0x2d20
 1e0:	4f2d2067          	.4byte	0x4f2d2067
 1e4:	2030                	.2byte	0x2030
 1e6:	732d                	c.lui	t1,0xfffeb
		p->size += bp->size;
 1e8:	6474                	.2byte	0x6474
 1ea:	673d                	c.lui	a4,0xf
 1ec:	756e                	.2byte	0x756e
 1ee:	3131                	c.jal	fffffdfa <_sp+0xfffefdfa>
 1f0:	4800                	c.lw	s0,16(s0)
 1f2:	6165                	c.addi16sp	sp,112
 1f4:	6564                	.2byte	0x6564
 1f6:	0072                	c.slli	zero,0x1c

Disassembly of section .debug_rnglists:

00000000 <.debug_rnglists>:
	nop
   0:	0016                	c.slli	zero,0x5
   2:	0000                	c.unimp
	la ra, exit
   4:	0005                	c.addi	zero,1
   6:	0004                	.2byte	0x4
   8:	0000                	c.unimp
   a:	0000                	c.unimp
	la sp, _sp
   c:	00000007          	.4byte	0x7
  10:	9c00                	.2byte	0x9c00
  12:	0701                	c.addi	a4,0 # f000 <_ebss+0xa774>
	mv s0, sp
  14:	00a0                	c.addi4spn	s0,sp,72
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	0020                	c.addi4spn	s0,sp,8

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
	nop
   0:	000c                	.2byte	0xc
   2:	0000                	c.unimp
	la ra, exit
   4:	ffff                	.2byte	0xffff
   6:	ffff                	.2byte	0xffff
   8:	7c010003          	lb	zero,1984(sp)
	la sp, _sp
   c:	0d01                	c.addi	s10,0 # b000 <_ebss+0x6774>
   e:	0002                	c.slli64	zero
  10:	0024                	c.addi4spn	s1,sp,8
  12:	0000                	c.unimp
	mv s0, sp
  14:	0000                	c.unimp
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	00b4                	c.addi4spn	a3,sp,72
  1a:	0000                	c.unimp
  1c:	0190                	c.addi4spn	a2,sp,192
  1e:	0000                	c.unimp
	li tp, 0
  20:	0e44                	c.addi4spn	s1,sp,788
  22:	4830                	c.lw	a2,80(s0)
	li t0, 0
  24:	0181                	c.addi	gp,0 # 1040 <__global_pointer$>
  26:	0288                	c.addi4spn	a0,sp,320
	li t1, 0
  28:	0c44                	c.addi4spn	s1,sp,532
  2a:	0008                	.2byte	0x8
	li t2, 0
  2c:	c1017403          	.4byte	0xc1017403
	li s1, 0
  30:	c844                	c.sw	s1,20(s0)
  32:	020c                	c.addi4spn	a1,sp,256
	li a0, 0
  34:	4430                	c.lw	a2,72(s0)
  36:	000e                	c.slli	zero,0x3
	li a1, 0
  38:	0024                	c.addi4spn	s1,sp,8
  3a:	0000                	c.unimp
	li a2, 0
  3c:	0000                	c.unimp
  3e:	0000                	c.unimp
	li a3, 0
  40:	0244                	c.addi4spn	s1,sp,260
  42:	0000                	c.unimp
	li a4, 0
  44:	00ac                	c.addi4spn	a1,sp,72
  46:	0000                	c.unimp
	li a5, 0
  48:	0e44                	c.addi4spn	s1,sp,788
  4a:	4830                	c.lw	a2,80(s0)
	li a6, 0
  4c:	0181                	c.addi	gp,0 # 1040 <__global_pointer$>
  4e:	0288                	c.addi4spn	a0,sp,320
	li a7, 0
  50:	0c44                	c.addi4spn	s1,sp,532
  52:	0008                	.2byte	0x8
	li s2, 0
  54:	9002                	c.ebreak
  56:	44c1                	c.li	s1,16
	li s3, 0
  58:	0cc8                	c.addi4spn	a0,sp,596
  5a:	3002                	.2byte	0x3002
	li s4, 0
  5c:	0e44                	c.addi4spn	s1,sp,788
  5e:	0000                	c.unimp
	li s5, 0
  60:	0024                	c.addi4spn	s1,sp,8
  62:	0000                	c.unimp
	li s6, 0
  64:	0000                	c.unimp
  66:	0000                	c.unimp
	li s7, 0
  68:	02f0                	c.addi4spn	a2,sp,332
  6a:	0000                	c.unimp
	li s8, 0
  6c:	0194                	c.addi4spn	a3,sp,192
  6e:	0000                	c.unimp
	li s9, 0
  70:	0e44                	c.addi4spn	s1,sp,788
  72:	4830                	c.lw	a2,80(s0)
	li s10, 0
  74:	0181                	c.addi	gp,0 # 1040 <__global_pointer$>
  76:	0288                	c.addi4spn	a0,sp,320
	li s11, 0
  78:	0c44                	c.addi4spn	s1,sp,532
  7a:	0008                	.2byte	0x8
	li t3, 0
  7c:	c1017803          	.4byte	0xc1017803
	li t4, 0
  80:	c844                	c.sw	s1,20(s0)
  82:	020c                	c.addi4spn	a1,sp,256
	li t5, 0
  84:	4430                	c.lw	a2,72(s0)
  86:	000e                	c.slli	zero,0x3
	li t6, 0
  88:	0024                	c.addi4spn	s1,sp,8
  8a:	0000                	c.unimp
	j main
  8c:	0000                	c.unimp
  8e:	0000                	c.unimp
  90:	0484                	c.addi4spn	s1,sp,576
  92:	0000                	c.unimp
  94:	0050                	c.addi4spn	a2,sp,4
  96:	0000                	c.unimp
  98:	0e44                	c.addi4spn	s1,sp,788
  9a:	4830                	c.lw	a2,80(s0)
  9c:	0181                	c.addi	gp,0 # 1040 <__global_pointer$>
  9e:	0288                	c.addi4spn	a0,sp,320
	la sp, _sp
  a0:	0c44                	c.addi4spn	s1,sp,532
  a2:	0008                	.2byte	0x8
  a4:	c174                	c.sw	a3,68(a0)
  a6:	c844                	c.sw	s1,20(s0)
	sw a0, -8(sp)
  a8:	020c                	c.addi4spn	a1,sp,256
  aa:	4430                	c.lw	a2,72(s0)
	nop
  ac:	000e                	c.slli	zero,0x3
  ae:	0000                	c.unimp
	wfi
  b0:	0024                	c.addi4spn	s1,sp,8
  b2:	0000                	c.unimp
void tj_free(void *mem) {
  b4:	0000                	c.unimp
  b6:	0000                	c.unimp
  b8:	04d4                	c.addi4spn	a3,sp,580
  ba:	0000                	c.unimp
  bc:	0060                	c.addi4spn	s0,sp,12
  be:	0000                	c.unimp
  c0:	0e44                	c.addi4spn	s1,sp,788
  c2:	4830                	c.lw	a2,80(s0)
  c4:	0181                	c.addi	gp,0 # 1040 <__global_pointer$>
  c6:	0288                	c.addi4spn	a0,sp,320
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	0c44                	c.addi4spn	s1,sp,532
  ca:	0008                	.2byte	0x8
  cc:	4402                	c.lwsp	s0,0(sp)
  ce:	44c1                	c.li	s1,16
  d0:	0cc8                	c.addi4spn	a0,sp,596
  d2:	3002                	.2byte	0x3002
  d4:	0e44                	c.addi4spn	s1,sp,788
  d6:	0000                	c.unimp
  d8:	0020                	c.addi4spn	s0,sp,8
  da:	0000                	c.unimp
  dc:	0000                	c.unimp
  de:	0000                	c.unimp
  e0:	0534                	c.addi4spn	a3,sp,648
  e2:	0000                	c.unimp
  e4:	002c                	c.addi4spn	a1,sp,8
  e6:	0000                	c.unimp
		exit(1);
  e8:	0e44                	c.addi4spn	s1,sp,788
  ea:	4420                	c.lw	s0,72(s0)
  ec:	0188                	c.addi4spn	a0,sp,192
  ee:	0c44                	c.addi4spn	s1,sp,532
  f0:	0008                	.2byte	0x8
  f2:	c858                	c.sw	a4,20(s0)
	bp = (Header *)mem - 1; //point to block header
  f4:	020c                	c.addi4spn	a1,sp,256
  f6:	4420                	c.lw	s0,72(s0)
  f8:	000e                	c.slli	zero,0x3
  fa:	0000                	c.unimp
  fc:	0024                	c.addi4spn	s1,sp,8
  fe:	0000                	c.unimp
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	0000                	c.unimp
 102:	0000                	c.unimp
 104:	0560                	c.addi4spn	s0,sp,652
 106:	0000                	c.unimp
 108:	0054                	c.addi4spn	a3,sp,4
 10a:	0000                	c.unimp
 10c:	0e44                	c.addi4spn	s1,sp,788
 10e:	4830                	c.lw	a2,80(s0)
		if (p >= p->next && (bp > p || bp < p->next))
 110:	0181                	c.addi	gp,0 # 1040 <__global_pointer$>
 112:	0288                	c.addi4spn	a0,sp,320
 114:	0c44                	c.addi4spn	s1,sp,532
 116:	0008                	.2byte	0x8
 118:	c178                	c.sw	a4,68(a0)
 11a:	c844                	c.sw	s1,20(s0)
 11c:	020c                	c.addi4spn	a1,sp,256
 11e:	4430                	c.lw	a2,72(s0)
 120:	000e                	c.slli	zero,0x3
 122:	0000                	c.unimp
 124:	0024                	c.addi4spn	s1,sp,8
 126:	0000                	c.unimp
 128:	0000                	c.unimp
 12a:	0000                	c.unimp
 12c:	05b4                	c.addi4spn	a3,sp,712
 12e:	0000                	c.unimp
 130:	00cc                	c.addi4spn	a1,sp,68
 132:	0000                	c.unimp
 134:	0e44                	c.addi4spn	s1,sp,788
 136:	4830                	c.lw	a2,80(s0)
 138:	0181                	c.addi	gp,0 # 1040 <__global_pointer$>
 13a:	0288                	c.addi4spn	a0,sp,320
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	0c44                	c.addi4spn	s1,sp,532
 13e:	0008                	.2byte	0x8
 140:	b002                	.2byte	0xb002
 142:	44c1                	c.li	s1,16
 144:	0cc8                	c.addi4spn	a0,sp,596
 146:	3002                	.2byte	0x3002
 148:	0e44                	c.addi4spn	s1,sp,788
 14a:	0000                	c.unimp
 14c:	0020                	c.addi4spn	s0,sp,8
 14e:	0000                	c.unimp
 150:	0000                	c.unimp
 152:	0000                	c.unimp
 154:	0680                	c.addi4spn	s0,sp,832
 156:	0000                	c.unimp
 158:	0030                	c.addi4spn	a2,sp,8
 15a:	0000                	c.unimp
 15c:	0e44                	c.addi4spn	s1,sp,788
 15e:	4420                	c.lw	s0,72(s0)
 160:	0188                	c.addi4spn	a0,sp,192
 162:	0c44                	c.addi4spn	s1,sp,532
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	0008                	.2byte	0x8
 166:	c85c                	c.sw	a5,20(s0)
 168:	020c                	c.addi4spn	a1,sp,256
 16a:	4420                	c.lw	s0,72(s0)
 16c:	000e                	c.slli	zero,0x3
 16e:	0000                	c.unimp
 170:	0024                	c.addi4spn	s1,sp,8
 172:	0000                	c.unimp
 174:	0000                	c.unimp
 176:	0000                	c.unimp
 178:	06b0                	c.addi4spn	a2,sp,840
 17a:	0000                	c.unimp
 17c:	00b4                	c.addi4spn	a3,sp,72
 17e:	0000                	c.unimp
 180:	0e44                	c.addi4spn	s1,sp,788
 182:	4820                	c.lw	s0,80(s0)
		bp->size += p->next->size;
 184:	0181                	c.addi	gp,0 # 1040 <__global_pointer$>
 186:	0288                	c.addi4spn	a0,sp,320
 188:	0c44                	c.addi4spn	s1,sp,532
 18a:	0008                	.2byte	0x8
 18c:	9802                	c.jalr	a6
 18e:	44c1                	c.li	s1,16
 190:	0cc8                	c.addi4spn	a0,sp,596
 192:	2002                	.2byte	0x2002
 194:	0e44                	c.addi4spn	s1,sp,788
	...
