
program.debug_alexnet.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <crt>:

.global crt
.section .text.prologue, "ax"
.align 4
crt:
	nop
       0:	00000013          	addi	x0,x0,0
	la ra, exit
       4:	00000097          	auipc	x1,0x0
       8:	09c08093          	addi	x1,x1,156 # a0 <exit>
	la sp, _sp
       c:	00010117          	auipc	x2,0x10
      10:	ff410113          	addi	x2,x2,-12 # 10000 <_sp>
	mv s0, sp
      14:	00010413          	addi	x8,x2,0
	la gp, __global_pointer$
      18:	00002197          	auipc	x3,0x2
      1c:	fa818193          	addi	x3,x3,-88 # 1fc0 <__global_pointer$>
	li tp, 0
      20:	00000213          	addi	x4,x0,0
	li t0, 0
      24:	00000293          	addi	x5,x0,0
	li t1, 0
      28:	00000313          	addi	x6,x0,0
	li t2, 0
      2c:	00000393          	addi	x7,x0,0
	li s1, 0
      30:	00000493          	addi	x9,x0,0
	li a0, 0
      34:	00000513          	addi	x10,x0,0
	li a1, 0
      38:	00000593          	addi	x11,x0,0
	li a2, 0
      3c:	00000613          	addi	x12,x0,0
	li a3, 0
      40:	00000693          	addi	x13,x0,0
	li a4, 0
      44:	00000713          	addi	x14,x0,0
	li a5, 0
      48:	00000793          	addi	x15,x0,0
	li a6, 0
      4c:	00000813          	addi	x16,x0,0
	li a7, 0
      50:	00000893          	addi	x17,x0,0
	li s2, 0
      54:	00000913          	addi	x18,x0,0
	li s3, 0
      58:	00000993          	addi	x19,x0,0
	li s4, 0
      5c:	00000a13          	addi	x20,x0,0
	li s5, 0
      60:	00000a93          	addi	x21,x0,0
	li s6, 0
      64:	00000b13          	addi	x22,x0,0
	li s7, 0
      68:	00000b93          	addi	x23,x0,0
	li s8, 0
      6c:	00000c13          	addi	x24,x0,0
	li s9, 0
      70:	00000c93          	addi	x25,x0,0
	li s10, 0
      74:	00000d13          	addi	x26,x0,0
	li s11, 0
      78:	00000d93          	addi	x27,x0,0
	li t3, 0
      7c:	00000e13          	addi	x28,x0,0
	li t4, 0
      80:	00000e93          	addi	x29,x0,0
	li t5, 0
      84:	00000f13          	addi	x30,x0,0
	li t6, 0
      88:	00000f93          	addi	x31,x0,0
	j main
      8c:	3f80106f          	jal	x0,1484 <main>
	...

000000a0 <exit>:

.global exit
.section .text
.align 4
exit:
	la sp, _sp
      a0:	00010117          	auipc	x2,0x10
      a4:	f6010113          	addi	x2,x2,-160 # 10000 <_sp>
	sw a0, -8(sp)
      a8:	fea12c23          	sw	x10,-8(x2)
	nop
      ac:	00000013          	addi	x0,x0,0
	wfi
      b0:	10500073          	wfi

000000b4 <tj_free>:
} Header;
static Header base; //empty list to get started
static Header *freep = NULL; //start of the free list


void tj_free(void *mem) {
      b4:	fd010113          	addi	x2,x2,-48
      b8:	02112623          	sw	x1,44(x2)
      bc:	02812423          	sw	x8,40(x2)
      c0:	03010413          	addi	x8,x2,48
      c4:	fca42e23          	sw	x10,-36(x8)
	//sanity check, we don't want to free memory that's not
	//in the heap
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
      c8:	fdc42703          	lw	x14,-36(x8)
      cc:	000027b7          	lui	x15,0x2
      d0:	81878793          	addi	x15,x15,-2024 # 1818 <heap>
      d4:	00f76a63          	bltu	x14,x15,e8 <tj_free+0x34>
      d8:	000067b7          	lui	x15,0x6
      dc:	81878793          	addi	x15,x15,-2024 # 5818 <base>
      e0:	fdc42703          	lw	x14,-36(x8)
      e4:	00e7f863          	bgeu	x15,x14,f4 <tj_free+0x40>
		exit(1);
      e8:	00100513          	addi	x10,x0,1
      ec:	00000097          	auipc	x1,0x0
      f0:	fb4080e7          	jalr	x1,-76(x1) # a0 <exit>

	Header *bp, *p;
	bp = (Header *)mem - 1; //point to block header
      f4:	fdc42783          	lw	x15,-36(x8)
      f8:	ff878793          	addi	x15,x15,-8
      fc:	fef42423          	sw	x15,-24(x8)
	//scan the free list to see where the current block should sit in between
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
     100:	000067b7          	lui	x15,0x6
     104:	8207a783          	lw	x15,-2016(x15) # 5820 <freep>
     108:	fef42623          	sw	x15,-20(x8)
     10c:	03c0006f          	jal	x0,148 <tj_free+0x94>
		// self wrapped free list with only one entry
		//                  or you are just at the very beginning/end
		if (p >= p->next && (bp > p || bp < p->next))
     110:	fec42783          	lw	x15,-20(x8)
     114:	0007a783          	lw	x15,0(x15)
     118:	fec42703          	lw	x14,-20(x8)
     11c:	02f76063          	bltu	x14,x15,13c <tj_free+0x88>
     120:	fe842703          	lw	x14,-24(x8)
     124:	fec42783          	lw	x15,-20(x8)
     128:	02e7ee63          	bltu	x15,x14,164 <tj_free+0xb0>
     12c:	fec42783          	lw	x15,-20(x8)
     130:	0007a783          	lw	x15,0(x15)
     134:	fe842703          	lw	x14,-24(x8)
     138:	02f76663          	bltu	x14,x15,164 <tj_free+0xb0>
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
     13c:	fec42783          	lw	x15,-20(x8)
     140:	0007a783          	lw	x15,0(x15)
     144:	fef42623          	sw	x15,-20(x8)
     148:	fe842703          	lw	x14,-24(x8)
     14c:	fec42783          	lw	x15,-20(x8)
     150:	fce7f0e3          	bgeu	x15,x14,110 <tj_free+0x5c>
     154:	fec42783          	lw	x15,-20(x8)
     158:	0007a783          	lw	x15,0(x15)
     15c:	fe842703          	lw	x14,-24(x8)
     160:	faf778e3          	bgeu	x14,x15,110 <tj_free+0x5c>
			break; //freed block at start of end of the arena
		//we can merge the 2 free blocks if they are adjacent to each other
		//or we just can append a new entry into the free list
	if (bp + bp->size == p->next) { //join to upper nbr
     164:	fe842783          	lw	x15,-24(x8)
     168:	0047a783          	lw	x15,4(x15)
     16c:	00379793          	slli	x15,x15,0x3
     170:	fe842703          	lw	x14,-24(x8)
     174:	00f70733          	add	x14,x14,x15
     178:	fec42783          	lw	x15,-20(x8)
     17c:	0007a783          	lw	x15,0(x15)
     180:	02f71e63          	bne	x14,x15,1bc <tj_free+0x108>
		//merge if exactly adjacent
		bp->size += p->next->size;
     184:	fe842783          	lw	x15,-24(x8)
     188:	0047a703          	lw	x14,4(x15)
     18c:	fec42783          	lw	x15,-20(x8)
     190:	0007a783          	lw	x15,0(x15)
     194:	0047a783          	lw	x15,4(x15)
     198:	00f70733          	add	x14,x14,x15
     19c:	fe842783          	lw	x15,-24(x8)
     1a0:	00e7a223          	sw	x14,4(x15)
		bp->next = p->next->next;
     1a4:	fec42783          	lw	x15,-20(x8)
     1a8:	0007a783          	lw	x15,0(x15)
     1ac:	0007a703          	lw	x14,0(x15)
     1b0:	fe842783          	lw	x15,-24(x8)
     1b4:	00e7a023          	sw	x14,0(x15)
     1b8:	0140006f          	jal	x0,1cc <tj_free+0x118>
	} else
		bp->next = p->next; //insert bp after p in the linked list
     1bc:	fec42783          	lw	x15,-20(x8)
     1c0:	0007a703          	lw	x14,0(x15)
     1c4:	fe842783          	lw	x15,-24(x8)
     1c8:	00e7a023          	sw	x14,0(x15)
		//if p is freep which is base, then this will make the newly
		//allocated block point to base

	if (p + p->size == bp) { //join to lower nbr
     1cc:	fec42783          	lw	x15,-20(x8)
     1d0:	0047a783          	lw	x15,4(x15)
     1d4:	00379793          	slli	x15,x15,0x3
     1d8:	fec42703          	lw	x14,-20(x8)
     1dc:	00f707b3          	add	x15,x14,x15
     1e0:	fe842703          	lw	x14,-24(x8)
     1e4:	02f71a63          	bne	x14,x15,218 <tj_free+0x164>
		//merge if exactly adjacent
		p->size += bp->size;
     1e8:	fec42783          	lw	x15,-20(x8)
     1ec:	0047a703          	lw	x14,4(x15)
     1f0:	fe842783          	lw	x15,-24(x8)
     1f4:	0047a783          	lw	x15,4(x15)
     1f8:	00f70733          	add	x14,x14,x15
     1fc:	fec42783          	lw	x15,-20(x8)
     200:	00e7a223          	sw	x14,4(x15)
		p->next = bp->next;
     204:	fe842783          	lw	x15,-24(x8)
     208:	0007a703          	lw	x14,0(x15)
     20c:	fec42783          	lw	x15,-20(x8)
     210:	00e7a023          	sw	x14,0(x15)
     214:	0100006f          	jal	x0,224 <tj_free+0x170>
	} else //or just append to linked list
		p->next = bp; //again, if the free list is just the base
     218:	fec42783          	lw	x15,-20(x8)
     21c:	fe842703          	lw	x14,-24(x8)
     220:	00e7a023          	sw	x14,0(x15)
		//then effectively we just created a new entry
		//and make it point to the base which has a size of 0
	freep = p;
     224:	000067b7          	lui	x15,0x6
     228:	fec42703          	lw	x14,-20(x8)
     22c:	82e7a023          	sw	x14,-2016(x15) # 5820 <freep>
}
     230:	00000013          	addi	x0,x0,0
     234:	02c12083          	lw	x1,44(x2)
     238:	02812403          	lw	x8,40(x2)
     23c:	03010113          	addi	x2,x2,48
     240:	00008067          	jalr	x0,0(x1)

00000244 <getmoremem>:

static Header* getmoremem(unsigned int total_size) {
     244:	fd010113          	addi	x2,x2,-48
     248:	02112623          	sw	x1,44(x2)
     24c:	02812423          	sw	x8,40(x2)
     250:	03010413          	addi	x8,x2,48
     254:	fca42e23          	sw	x10,-36(x8)
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
     258:	000017b7          	lui	x15,0x1
     25c:	7e47a783          	lw	x15,2020(x15) # 17e4 <avail_mem>
     260:	fdc42703          	lw	x14,-36(x8)
     264:	00e7f663          	bgeu	x15,x14,270 <getmoremem+0x2c>
     268:	00000793          	addi	x15,x0,0
     26c:	0700006f          	jal	x0,2dc <getmoremem+0x98>
	Header* up = (Header *)next_index;
     270:	000017b7          	lui	x15,0x1
     274:	7e07a783          	lw	x15,2016(x15) # 17e0 <next_index>
     278:	fef42623          	sw	x15,-20(x8)
	next_index += total_size; //allocate the block
     27c:	000017b7          	lui	x15,0x1
     280:	7e07a703          	lw	x14,2016(x15) # 17e0 <next_index>
     284:	fdc42783          	lw	x15,-36(x8)
     288:	00f70733          	add	x14,x14,x15
     28c:	000017b7          	lui	x15,0x1
     290:	7ee7a023          	sw	x14,2016(x15) # 17e0 <next_index>
	avail_mem -= total_size; //deduct from avail mem;
     294:	000017b7          	lui	x15,0x1
     298:	7e47a703          	lw	x14,2020(x15) # 17e4 <avail_mem>
     29c:	fdc42783          	lw	x15,-36(x8)
     2a0:	40f70733          	sub	x14,x14,x15
     2a4:	000017b7          	lui	x15,0x1
     2a8:	7ee7a223          	sw	x14,2020(x15) # 17e4 <avail_mem>
	up->size = total_size - sizeof(Header); //set the size right
     2ac:	fdc42783          	lw	x15,-36(x8)
     2b0:	ff878713          	addi	x14,x15,-8
     2b4:	fec42783          	lw	x15,-20(x8)
     2b8:	00e7a223          	sw	x14,4(x15)
	tj_free((void *)(++up)); //append the new block to the free list first
     2bc:	fec42783          	lw	x15,-20(x8)
     2c0:	00878793          	addi	x15,x15,8
     2c4:	fef42623          	sw	x15,-20(x8)
     2c8:	fec42503          	lw	x10,-20(x8)
     2cc:	00000097          	auipc	x1,0x0
     2d0:	de8080e7          	jalr	x1,-536(x1) # b4 <tj_free>
	return freep;
     2d4:	000067b7          	lui	x15,0x6
     2d8:	8207a783          	lw	x15,-2016(x15) # 5820 <freep>
}
     2dc:	00078513          	addi	x10,x15,0
     2e0:	02c12083          	lw	x1,44(x2)
     2e4:	02812403          	lw	x8,40(x2)
     2e8:	03010113          	addi	x2,x2,48
     2ec:	00008067          	jalr	x0,0(x1)

000002f0 <tj_malloc>:

void *tj_malloc(unsigned int size) {
     2f0:	fd010113          	addi	x2,x2,-48
     2f4:	02112623          	sw	x1,44(x2)
     2f8:	02812423          	sw	x8,40(x2)
     2fc:	03010413          	addi	x8,x2,48
     300:	fca42e23          	sw	x10,-36(x8)
	//sanity check, so that you don't blow the memory space
	if (size > sizeof(heap)) return NULL;
     304:	fdc42703          	lw	x14,-36(x8)
     308:	000047b7          	lui	x15,0x4
     30c:	00e7f663          	bgeu	x15,x14,318 <tj_malloc+0x28>
     310:	00000793          	addi	x15,x0,0
     314:	15c0006f          	jal	x0,470 <tj_malloc+0x180>
	//we want strict word alignment just to make things easier
	//and so that we don't have improper alignment issues
	if ((size & 3) != 0) {
     318:	fdc42783          	lw	x15,-36(x8)
     31c:	0037f793          	andi	x15,x15,3
     320:	00078a63          	beq	x15,x0,334 <tj_malloc+0x44>
		size = size + 4 - (size & 3);
     324:	fdc42783          	lw	x15,-36(x8)
     328:	ffc7f793          	andi	x15,x15,-4
     32c:	00478793          	addi	x15,x15,4 # 4004 <__global_pointer$+0x2044>
     330:	fcf42e23          	sw	x15,-36(x8)
	}

	//we want to build a linked list of the existing blocks and free blocks
	Header *p, *prevp; //iterators
	
	unsigned int total_size = size + sizeof(Header); //need to include the header size as well
     334:	fdc42783          	lw	x15,-36(x8)
     338:	00878793          	addi	x15,x15,8
     33c:	fef42223          	sw	x15,-28(x8)
	//check the linked list
	prevp = freep;
     340:	000067b7          	lui	x15,0x6
     344:	8207a783          	lw	x15,-2016(x15) # 5820 <freep>
     348:	fef42423          	sw	x15,-24(x8)
	//if there's no linked list yet
	if (prevp == NULL) {
     34c:	fe842783          	lw	x15,-24(x8)
     350:	02079e63          	bne	x15,x0,38c <tj_malloc+0x9c>
		prevp = &base;
     354:	000067b7          	lui	x15,0x6
     358:	81878793          	addi	x15,x15,-2024 # 5818 <base>
     35c:	fef42423          	sw	x15,-24(x8)
		freep = prevp;
     360:	000067b7          	lui	x15,0x6
     364:	fe842703          	lw	x14,-24(x8)
     368:	82e7a023          	sw	x14,-2016(x15) # 5820 <freep>
		base.next = freep;
     36c:	000067b7          	lui	x15,0x6
     370:	8207a703          	lw	x14,-2016(x15) # 5820 <freep>
     374:	000067b7          	lui	x15,0x6
     378:	81878793          	addi	x15,x15,-2024 # 5818 <base>
     37c:	00e7a023          	sw	x14,0(x15)
		base.size = 0;
     380:	000067b7          	lui	x15,0x6
     384:	81878793          	addi	x15,x15,-2024 # 5818 <base>
     388:	0007a223          	sw	x0,4(x15)
	}
	//traverse through the linked list, note there's no stopping condition
	for (p = prevp->next; ;prevp = p, p = p->next) {
     38c:	fe842783          	lw	x15,-24(x8)
     390:	0007a783          	lw	x15,0(x15)
     394:	fef42623          	sw	x15,-20(x8)
		if (p->size >= size) { //big enough
     398:	fec42783          	lw	x15,-20(x8)
     39c:	0047a783          	lw	x15,4(x15)
     3a0:	fdc42703          	lw	x14,-36(x8)
     3a4:	08e7e263          	bltu	x15,x14,428 <tj_malloc+0x138>
			if (p->size == size) // exact size
     3a8:	fec42783          	lw	x15,-20(x8)
     3ac:	0047a783          	lw	x15,4(x15)
     3b0:	fdc42703          	lw	x14,-36(x8)
     3b4:	00f71c63          	bne	x14,x15,3cc <tj_malloc+0xdc>
				prevp->next = p->next; // just return that block
     3b8:	fec42783          	lw	x15,-20(x8)
     3bc:	0007a703          	lw	x14,0(x15)
     3c0:	fe842783          	lw	x15,-24(x8)
     3c4:	00e7a023          	sw	x14,0(x15)
     3c8:	0400006f          	jal	x0,408 <tj_malloc+0x118>
			else {
				p->size -= total_size; //break up the block
     3cc:	fec42783          	lw	x15,-20(x8)
     3d0:	0047a703          	lw	x14,4(x15)
     3d4:	fe442783          	lw	x15,-28(x8)
     3d8:	40f70733          	sub	x14,x14,x15
     3dc:	fec42783          	lw	x15,-20(x8)
     3e0:	00e7a223          	sw	x14,4(x15)
				p += p->size;
     3e4:	fec42783          	lw	x15,-20(x8)
     3e8:	0047a783          	lw	x15,4(x15)
     3ec:	00379793          	slli	x15,x15,0x3
     3f0:	fec42703          	lw	x14,-20(x8)
     3f4:	00f707b3          	add	x15,x14,x15
     3f8:	fef42623          	sw	x15,-20(x8)
				p->size = size;
     3fc:	fec42783          	lw	x15,-20(x8)
     400:	fdc42703          	lw	x14,-36(x8)
     404:	00e7a223          	sw	x14,4(x15)
			}
			freep = prevp;
     408:	000067b7          	lui	x15,0x6
     40c:	fe842703          	lw	x14,-24(x8)
     410:	82e7a023          	sw	x14,-2016(x15) # 5820 <freep>
#ifdef DEBUG
			printf("returned pointer is %i\n", (int)p + 1);
#endif
			return (void *)(++p);
     414:	fec42783          	lw	x15,-20(x8)
     418:	00878793          	addi	x15,x15,8
     41c:	fef42623          	sw	x15,-20(x8)
     420:	fec42783          	lw	x15,-20(x8)
     424:	04c0006f          	jal	x0,470 <tj_malloc+0x180>
		}
		if (p == freep) //wrapped around free list
     428:	000067b7          	lui	x15,0x6
     42c:	8207a783          	lw	x15,-2016(x15) # 5820 <freep>
     430:	fec42703          	lw	x14,-20(x8)
     434:	02f71263          	bne	x14,x15,458 <tj_malloc+0x168>
			if ((p = getmoremem(total_size)) == NULL) //if the heap runs out
     438:	fe442503          	lw	x10,-28(x8)
     43c:	00000097          	auipc	x1,0x0
     440:	e08080e7          	jalr	x1,-504(x1) # 244 <getmoremem>
     444:	fea42623          	sw	x10,-20(x8)
     448:	fec42783          	lw	x15,-20(x8)
     44c:	00079663          	bne	x15,x0,458 <tj_malloc+0x168>
				return NULL; //well, you got nothing left, gg
     450:	00000793          	addi	x15,x0,0
     454:	01c0006f          	jal	x0,470 <tj_malloc+0x180>
	for (p = prevp->next; ;prevp = p, p = p->next) {
     458:	fec42783          	lw	x15,-20(x8)
     45c:	fef42423          	sw	x15,-24(x8)
     460:	fec42783          	lw	x15,-20(x8)
     464:	0007a783          	lw	x15,0(x15)
     468:	fef42623          	sw	x15,-20(x8)
		if (p->size >= size) { //big enough
     46c:	f2dff06f          	jal	x0,398 <tj_malloc+0xa8>
	}
}
     470:	00078513          	addi	x10,x15,0
     474:	02c12083          	lw	x1,44(x2)
     478:	02812403          	lw	x8,40(x2)
     47c:	03010113          	addi	x2,x2,48
     480:	00008067          	jalr	x0,0(x1)

00000484 <tj_calloc>:

void *tj_calloc(unsigned int size) {
     484:	fd010113          	addi	x2,x2,-48
     488:	02112623          	sw	x1,44(x2)
     48c:	02812423          	sw	x8,40(x2)
     490:	03010413          	addi	x8,x2,48
     494:	fca42e23          	sw	x10,-36(x8)
	void *mem = tj_malloc(size);
     498:	fdc42503          	lw	x10,-36(x8)
     49c:	00000097          	auipc	x1,0x0
     4a0:	e54080e7          	jalr	x1,-428(x1) # 2f0 <tj_malloc>
     4a4:	fea42623          	sw	x10,-20(x8)
	memset(mem, 0, size);
     4a8:	fdc42603          	lw	x12,-36(x8)
     4ac:	00000593          	addi	x11,x0,0
     4b0:	fec42503          	lw	x10,-20(x8)
     4b4:	00001097          	auipc	x1,0x1
     4b8:	228080e7          	jalr	x1,552(x1) # 16dc <memset>
	return mem;
     4bc:	fec42783          	lw	x15,-20(x8)
}
     4c0:	00078513          	addi	x10,x15,0
     4c4:	02c12083          	lw	x1,44(x2)
     4c8:	02812403          	lw	x8,40(x2)
     4cc:	03010113          	addi	x2,x2,48
     4d0:	00008067          	jalr	x0,0(x1)

000004d4 <random_gen>:

unsigned int lfsr = 0xACE1u;
unsigned period = 0;
char s[16+1];

int random_gen(){
     4d4:	fe010113          	addi	x2,x2,-32
     4d8:	00812e23          	sw	x8,28(x2)
     4dc:	02010413          	addi	x8,x2,32
    unsigned lsb = lfsr & 1;
     4e0:	000017b7          	lui	x15,0x1
     4e4:	7e87a783          	lw	x15,2024(x15) # 17e8 <lfsr>
     4e8:	0017f793          	andi	x15,x15,1
     4ec:	fef42623          	sw	x15,-20(x8)

    lfsr >>= 1;
     4f0:	000017b7          	lui	x15,0x1
     4f4:	7e87a783          	lw	x15,2024(x15) # 17e8 <lfsr>
     4f8:	0017d713          	srli	x14,x15,0x1
     4fc:	000017b7          	lui	x15,0x1
     500:	7ee7a423          	sw	x14,2024(x15) # 17e8 <lfsr>

    if (lsb == 1)
     504:	fec42703          	lw	x14,-20(x8)
     508:	00100793          	addi	x15,x0,1
     50c:	02f71063          	bne	x14,x15,52c <random_gen+0x58>
        lfsr ^= 0xB400u;
     510:	000017b7          	lui	x15,0x1
     514:	7e87a703          	lw	x14,2024(x15) # 17e8 <lfsr>
     518:	0000b7b7          	lui	x15,0xb
     51c:	40078793          	addi	x15,x15,1024 # b400 <_ebss+0x5bdc>
     520:	00f74733          	xor	x14,x14,x15
     524:	000017b7          	lui	x15,0x1
     528:	7ee7a423          	sw	x14,2024(x15) # 17e8 <lfsr>

    return lfsr;
     52c:	000017b7          	lui	x15,0x1
     530:	7e87a783          	lw	x15,2024(x15) # 17e8 <lfsr>
}
     534:	00078513          	addi	x10,x15,0
     538:	01c12403          	lw	x8,28(x2)
     53c:	02010113          	addi	x2,x2,32
     540:	00008067          	jalr	x0,0(x1)

00000544 <relu_af>:

int relu_af(int in_af){
     544:	fe010113          	addi	x2,x2,-32
     548:	00812e23          	sw	x8,28(x2)
     54c:	02010413          	addi	x8,x2,32
     550:	fea42623          	sw	x10,-20(x8)
	if(in_af < 0)
     554:	fec42783          	lw	x15,-20(x8)
     558:	0007d663          	bge	x15,x0,564 <relu_af+0x20>
		return 0;
     55c:	00000793          	addi	x15,x0,0
     560:	0080006f          	jal	x0,568 <relu_af+0x24>

	return in_af;
     564:	fec42783          	lw	x15,-20(x8)
}
     568:	00078513          	addi	x10,x15,0
     56c:	01c12403          	lw	x8,28(x2)
     570:	02010113          	addi	x2,x2,32
     574:	00008067          	jalr	x0,0(x1)

00000578 <fc_layer>:

void fc_layer(int weights[5][5], int biasses[5], int inputs[5], int outputs[5], int input_num, int output_num, int af_num){
     578:	fc010113          	addi	x2,x2,-64
     57c:	02112e23          	sw	x1,60(x2)
     580:	02812c23          	sw	x8,56(x2)
     584:	02912a23          	sw	x9,52(x2)
     588:	04010413          	addi	x8,x2,64
     58c:	fca42e23          	sw	x10,-36(x8)
     590:	fcb42c23          	sw	x11,-40(x8)
     594:	fcc42a23          	sw	x12,-44(x8)
     598:	fcd42823          	sw	x13,-48(x8)
     59c:	fce42623          	sw	x14,-52(x8)
     5a0:	fcf42423          	sw	x15,-56(x8)
     5a4:	fd042223          	sw	x16,-60(x8)
	int i;
	int j;
	for (i = 0; i < output_num; i++) {
     5a8:	fe042623          	sw	x0,-20(x8)
     5ac:	15c0006f          	jal	x0,708 <fc_layer+0x190>
		outputs[i] = biasses[i];
     5b0:	fec42783          	lw	x15,-20(x8)
     5b4:	00279793          	slli	x15,x15,0x2
     5b8:	fd842703          	lw	x14,-40(x8)
     5bc:	00f70733          	add	x14,x14,x15
     5c0:	fec42783          	lw	x15,-20(x8)
     5c4:	00279793          	slli	x15,x15,0x2
     5c8:	fd042683          	lw	x13,-48(x8)
     5cc:	00f687b3          	add	x15,x13,x15
     5d0:	00072703          	lw	x14,0(x14)
     5d4:	00e7a023          	sw	x14,0(x15)
		for (j = 0; j < input_num; j++) {
     5d8:	fe042423          	sw	x0,-24(x8)
     5dc:	0840006f          	jal	x0,660 <fc_layer+0xe8>
			outputs[i] += weights[i][j] * inputs[j];
     5e0:	fec42783          	lw	x15,-20(x8)
     5e4:	00279793          	slli	x15,x15,0x2
     5e8:	fd042703          	lw	x14,-48(x8)
     5ec:	00f707b3          	add	x15,x14,x15
     5f0:	0007a683          	lw	x13,0(x15)
     5f4:	fec42703          	lw	x14,-20(x8)
     5f8:	00070793          	addi	x15,x14,0
     5fc:	00279793          	slli	x15,x15,0x2
     600:	00e787b3          	add	x15,x15,x14
     604:	00279793          	slli	x15,x15,0x2
     608:	00078713          	addi	x14,x15,0
     60c:	fdc42783          	lw	x15,-36(x8)
     610:	00e78733          	add	x14,x15,x14
     614:	fe842783          	lw	x15,-24(x8)
     618:	00279793          	slli	x15,x15,0x2
     61c:	00f707b3          	add	x15,x14,x15
     620:	0007a703          	lw	x14,0(x15)
     624:	fe842783          	lw	x15,-24(x8)
     628:	00279793          	slli	x15,x15,0x2
     62c:	fd442603          	lw	x12,-44(x8)
     630:	00f607b3          	add	x15,x12,x15
     634:	0007a783          	lw	x15,0(x15)
     638:	02f70733          	mul	x14,x14,x15
     63c:	fec42783          	lw	x15,-20(x8)
     640:	00279793          	slli	x15,x15,0x2
     644:	fd042603          	lw	x12,-48(x8)
     648:	00f607b3          	add	x15,x12,x15
     64c:	00e68733          	add	x14,x13,x14
     650:	00e7a023          	sw	x14,0(x15)
		for (j = 0; j < input_num; j++) {
     654:	fe842783          	lw	x15,-24(x8)
     658:	00178793          	addi	x15,x15,1
     65c:	fef42423          	sw	x15,-24(x8)
     660:	fe842703          	lw	x14,-24(x8)
     664:	fcc42783          	lw	x15,-52(x8)
     668:	f6f74ce3          	blt	x14,x15,5e0 <fc_layer+0x68>
		}
        switch (af_num) {
     66c:	fc442783          	lw	x15,-60(x8)
     670:	00078a63          	beq	x15,x0,684 <fc_layer+0x10c>
     674:	fc442703          	lw	x14,-60(x8)
     678:	00100793          	addi	x15,x0,1
     67c:	04f70263          	beq	x14,x15,6c0 <fc_layer+0x148>
     680:	07c0006f          	jal	x0,6fc <fc_layer+0x184>
            case 0:
                outputs[i] = relu_af(outputs[i]);
     684:	fec42783          	lw	x15,-20(x8)
     688:	00279793          	slli	x15,x15,0x2
     68c:	fd042703          	lw	x14,-48(x8)
     690:	00f707b3          	add	x15,x14,x15
     694:	0007a683          	lw	x13,0(x15)
     698:	fec42783          	lw	x15,-20(x8)
     69c:	00279793          	slli	x15,x15,0x2
     6a0:	fd042703          	lw	x14,-48(x8)
     6a4:	00f704b3          	add	x9,x14,x15
     6a8:	00068513          	addi	x10,x13,0
     6ac:	00000097          	auipc	x1,0x0
     6b0:	e98080e7          	jalr	x1,-360(x1) # 544 <relu_af>
     6b4:	00050793          	addi	x15,x10,0
     6b8:	00f4a023          	sw	x15,0(x9)
                break;
     6bc:	0400006f          	jal	x0,6fc <fc_layer+0x184>
            case 1:
                outputs[i] = relu_af(outputs[i]);
     6c0:	fec42783          	lw	x15,-20(x8)
     6c4:	00279793          	slli	x15,x15,0x2
     6c8:	fd042703          	lw	x14,-48(x8)
     6cc:	00f707b3          	add	x15,x14,x15
     6d0:	0007a683          	lw	x13,0(x15)
     6d4:	fec42783          	lw	x15,-20(x8)
     6d8:	00279793          	slli	x15,x15,0x2
     6dc:	fd042703          	lw	x14,-48(x8)
     6e0:	00f704b3          	add	x9,x14,x15
     6e4:	00068513          	addi	x10,x13,0
     6e8:	00000097          	auipc	x1,0x0
     6ec:	e5c080e7          	jalr	x1,-420(x1) # 544 <relu_af>
     6f0:	00050793          	addi	x15,x10,0
     6f4:	00f4a023          	sw	x15,0(x9)
                break;
     6f8:	00000013          	addi	x0,x0,0
	for (i = 0; i < output_num; i++) {
     6fc:	fec42783          	lw	x15,-20(x8)
     700:	00178793          	addi	x15,x15,1
     704:	fef42623          	sw	x15,-20(x8)
     708:	fec42703          	lw	x14,-20(x8)
     70c:	fc842783          	lw	x15,-56(x8)
     710:	eaf740e3          	blt	x14,x15,5b0 <fc_layer+0x38>
        }
	}
}
     714:	00000013          	addi	x0,x0,0
     718:	00000013          	addi	x0,x0,0
     71c:	03c12083          	lw	x1,60(x2)
     720:	03812403          	lw	x8,56(x2)
     724:	03412483          	lw	x9,52(x2)
     728:	04010113          	addi	x2,x2,64
     72c:	00008067          	jalr	x0,0(x1)

00000730 <fc_input_generator>:

void fc_input_generator(int inputs[5], int input_num){
     730:	fd010113          	addi	x2,x2,-48
     734:	02112623          	sw	x1,44(x2)
     738:	02812423          	sw	x8,40(x2)
     73c:	03010413          	addi	x8,x2,48
     740:	fca42e23          	sw	x10,-36(x8)
     744:	fcb42c23          	sw	x11,-40(x8)
	int i;
    for (i = 0; i < input_num; i++) {
     748:	fe042623          	sw	x0,-20(x8)
     74c:	0380006f          	jal	x0,784 <fc_input_generator+0x54>
        inputs[i] = (random_gen()&15) - 5;
     750:	00000097          	auipc	x1,0x0
     754:	d84080e7          	jalr	x1,-636(x1) # 4d4 <random_gen>
     758:	00050793          	addi	x15,x10,0
     75c:	00f7f713          	andi	x14,x15,15
     760:	fec42783          	lw	x15,-20(x8)
     764:	00279793          	slli	x15,x15,0x2
     768:	fdc42683          	lw	x13,-36(x8)
     76c:	00f687b3          	add	x15,x13,x15
     770:	ffb70713          	addi	x14,x14,-5
     774:	00e7a023          	sw	x14,0(x15)
    for (i = 0; i < input_num; i++) {
     778:	fec42783          	lw	x15,-20(x8)
     77c:	00178793          	addi	x15,x15,1
     780:	fef42623          	sw	x15,-20(x8)
     784:	fec42703          	lw	x14,-20(x8)
     788:	fd842783          	lw	x15,-40(x8)
     78c:	fcf742e3          	blt	x14,x15,750 <fc_input_generator+0x20>
    }
}
     790:	00000013          	addi	x0,x0,0
     794:	00000013          	addi	x0,x0,0
     798:	02c12083          	lw	x1,44(x2)
     79c:	02812403          	lw	x8,40(x2)
     7a0:	03010113          	addi	x2,x2,48
     7a4:	00008067          	jalr	x0,0(x1)

000007a8 <fc_weight_generator>:

void fc_weight_generator(int weights[5][5], int biasses[5], int input_num, int output_num){
     7a8:	fd010113          	addi	x2,x2,-48
     7ac:	02112623          	sw	x1,44(x2)
     7b0:	02812423          	sw	x8,40(x2)
     7b4:	03010413          	addi	x8,x2,48
     7b8:	fca42e23          	sw	x10,-36(x8)
     7bc:	fcb42c23          	sw	x11,-40(x8)
     7c0:	fcc42a23          	sw	x12,-44(x8)
     7c4:	fcd42823          	sw	x13,-48(x8)
	int i;
	int j;
	for (i = 0; i < output_num; i++) {
     7c8:	fe042623          	sw	x0,-20(x8)
     7cc:	09c0006f          	jal	x0,868 <fc_weight_generator+0xc0>
        biasses[i] = (random_gen()&15) - 5;
     7d0:	00000097          	auipc	x1,0x0
     7d4:	d04080e7          	jalr	x1,-764(x1) # 4d4 <random_gen>
     7d8:	00050793          	addi	x15,x10,0
     7dc:	00f7f713          	andi	x14,x15,15
     7e0:	fec42783          	lw	x15,-20(x8)
     7e4:	00279793          	slli	x15,x15,0x2
     7e8:	fd842683          	lw	x13,-40(x8)
     7ec:	00f687b3          	add	x15,x13,x15
     7f0:	ffb70713          	addi	x14,x14,-5
     7f4:	00e7a023          	sw	x14,0(x15)
        for (j = 0; j < input_num; j++) {
     7f8:	fe042423          	sw	x0,-24(x8)
     7fc:	0540006f          	jal	x0,850 <fc_weight_generator+0xa8>
            weights[i][j] = (random_gen()&15) - 5;
     800:	00000097          	auipc	x1,0x0
     804:	cd4080e7          	jalr	x1,-812(x1) # 4d4 <random_gen>
     808:	00050793          	addi	x15,x10,0
     80c:	00f7f613          	andi	x12,x15,15
     810:	fec42703          	lw	x14,-20(x8)
     814:	00070793          	addi	x15,x14,0
     818:	00279793          	slli	x15,x15,0x2
     81c:	00e787b3          	add	x15,x15,x14
     820:	00279793          	slli	x15,x15,0x2
     824:	00078713          	addi	x14,x15,0
     828:	fdc42783          	lw	x15,-36(x8)
     82c:	00e786b3          	add	x13,x15,x14
     830:	ffb60713          	addi	x14,x12,-5
     834:	fe842783          	lw	x15,-24(x8)
     838:	00279793          	slli	x15,x15,0x2
     83c:	00f687b3          	add	x15,x13,x15
     840:	00e7a023          	sw	x14,0(x15)
        for (j = 0; j < input_num; j++) {
     844:	fe842783          	lw	x15,-24(x8)
     848:	00178793          	addi	x15,x15,1
     84c:	fef42423          	sw	x15,-24(x8)
     850:	fe842703          	lw	x14,-24(x8)
     854:	fd442783          	lw	x15,-44(x8)
     858:	faf744e3          	blt	x14,x15,800 <fc_weight_generator+0x58>
	for (i = 0; i < output_num; i++) {
     85c:	fec42783          	lw	x15,-20(x8)
     860:	00178793          	addi	x15,x15,1
     864:	fef42623          	sw	x15,-20(x8)
     868:	fec42703          	lw	x14,-20(x8)
     86c:	fd042783          	lw	x15,-48(x8)
     870:	f6f740e3          	blt	x14,x15,7d0 <fc_weight_generator+0x28>
        }
    }
}
     874:	00000013          	addi	x0,x0,0
     878:	00000013          	addi	x0,x0,0
     87c:	02c12083          	lw	x1,44(x2)
     880:	02812403          	lw	x8,40(x2)
     884:	03010113          	addi	x2,x2,48
     888:	00008067          	jalr	x0,0(x1)

0000088c <fc_soft_max>:

int fc_soft_max(int features[5], int feature_num){
     88c:	fd010113          	addi	x2,x2,-48
     890:	02812623          	sw	x8,44(x2)
     894:	03010413          	addi	x8,x2,48
     898:	fca42e23          	sw	x10,-36(x8)
     89c:	fcb42c23          	sw	x11,-40(x8)
	int i;
	int max = 0;
     8a0:	fe042423          	sw	x0,-24(x8)
    for (i = 1; i < feature_num; i++) {
     8a4:	00100793          	addi	x15,x0,1
     8a8:	fef42623          	sw	x15,-20(x8)
     8ac:	0440006f          	jal	x0,8f0 <fc_soft_max+0x64>
        if(features[max] < features[i])
     8b0:	fe842783          	lw	x15,-24(x8)
     8b4:	00279793          	slli	x15,x15,0x2
     8b8:	fdc42703          	lw	x14,-36(x8)
     8bc:	00f707b3          	add	x15,x14,x15
     8c0:	0007a703          	lw	x14,0(x15)
     8c4:	fec42783          	lw	x15,-20(x8)
     8c8:	00279793          	slli	x15,x15,0x2
     8cc:	fdc42683          	lw	x13,-36(x8)
     8d0:	00f687b3          	add	x15,x13,x15
     8d4:	0007a783          	lw	x15,0(x15)
     8d8:	00f75663          	bge	x14,x15,8e4 <fc_soft_max+0x58>
            max = i;
     8dc:	fec42783          	lw	x15,-20(x8)
     8e0:	fef42423          	sw	x15,-24(x8)
    for (i = 1; i < feature_num; i++) {
     8e4:	fec42783          	lw	x15,-20(x8)
     8e8:	00178793          	addi	x15,x15,1
     8ec:	fef42623          	sw	x15,-20(x8)
     8f0:	fec42703          	lw	x14,-20(x8)
     8f4:	fd842783          	lw	x15,-40(x8)
     8f8:	faf74ce3          	blt	x14,x15,8b0 <fc_soft_max+0x24>
    }
    return max;
     8fc:	fe842783          	lw	x15,-24(x8)
}
     900:	00078513          	addi	x10,x15,0
     904:	02c12403          	lw	x8,44(x2)
     908:	03010113          	addi	x2,x2,48
     90c:	00008067          	jalr	x0,0(x1)

00000910 <cnn_layer>:

void cnn_layer(int weights[5][5][5][5], int biasses[5], int inputs[5][5][5], int outputs[5][5][5], int input_channel, int output_channel, int input_size, int kernel_size, int stride, int zero_pad, int af_num){
     910:	fb010113          	addi	x2,x2,-80
     914:	04112623          	sw	x1,76(x2)
     918:	04812423          	sw	x8,72(x2)
     91c:	04912223          	sw	x9,68(x2)
     920:	05010413          	addi	x8,x2,80
     924:	fca42623          	sw	x10,-52(x8)
     928:	fcb42423          	sw	x11,-56(x8)
     92c:	fcc42223          	sw	x12,-60(x8)
     930:	fcd42023          	sw	x13,-64(x8)
     934:	fae42e23          	sw	x14,-68(x8)
     938:	faf42c23          	sw	x15,-72(x8)
     93c:	fb042a23          	sw	x16,-76(x8)
     940:	fb142823          	sw	x17,-80(x8)
    int output_size = ((input_size + (2 * zero_pad) - kernel_size) >> stride) + 1;
     944:	00442783          	lw	x15,4(x8)
     948:	00179713          	slli	x14,x15,0x1
     94c:	fb442783          	lw	x15,-76(x8)
     950:	00f70733          	add	x14,x14,x15
     954:	fb042783          	lw	x15,-80(x8)
     958:	40f70733          	sub	x14,x14,x15
     95c:	00042783          	lw	x15,0(x8)
     960:	40f757b3          	sra	x15,x14,x15
     964:	00178793          	addi	x15,x15,1
     968:	fcf42a23          	sw	x15,-44(x8)
	int o_ch_itr, o_r_itr, o_c_itr, i_ch_itr, k_r_itr, k_c_itr;
	for (o_ch_itr = 0; o_ch_itr < output_channel; o_ch_itr++) {
     96c:	fe042623          	sw	x0,-20(x8)
     970:	3e00006f          	jal	x0,d50 <cnn_layer+0x440>
        for (o_r_itr = 0; o_r_itr < output_size; o_r_itr++) {
     974:	fe042423          	sw	x0,-24(x8)
     978:	3c00006f          	jal	x0,d38 <cnn_layer+0x428>
            for (o_c_itr = 0; o_c_itr < output_size; o_c_itr++) {
     97c:	fe042223          	sw	x0,-28(x8)
     980:	3a00006f          	jal	x0,d20 <cnn_layer+0x410>
                outputs[o_ch_itr][o_r_itr][o_c_itr] = biasses[o_ch_itr];
     984:	fec42783          	lw	x15,-20(x8)
     988:	00279793          	slli	x15,x15,0x2
     98c:	fc842703          	lw	x14,-56(x8)
     990:	00f707b3          	add	x15,x14,x15
     994:	fec42683          	lw	x13,-20(x8)
     998:	06400713          	addi	x14,x0,100
     99c:	02e68733          	mul	x14,x13,x14
     9a0:	fc042683          	lw	x13,-64(x8)
     9a4:	00e68633          	add	x12,x13,x14
     9a8:	0007a683          	lw	x13,0(x15)
     9ac:	fe842703          	lw	x14,-24(x8)
     9b0:	00070793          	addi	x15,x14,0
     9b4:	00279793          	slli	x15,x15,0x2
     9b8:	00e787b3          	add	x15,x15,x14
     9bc:	fe442703          	lw	x14,-28(x8)
     9c0:	00e787b3          	add	x15,x15,x14
     9c4:	00279793          	slli	x15,x15,0x2
     9c8:	00f607b3          	add	x15,x12,x15
     9cc:	00d7a023          	sw	x13,0(x15)
        		for (i_ch_itr = 0; i_ch_itr < input_channel; i_ch_itr++) {
     9d0:	fe042023          	sw	x0,-32(x8)
     9d4:	2140006f          	jal	x0,be8 <cnn_layer+0x2d8>
                    for (k_r_itr = 0; k_r_itr < kernel_size; k_r_itr++) {
     9d8:	fc042e23          	sw	x0,-36(x8)
     9dc:	1f40006f          	jal	x0,bd0 <cnn_layer+0x2c0>
                        for (k_c_itr = 0; k_c_itr < kernel_size; k_c_itr++) {
     9e0:	fc042c23          	sw	x0,-40(x8)
     9e4:	1d40006f          	jal	x0,bb8 <cnn_layer+0x2a8>
                            outputs[o_ch_itr][o_r_itr][o_c_itr] += (((stride*o_r_itr)+k_r_itr-zero_pad) < 0) || (((stride*o_c_itr)+k_c_itr-zero_pad) < 0) || (((stride*o_r_itr)+k_r_itr-zero_pad) >= input_size) || (((stride*o_c_itr)+k_c_itr-zero_pad) >= input_size) ? 0 : inputs[i_ch_itr][(stride*o_r_itr)+k_r_itr-zero_pad][(stride*o_c_itr)+k_c_itr-zero_pad] * weights[o_ch_itr][i_ch_itr][k_r_itr][k_c_itr];
     9e8:	fec42703          	lw	x14,-20(x8)
     9ec:	06400793          	addi	x15,x0,100
     9f0:	02f707b3          	mul	x15,x14,x15
     9f4:	fc042703          	lw	x14,-64(x8)
     9f8:	00f706b3          	add	x13,x14,x15
     9fc:	fe842703          	lw	x14,-24(x8)
     a00:	00070793          	addi	x15,x14,0
     a04:	00279793          	slli	x15,x15,0x2
     a08:	00e787b3          	add	x15,x15,x14
     a0c:	fe442703          	lw	x14,-28(x8)
     a10:	00e787b3          	add	x15,x15,x14
     a14:	00279793          	slli	x15,x15,0x2
     a18:	00f687b3          	add	x15,x13,x15
     a1c:	0007a583          	lw	x11,0(x15)
     a20:	00042703          	lw	x14,0(x8)
     a24:	fe842783          	lw	x15,-24(x8)
     a28:	02f70733          	mul	x14,x14,x15
     a2c:	fdc42783          	lw	x15,-36(x8)
     a30:	00f70733          	add	x14,x14,x15
     a34:	00442783          	lw	x15,4(x8)
     a38:	40f707b3          	sub	x15,x14,x15
     a3c:	1207c863          	blt	x15,x0,b6c <cnn_layer+0x25c>
     a40:	00042703          	lw	x14,0(x8)
     a44:	fe442783          	lw	x15,-28(x8)
     a48:	02f70733          	mul	x14,x14,x15
     a4c:	fd842783          	lw	x15,-40(x8)
     a50:	00f70733          	add	x14,x14,x15
     a54:	00442783          	lw	x15,4(x8)
     a58:	40f707b3          	sub	x15,x14,x15
     a5c:	1007c863          	blt	x15,x0,b6c <cnn_layer+0x25c>
     a60:	00042703          	lw	x14,0(x8)
     a64:	fe842783          	lw	x15,-24(x8)
     a68:	02f70733          	mul	x14,x14,x15
     a6c:	fdc42783          	lw	x15,-36(x8)
     a70:	00f70733          	add	x14,x14,x15
     a74:	00442783          	lw	x15,4(x8)
     a78:	40f707b3          	sub	x15,x14,x15
     a7c:	fb442703          	lw	x14,-76(x8)
     a80:	0ee7d663          	bge	x15,x14,b6c <cnn_layer+0x25c>
     a84:	00042703          	lw	x14,0(x8)
     a88:	fe442783          	lw	x15,-28(x8)
     a8c:	02f70733          	mul	x14,x14,x15
     a90:	fd842783          	lw	x15,-40(x8)
     a94:	00f70733          	add	x14,x14,x15
     a98:	00442783          	lw	x15,4(x8)
     a9c:	40f707b3          	sub	x15,x14,x15
     aa0:	fb442703          	lw	x14,-76(x8)
     aa4:	0ce7d463          	bge	x15,x14,b6c <cnn_layer+0x25c>
     aa8:	fe042703          	lw	x14,-32(x8)
     aac:	06400793          	addi	x15,x0,100
     ab0:	02f707b3          	mul	x15,x14,x15
     ab4:	fc442703          	lw	x14,-60(x8)
     ab8:	00f706b3          	add	x13,x14,x15
     abc:	00042703          	lw	x14,0(x8)
     ac0:	fe842783          	lw	x15,-24(x8)
     ac4:	02f70733          	mul	x14,x14,x15
     ac8:	fdc42783          	lw	x15,-36(x8)
     acc:	00f70733          	add	x14,x14,x15
     ad0:	00442783          	lw	x15,4(x8)
     ad4:	40f70733          	sub	x14,x14,x15
     ad8:	00042603          	lw	x12,0(x8)
     adc:	fe442783          	lw	x15,-28(x8)
     ae0:	02f60633          	mul	x12,x12,x15
     ae4:	fd842783          	lw	x15,-40(x8)
     ae8:	00f60633          	add	x12,x12,x15
     aec:	00442783          	lw	x15,4(x8)
     af0:	40f60633          	sub	x12,x12,x15
     af4:	00070793          	addi	x15,x14,0
     af8:	00279793          	slli	x15,x15,0x2
     afc:	00e787b3          	add	x15,x15,x14
     b00:	00c787b3          	add	x15,x15,x12
     b04:	00279793          	slli	x15,x15,0x2
     b08:	00f687b3          	add	x15,x13,x15
     b0c:	0007a603          	lw	x12,0(x15)
     b10:	fec42703          	lw	x14,-20(x8)
     b14:	1f400793          	addi	x15,x0,500
     b18:	02f707b3          	mul	x15,x14,x15
     b1c:	fcc42703          	lw	x14,-52(x8)
     b20:	00f70533          	add	x10,x14,x15
     b24:	fdc42783          	lw	x15,-36(x8)
     b28:	fe042683          	lw	x13,-32(x8)
     b2c:	00078713          	addi	x14,x15,0
     b30:	00271713          	slli	x14,x14,0x2
     b34:	00f70733          	add	x14,x14,x15
     b38:	00068793          	addi	x15,x13,0
     b3c:	00179793          	slli	x15,x15,0x1
     b40:	00d787b3          	add	x15,x15,x13
     b44:	00379793          	slli	x15,x15,0x3
     b48:	00d787b3          	add	x15,x15,x13
     b4c:	00f70733          	add	x14,x14,x15
     b50:	fd842783          	lw	x15,-40(x8)
     b54:	00f707b3          	add	x15,x14,x15
     b58:	00279793          	slli	x15,x15,0x2
     b5c:	00f507b3          	add	x15,x10,x15
     b60:	0007a783          	lw	x15,0(x15)
     b64:	02f607b3          	mul	x15,x12,x15
     b68:	0080006f          	jal	x0,b70 <cnn_layer+0x260>
     b6c:	00000793          	addi	x15,x0,0
     b70:	fec42683          	lw	x13,-20(x8)
     b74:	06400713          	addi	x14,x0,100
     b78:	02e68733          	mul	x14,x13,x14
     b7c:	fc042683          	lw	x13,-64(x8)
     b80:	00e68633          	add	x12,x13,x14
     b84:	00b786b3          	add	x13,x15,x11
     b88:	fe842703          	lw	x14,-24(x8)
     b8c:	00070793          	addi	x15,x14,0
     b90:	00279793          	slli	x15,x15,0x2
     b94:	00e787b3          	add	x15,x15,x14
     b98:	fe442703          	lw	x14,-28(x8)
     b9c:	00e787b3          	add	x15,x15,x14
     ba0:	00279793          	slli	x15,x15,0x2
     ba4:	00f607b3          	add	x15,x12,x15
     ba8:	00d7a023          	sw	x13,0(x15)
                        for (k_c_itr = 0; k_c_itr < kernel_size; k_c_itr++) {
     bac:	fd842783          	lw	x15,-40(x8)
     bb0:	00178793          	addi	x15,x15,1
     bb4:	fcf42c23          	sw	x15,-40(x8)
     bb8:	fd842703          	lw	x14,-40(x8)
     bbc:	fb042783          	lw	x15,-80(x8)
     bc0:	e2f744e3          	blt	x14,x15,9e8 <cnn_layer+0xd8>
                    for (k_r_itr = 0; k_r_itr < kernel_size; k_r_itr++) {
     bc4:	fdc42783          	lw	x15,-36(x8)
     bc8:	00178793          	addi	x15,x15,1
     bcc:	fcf42e23          	sw	x15,-36(x8)
     bd0:	fdc42703          	lw	x14,-36(x8)
     bd4:	fb042783          	lw	x15,-80(x8)
     bd8:	e0f744e3          	blt	x14,x15,9e0 <cnn_layer+0xd0>
        		for (i_ch_itr = 0; i_ch_itr < input_channel; i_ch_itr++) {
     bdc:	fe042783          	lw	x15,-32(x8)
     be0:	00178793          	addi	x15,x15,1
     be4:	fef42023          	sw	x15,-32(x8)
     be8:	fe042703          	lw	x14,-32(x8)
     bec:	fbc42783          	lw	x15,-68(x8)
     bf0:	def744e3          	blt	x14,x15,9d8 <cnn_layer+0xc8>
                		}
            		}
        		}
                switch (af_num) {
     bf4:	00842783          	lw	x15,8(x8)
     bf8:	00078a63          	beq	x15,x0,c0c <cnn_layer+0x2fc>
     bfc:	00842703          	lw	x14,8(x8)
     c00:	00100793          	addi	x15,x0,1
     c04:	08f70663          	beq	x14,x15,c90 <cnn_layer+0x380>
     c08:	10c0006f          	jal	x0,d14 <cnn_layer+0x404>
                    case 0:
                        outputs[o_ch_itr][o_r_itr][o_c_itr] = relu_af(outputs[o_ch_itr][o_r_itr][o_c_itr]);
     c0c:	fec42703          	lw	x14,-20(x8)
     c10:	06400793          	addi	x15,x0,100
     c14:	02f707b3          	mul	x15,x14,x15
     c18:	fc042703          	lw	x14,-64(x8)
     c1c:	00f706b3          	add	x13,x14,x15
     c20:	fe842703          	lw	x14,-24(x8)
     c24:	00070793          	addi	x15,x14,0
     c28:	00279793          	slli	x15,x15,0x2
     c2c:	00e787b3          	add	x15,x15,x14
     c30:	fe442703          	lw	x14,-28(x8)
     c34:	00e787b3          	add	x15,x15,x14
     c38:	00279793          	slli	x15,x15,0x2
     c3c:	00f687b3          	add	x15,x13,x15
     c40:	0007a683          	lw	x13,0(x15)
     c44:	fec42703          	lw	x14,-20(x8)
     c48:	06400793          	addi	x15,x0,100
     c4c:	02f707b3          	mul	x15,x14,x15
     c50:	fc042703          	lw	x14,-64(x8)
     c54:	00f704b3          	add	x9,x14,x15
     c58:	00068513          	addi	x10,x13,0
     c5c:	00000097          	auipc	x1,0x0
     c60:	8e8080e7          	jalr	x1,-1816(x1) # 544 <relu_af>
     c64:	00050693          	addi	x13,x10,0
     c68:	fe842703          	lw	x14,-24(x8)
     c6c:	00070793          	addi	x15,x14,0
     c70:	00279793          	slli	x15,x15,0x2
     c74:	00e787b3          	add	x15,x15,x14
     c78:	fe442703          	lw	x14,-28(x8)
     c7c:	00e787b3          	add	x15,x15,x14
     c80:	00279793          	slli	x15,x15,0x2
     c84:	00f487b3          	add	x15,x9,x15
     c88:	00d7a023          	sw	x13,0(x15)
                        break;
     c8c:	0880006f          	jal	x0,d14 <cnn_layer+0x404>
                    case 1:
                        outputs[o_ch_itr][o_r_itr][o_c_itr] = relu_af(outputs[o_ch_itr][o_r_itr][o_c_itr]);
     c90:	fec42703          	lw	x14,-20(x8)
     c94:	06400793          	addi	x15,x0,100
     c98:	02f707b3          	mul	x15,x14,x15
     c9c:	fc042703          	lw	x14,-64(x8)
     ca0:	00f706b3          	add	x13,x14,x15
     ca4:	fe842703          	lw	x14,-24(x8)
     ca8:	00070793          	addi	x15,x14,0
     cac:	00279793          	slli	x15,x15,0x2
     cb0:	00e787b3          	add	x15,x15,x14
     cb4:	fe442703          	lw	x14,-28(x8)
     cb8:	00e787b3          	add	x15,x15,x14
     cbc:	00279793          	slli	x15,x15,0x2
     cc0:	00f687b3          	add	x15,x13,x15
     cc4:	0007a683          	lw	x13,0(x15)
     cc8:	fec42703          	lw	x14,-20(x8)
     ccc:	06400793          	addi	x15,x0,100
     cd0:	02f707b3          	mul	x15,x14,x15
     cd4:	fc042703          	lw	x14,-64(x8)
     cd8:	00f704b3          	add	x9,x14,x15
     cdc:	00068513          	addi	x10,x13,0
     ce0:	00000097          	auipc	x1,0x0
     ce4:	864080e7          	jalr	x1,-1948(x1) # 544 <relu_af>
     ce8:	00050693          	addi	x13,x10,0
     cec:	fe842703          	lw	x14,-24(x8)
     cf0:	00070793          	addi	x15,x14,0
     cf4:	00279793          	slli	x15,x15,0x2
     cf8:	00e787b3          	add	x15,x15,x14
     cfc:	fe442703          	lw	x14,-28(x8)
     d00:	00e787b3          	add	x15,x15,x14
     d04:	00279793          	slli	x15,x15,0x2
     d08:	00f487b3          	add	x15,x9,x15
     d0c:	00d7a023          	sw	x13,0(x15)
                        break;
     d10:	00000013          	addi	x0,x0,0
            for (o_c_itr = 0; o_c_itr < output_size; o_c_itr++) {
     d14:	fe442783          	lw	x15,-28(x8)
     d18:	00178793          	addi	x15,x15,1
     d1c:	fef42223          	sw	x15,-28(x8)
     d20:	fe442703          	lw	x14,-28(x8)
     d24:	fd442783          	lw	x15,-44(x8)
     d28:	c4f74ee3          	blt	x14,x15,984 <cnn_layer+0x74>
        for (o_r_itr = 0; o_r_itr < output_size; o_r_itr++) {
     d2c:	fe842783          	lw	x15,-24(x8)
     d30:	00178793          	addi	x15,x15,1
     d34:	fef42423          	sw	x15,-24(x8)
     d38:	fe842703          	lw	x14,-24(x8)
     d3c:	fd442783          	lw	x15,-44(x8)
     d40:	c2f74ee3          	blt	x14,x15,97c <cnn_layer+0x6c>
	for (o_ch_itr = 0; o_ch_itr < output_channel; o_ch_itr++) {
     d44:	fec42783          	lw	x15,-20(x8)
     d48:	00178793          	addi	x15,x15,1
     d4c:	fef42623          	sw	x15,-20(x8)
     d50:	fec42703          	lw	x14,-20(x8)
     d54:	fb842783          	lw	x15,-72(x8)
     d58:	c0f74ee3          	blt	x14,x15,974 <cnn_layer+0x64>
                }
    		}
		}
	}
}
     d5c:	00000013          	addi	x0,x0,0
     d60:	00000013          	addi	x0,x0,0
     d64:	04c12083          	lw	x1,76(x2)
     d68:	04812403          	lw	x8,72(x2)
     d6c:	04412483          	lw	x9,68(x2)
     d70:	05010113          	addi	x2,x2,80
     d74:	00008067          	jalr	x0,0(x1)

00000d78 <cnn_pool>:

void cnn_pool(int inputs[5][5][5], int outputs[5][5][5], int feature_channel, int input_size, int kernel_size, int stride, int zero_pad, int pool_num){
     d78:	fb010113          	addi	x2,x2,-80
     d7c:	04812623          	sw	x8,76(x2)
     d80:	05010413          	addi	x8,x2,80
     d84:	fca42623          	sw	x10,-52(x8)
     d88:	fcb42423          	sw	x11,-56(x8)
     d8c:	fcc42223          	sw	x12,-60(x8)
     d90:	fcd42023          	sw	x13,-64(x8)
     d94:	fae42e23          	sw	x14,-68(x8)
     d98:	faf42c23          	sw	x15,-72(x8)
     d9c:	fb042a23          	sw	x16,-76(x8)
     da0:	fb142823          	sw	x17,-80(x8)
    int output_size = ((input_size + (2 * zero_pad) - kernel_size) >> stride) + 1;
     da4:	fb442783          	lw	x15,-76(x8)
     da8:	00179713          	slli	x14,x15,0x1
     dac:	fc042783          	lw	x15,-64(x8)
     db0:	00f70733          	add	x14,x14,x15
     db4:	fbc42783          	lw	x15,-68(x8)
     db8:	40f70733          	sub	x14,x14,x15
     dbc:	fb842783          	lw	x15,-72(x8)
     dc0:	40f757b3          	sra	x15,x14,x15
     dc4:	00178793          	addi	x15,x15,1
     dc8:	fcf42c23          	sw	x15,-40(x8)
    int new_candidate;
	int ch_itr, o_r_itr, o_c_itr, k_r_itr, k_c_itr;
    for (ch_itr = 0; ch_itr < feature_channel; ch_itr++) {
     dcc:	fe042623          	sw	x0,-20(x8)
     dd0:	3640006f          	jal	x0,1134 <cnn_pool+0x3bc>
        for (o_r_itr = 0; o_r_itr < output_size; o_r_itr++) {
     dd4:	fe042423          	sw	x0,-24(x8)
     dd8:	3440006f          	jal	x0,111c <cnn_pool+0x3a4>
            for (o_c_itr = 0; o_c_itr < output_size; o_c_itr++) {
     ddc:	fe042223          	sw	x0,-28(x8)
     de0:	3240006f          	jal	x0,1104 <cnn_pool+0x38c>
                switch (pool_num) {
     de4:	fb042783          	lw	x15,-80(x8)
     de8:	00078a63          	beq	x15,x0,dfc <cnn_pool+0x84>
     dec:	fb042703          	lw	x14,-80(x8)
     df0:	00100793          	addi	x15,x0,1
     df4:	08f70663          	beq	x14,x15,e80 <cnn_pool+0x108>
     df8:	0c40006f          	jal	x0,ebc <cnn_pool+0x144>
                    case 0:
                        outputs[ch_itr][o_r_itr][o_c_itr] = inputs[ch_itr][stride*o_r_itr][stride*o_c_itr];
     dfc:	fec42703          	lw	x14,-20(x8)
     e00:	06400793          	addi	x15,x0,100
     e04:	02f707b3          	mul	x15,x14,x15
     e08:	fcc42703          	lw	x14,-52(x8)
     e0c:	00f706b3          	add	x13,x14,x15
     e10:	fb842703          	lw	x14,-72(x8)
     e14:	fe842783          	lw	x15,-24(x8)
     e18:	02f70733          	mul	x14,x14,x15
     e1c:	fb842603          	lw	x12,-72(x8)
     e20:	fe442783          	lw	x15,-28(x8)
     e24:	02f605b3          	mul	x11,x12,x15
     e28:	fec42603          	lw	x12,-20(x8)
     e2c:	06400793          	addi	x15,x0,100
     e30:	02f607b3          	mul	x15,x12,x15
     e34:	fc842603          	lw	x12,-56(x8)
     e38:	00f60633          	add	x12,x12,x15
     e3c:	00070793          	addi	x15,x14,0
     e40:	00279793          	slli	x15,x15,0x2
     e44:	00e787b3          	add	x15,x15,x14
     e48:	00b787b3          	add	x15,x15,x11
     e4c:	00279793          	slli	x15,x15,0x2
     e50:	00f687b3          	add	x15,x13,x15
     e54:	0007a683          	lw	x13,0(x15)
     e58:	fe842703          	lw	x14,-24(x8)
     e5c:	00070793          	addi	x15,x14,0
     e60:	00279793          	slli	x15,x15,0x2
     e64:	00e787b3          	add	x15,x15,x14
     e68:	fe442703          	lw	x14,-28(x8)
     e6c:	00e787b3          	add	x15,x15,x14
     e70:	00279793          	slli	x15,x15,0x2
     e74:	00f607b3          	add	x15,x12,x15
     e78:	00d7a023          	sw	x13,0(x15)
                        break;
     e7c:	0400006f          	jal	x0,ebc <cnn_pool+0x144>
                    case 1:
                        outputs[ch_itr][o_r_itr][o_c_itr] = 0;
     e80:	fec42703          	lw	x14,-20(x8)
     e84:	06400793          	addi	x15,x0,100
     e88:	02f707b3          	mul	x15,x14,x15
     e8c:	fc842703          	lw	x14,-56(x8)
     e90:	00f706b3          	add	x13,x14,x15
     e94:	fe842703          	lw	x14,-24(x8)
     e98:	00070793          	addi	x15,x14,0
     e9c:	00279793          	slli	x15,x15,0x2
     ea0:	00e787b3          	add	x15,x15,x14
     ea4:	fe442703          	lw	x14,-28(x8)
     ea8:	00e787b3          	add	x15,x15,x14
     eac:	00279793          	slli	x15,x15,0x2
     eb0:	00f687b3          	add	x15,x13,x15
     eb4:	0007a023          	sw	x0,0(x15)
                        break;
     eb8:	00000013          	addi	x0,x0,0
                }
                for (k_r_itr = 0; k_r_itr < kernel_size; k_r_itr++) {
     ebc:	fe042023          	sw	x0,-32(x8)
     ec0:	1a00006f          	jal	x0,1060 <cnn_pool+0x2e8>
                    for (k_c_itr = 0; k_c_itr < kernel_size; k_c_itr++) {
     ec4:	fc042e23          	sw	x0,-36(x8)
     ec8:	1800006f          	jal	x0,1048 <cnn_pool+0x2d0>
                        new_candidate = inputs[ch_itr][(stride*o_r_itr)+k_r_itr][(stride*o_c_itr)+k_c_itr];
     ecc:	fec42703          	lw	x14,-20(x8)
     ed0:	06400793          	addi	x15,x0,100
     ed4:	02f707b3          	mul	x15,x14,x15
     ed8:	fcc42703          	lw	x14,-52(x8)
     edc:	00f706b3          	add	x13,x14,x15
     ee0:	fb842703          	lw	x14,-72(x8)
     ee4:	fe842783          	lw	x15,-24(x8)
     ee8:	02f70733          	mul	x14,x14,x15
     eec:	fe042783          	lw	x15,-32(x8)
     ef0:	00f70733          	add	x14,x14,x15
     ef4:	fb842603          	lw	x12,-72(x8)
     ef8:	fe442783          	lw	x15,-28(x8)
     efc:	02f60633          	mul	x12,x12,x15
     f00:	fdc42783          	lw	x15,-36(x8)
     f04:	00f60633          	add	x12,x12,x15
     f08:	00070793          	addi	x15,x14,0
     f0c:	00279793          	slli	x15,x15,0x2
     f10:	00e787b3          	add	x15,x15,x14
     f14:	00c787b3          	add	x15,x15,x12
     f18:	00279793          	slli	x15,x15,0x2
     f1c:	00f687b3          	add	x15,x13,x15
     f20:	0007a783          	lw	x15,0(x15)
     f24:	fcf42a23          	sw	x15,-44(x8)
                        switch (pool_num) {
     f28:	fb042783          	lw	x15,-80(x8)
     f2c:	00078a63          	beq	x15,x0,f40 <cnn_pool+0x1c8>
     f30:	fb042703          	lw	x14,-80(x8)
     f34:	00100793          	addi	x15,x0,1
     f38:	08f70463          	beq	x14,x15,fc0 <cnn_pool+0x248>
     f3c:	1000006f          	jal	x0,103c <cnn_pool+0x2c4>
                            case 0:
                                outputs[ch_itr][o_r_itr][o_c_itr] = (outputs[ch_itr][o_r_itr][o_c_itr] < new_candidate) ? new_candidate : outputs[ch_itr][o_r_itr][o_c_itr];
     f40:	fec42703          	lw	x14,-20(x8)
     f44:	06400793          	addi	x15,x0,100
     f48:	02f707b3          	mul	x15,x14,x15
     f4c:	fc842703          	lw	x14,-56(x8)
     f50:	00f706b3          	add	x13,x14,x15
     f54:	fe842703          	lw	x14,-24(x8)
     f58:	00070793          	addi	x15,x14,0
     f5c:	00279793          	slli	x15,x15,0x2
     f60:	00e787b3          	add	x15,x15,x14
     f64:	fe442703          	lw	x14,-28(x8)
     f68:	00e787b3          	add	x15,x15,x14
     f6c:	00279793          	slli	x15,x15,0x2
     f70:	00f687b3          	add	x15,x13,x15
     f74:	0007a783          	lw	x15,0(x15)
     f78:	fec42683          	lw	x13,-20(x8)
     f7c:	06400713          	addi	x14,x0,100
     f80:	02e68733          	mul	x14,x13,x14
     f84:	fc842683          	lw	x13,-56(x8)
     f88:	00e68633          	add	x12,x13,x14
     f8c:	fd442703          	lw	x14,-44(x8)
     f90:	00f75463          	bge	x14,x15,f98 <cnn_pool+0x220>
     f94:	00078713          	addi	x14,x15,0
     f98:	fe842683          	lw	x13,-24(x8)
     f9c:	00068793          	addi	x15,x13,0
     fa0:	00279793          	slli	x15,x15,0x2
     fa4:	00d787b3          	add	x15,x15,x13
     fa8:	fe442683          	lw	x13,-28(x8)
     fac:	00d787b3          	add	x15,x15,x13
     fb0:	00279793          	slli	x15,x15,0x2
     fb4:	00f607b3          	add	x15,x12,x15
     fb8:	00e7a023          	sw	x14,0(x15)
                                break;
     fbc:	0800006f          	jal	x0,103c <cnn_pool+0x2c4>
                            case 1:
                                outputs[ch_itr][o_r_itr][o_c_itr] += new_candidate;
     fc0:	fec42703          	lw	x14,-20(x8)
     fc4:	06400793          	addi	x15,x0,100
     fc8:	02f707b3          	mul	x15,x14,x15
     fcc:	fc842703          	lw	x14,-56(x8)
     fd0:	00f706b3          	add	x13,x14,x15
     fd4:	fe842703          	lw	x14,-24(x8)
     fd8:	00070793          	addi	x15,x14,0
     fdc:	00279793          	slli	x15,x15,0x2
     fe0:	00e787b3          	add	x15,x15,x14
     fe4:	fe442703          	lw	x14,-28(x8)
     fe8:	00e787b3          	add	x15,x15,x14
     fec:	00279793          	slli	x15,x15,0x2
     ff0:	00f687b3          	add	x15,x13,x15
     ff4:	0007a703          	lw	x14,0(x15)
     ff8:	fec42683          	lw	x13,-20(x8)
     ffc:	06400793          	addi	x15,x0,100
    1000:	02f687b3          	mul	x15,x13,x15
    1004:	fc842683          	lw	x13,-56(x8)
    1008:	00f68633          	add	x12,x13,x15
    100c:	fd442783          	lw	x15,-44(x8)
    1010:	00f706b3          	add	x13,x14,x15
    1014:	fe842703          	lw	x14,-24(x8)
    1018:	00070793          	addi	x15,x14,0
    101c:	00279793          	slli	x15,x15,0x2
    1020:	00e787b3          	add	x15,x15,x14
    1024:	fe442703          	lw	x14,-28(x8)
    1028:	00e787b3          	add	x15,x15,x14
    102c:	00279793          	slli	x15,x15,0x2
    1030:	00f607b3          	add	x15,x12,x15
    1034:	00d7a023          	sw	x13,0(x15)
                                break;
    1038:	00000013          	addi	x0,x0,0
                    for (k_c_itr = 0; k_c_itr < kernel_size; k_c_itr++) {
    103c:	fdc42783          	lw	x15,-36(x8)
    1040:	00178793          	addi	x15,x15,1
    1044:	fcf42e23          	sw	x15,-36(x8)
    1048:	fdc42703          	lw	x14,-36(x8)
    104c:	fbc42783          	lw	x15,-68(x8)
    1050:	e6f74ee3          	blt	x14,x15,ecc <cnn_pool+0x154>
                for (k_r_itr = 0; k_r_itr < kernel_size; k_r_itr++) {
    1054:	fe042783          	lw	x15,-32(x8)
    1058:	00178793          	addi	x15,x15,1
    105c:	fef42023          	sw	x15,-32(x8)
    1060:	fe042703          	lw	x14,-32(x8)
    1064:	fbc42783          	lw	x15,-68(x8)
    1068:	e4f74ee3          	blt	x14,x15,ec4 <cnn_pool+0x14c>
                        }
                    }
        		}
                switch (pool_num) {
    106c:	fb042703          	lw	x14,-80(x8)
    1070:	00100793          	addi	x15,x0,1
    1074:	08f71263          	bne	x14,x15,10f8 <cnn_pool+0x380>
                    case 1:
                        outputs[ch_itr][o_r_itr][o_c_itr] = outputs[ch_itr][o_r_itr][o_c_itr] - (kernel_size * kernel_size);
    1078:	fec42703          	lw	x14,-20(x8)
    107c:	06400793          	addi	x15,x0,100
    1080:	02f707b3          	mul	x15,x14,x15
    1084:	fc842703          	lw	x14,-56(x8)
    1088:	00f706b3          	add	x13,x14,x15
    108c:	fe842703          	lw	x14,-24(x8)
    1090:	00070793          	addi	x15,x14,0
    1094:	00279793          	slli	x15,x15,0x2
    1098:	00e787b3          	add	x15,x15,x14
    109c:	fe442703          	lw	x14,-28(x8)
    10a0:	00e787b3          	add	x15,x15,x14
    10a4:	00279793          	slli	x15,x15,0x2
    10a8:	00f687b3          	add	x15,x13,x15
    10ac:	0007a703          	lw	x14,0(x15)
    10b0:	fbc42783          	lw	x15,-68(x8)
    10b4:	02f787b3          	mul	x15,x15,x15
    10b8:	fec42603          	lw	x12,-20(x8)
    10bc:	06400693          	addi	x13,x0,100
    10c0:	02d606b3          	mul	x13,x12,x13
    10c4:	fc842603          	lw	x12,-56(x8)
    10c8:	00d60633          	add	x12,x12,x13
    10cc:	40f706b3          	sub	x13,x14,x15
    10d0:	fe842703          	lw	x14,-24(x8)
    10d4:	00070793          	addi	x15,x14,0
    10d8:	00279793          	slli	x15,x15,0x2
    10dc:	00e787b3          	add	x15,x15,x14
    10e0:	fe442703          	lw	x14,-28(x8)
    10e4:	00e787b3          	add	x15,x15,x14
    10e8:	00279793          	slli	x15,x15,0x2
    10ec:	00f607b3          	add	x15,x12,x15
    10f0:	00d7a023          	sw	x13,0(x15)
                        break;
    10f4:	00000013          	addi	x0,x0,0
            for (o_c_itr = 0; o_c_itr < output_size; o_c_itr++) {
    10f8:	fe442783          	lw	x15,-28(x8)
    10fc:	00178793          	addi	x15,x15,1
    1100:	fef42223          	sw	x15,-28(x8)
    1104:	fe442703          	lw	x14,-28(x8)
    1108:	fd842783          	lw	x15,-40(x8)
    110c:	ccf74ce3          	blt	x14,x15,de4 <cnn_pool+0x6c>
        for (o_r_itr = 0; o_r_itr < output_size; o_r_itr++) {
    1110:	fe842783          	lw	x15,-24(x8)
    1114:	00178793          	addi	x15,x15,1
    1118:	fef42423          	sw	x15,-24(x8)
    111c:	fe842703          	lw	x14,-24(x8)
    1120:	fd842783          	lw	x15,-40(x8)
    1124:	caf74ce3          	blt	x14,x15,ddc <cnn_pool+0x64>
    for (ch_itr = 0; ch_itr < feature_channel; ch_itr++) {
    1128:	fec42783          	lw	x15,-20(x8)
    112c:	00178793          	addi	x15,x15,1
    1130:	fef42623          	sw	x15,-20(x8)
    1134:	fec42703          	lw	x14,-20(x8)
    1138:	fc442783          	lw	x15,-60(x8)
    113c:	c8f74ce3          	blt	x14,x15,dd4 <cnn_pool+0x5c>
                }
    		}
		}
	}
}
    1140:	00000013          	addi	x0,x0,0
    1144:	00000013          	addi	x0,x0,0
    1148:	04c12403          	lw	x8,76(x2)
    114c:	05010113          	addi	x2,x2,80
    1150:	00008067          	jalr	x0,0(x1)

00001154 <cnn_input_generator>:

void cnn_input_generator(int inputs[5][5][5], int input_channel, int input_size){
    1154:	fd010113          	addi	x2,x2,-48
    1158:	02112623          	sw	x1,44(x2)
    115c:	02812423          	sw	x8,40(x2)
    1160:	03010413          	addi	x8,x2,48
    1164:	fca42e23          	sw	x10,-36(x8)
    1168:	fcb42c23          	sw	x11,-40(x8)
    116c:	fcc42a23          	sw	x12,-44(x8)
	int i_ch_itr, i_r_itr, i_c_itr;
	for (i_ch_itr = 0; i_ch_itr < input_channel; i_ch_itr++) {
    1170:	fe042623          	sw	x0,-20(x8)
    1174:	09c0006f          	jal	x0,1210 <cnn_input_generator+0xbc>
        for (i_r_itr = 0; i_r_itr < input_size; i_r_itr++) {
    1178:	fe042423          	sw	x0,-24(x8)
    117c:	07c0006f          	jal	x0,11f8 <cnn_input_generator+0xa4>
            for (i_c_itr = 0; i_c_itr < input_size; i_c_itr++) {
    1180:	fe042223          	sw	x0,-28(x8)
    1184:	05c0006f          	jal	x0,11e0 <cnn_input_generator+0x8c>
                inputs[i_ch_itr][i_r_itr][i_c_itr] = (random_gen()&15) - 5;
    1188:	fffff097          	auipc	x1,0xfffff
    118c:	34c080e7          	jalr	x1,844(x1) # 4d4 <random_gen>
    1190:	00050793          	addi	x15,x10,0
    1194:	00f7f793          	andi	x15,x15,15
    1198:	fec42683          	lw	x13,-20(x8)
    119c:	06400713          	addi	x14,x0,100
    11a0:	02e68733          	mul	x14,x13,x14
    11a4:	fdc42683          	lw	x13,-36(x8)
    11a8:	00e68633          	add	x12,x13,x14
    11ac:	ffb78693          	addi	x13,x15,-5
    11b0:	fe842703          	lw	x14,-24(x8)
    11b4:	00070793          	addi	x15,x14,0
    11b8:	00279793          	slli	x15,x15,0x2
    11bc:	00e787b3          	add	x15,x15,x14
    11c0:	fe442703          	lw	x14,-28(x8)
    11c4:	00e787b3          	add	x15,x15,x14
    11c8:	00279793          	slli	x15,x15,0x2
    11cc:	00f607b3          	add	x15,x12,x15
    11d0:	00d7a023          	sw	x13,0(x15)
            for (i_c_itr = 0; i_c_itr < input_size; i_c_itr++) {
    11d4:	fe442783          	lw	x15,-28(x8)
    11d8:	00178793          	addi	x15,x15,1
    11dc:	fef42223          	sw	x15,-28(x8)
    11e0:	fe442703          	lw	x14,-28(x8)
    11e4:	fd442783          	lw	x15,-44(x8)
    11e8:	faf740e3          	blt	x14,x15,1188 <cnn_input_generator+0x34>
        for (i_r_itr = 0; i_r_itr < input_size; i_r_itr++) {
    11ec:	fe842783          	lw	x15,-24(x8)
    11f0:	00178793          	addi	x15,x15,1
    11f4:	fef42423          	sw	x15,-24(x8)
    11f8:	fe842703          	lw	x14,-24(x8)
    11fc:	fd442783          	lw	x15,-44(x8)
    1200:	f8f740e3          	blt	x14,x15,1180 <cnn_input_generator+0x2c>
	for (i_ch_itr = 0; i_ch_itr < input_channel; i_ch_itr++) {
    1204:	fec42783          	lw	x15,-20(x8)
    1208:	00178793          	addi	x15,x15,1
    120c:	fef42623          	sw	x15,-20(x8)
    1210:	fec42703          	lw	x14,-20(x8)
    1214:	fd842783          	lw	x15,-40(x8)
    1218:	f6f740e3          	blt	x14,x15,1178 <cnn_input_generator+0x24>
            }
        }
    }
}
    121c:	00000013          	addi	x0,x0,0
    1220:	00000013          	addi	x0,x0,0
    1224:	02c12083          	lw	x1,44(x2)
    1228:	02812403          	lw	x8,40(x2)
    122c:	03010113          	addi	x2,x2,48
    1230:	00008067          	jalr	x0,0(x1)

00001234 <cnn_weight_generator>:

void cnn_weight_generator(int weights[5][5][5][5], int biasses[5], int input_channel, int output_channel, int kernel_size){
    1234:	fc010113          	addi	x2,x2,-64
    1238:	02112e23          	sw	x1,60(x2)
    123c:	02812c23          	sw	x8,56(x2)
    1240:	04010413          	addi	x8,x2,64
    1244:	fca42e23          	sw	x10,-36(x8)
    1248:	fcb42c23          	sw	x11,-40(x8)
    124c:	fcc42a23          	sw	x12,-44(x8)
    1250:	fcd42823          	sw	x13,-48(x8)
    1254:	fce42623          	sw	x14,-52(x8)
	int o_ch_itr, i_ch_itr, k_r_itr, k_c_itr;
	for (o_ch_itr = 0; o_ch_itr < output_channel; o_ch_itr++) {
    1258:	fe042623          	sw	x0,-20(x8)
    125c:	1000006f          	jal	x0,135c <cnn_weight_generator+0x128>
        biasses[o_ch_itr] = (random_gen()&15) - 5;
    1260:	fffff097          	auipc	x1,0xfffff
    1264:	274080e7          	jalr	x1,628(x1) # 4d4 <random_gen>
    1268:	00050793          	addi	x15,x10,0
    126c:	00f7f713          	andi	x14,x15,15
    1270:	fec42783          	lw	x15,-20(x8)
    1274:	00279793          	slli	x15,x15,0x2
    1278:	fd842683          	lw	x13,-40(x8)
    127c:	00f687b3          	add	x15,x13,x15
    1280:	ffb70713          	addi	x14,x14,-5
    1284:	00e7a023          	sw	x14,0(x15)
        for (i_ch_itr = 0; i_ch_itr < input_channel; i_ch_itr++) {
    1288:	fe042423          	sw	x0,-24(x8)
    128c:	0b80006f          	jal	x0,1344 <cnn_weight_generator+0x110>
            for (k_r_itr = 0; k_r_itr < kernel_size; k_r_itr++) {
    1290:	fe042223          	sw	x0,-28(x8)
    1294:	0980006f          	jal	x0,132c <cnn_weight_generator+0xf8>
                for (k_c_itr = 0; k_c_itr < kernel_size; k_c_itr++) {
    1298:	fe042023          	sw	x0,-32(x8)
    129c:	0780006f          	jal	x0,1314 <cnn_weight_generator+0xe0>
                    weights[o_ch_itr][i_ch_itr][k_r_itr][k_c_itr] = (random_gen()&15) - 5;
    12a0:	fffff097          	auipc	x1,0xfffff
    12a4:	234080e7          	jalr	x1,564(x1) # 4d4 <random_gen>
    12a8:	00050793          	addi	x15,x10,0
    12ac:	00f7f793          	andi	x15,x15,15
    12b0:	fec42683          	lw	x13,-20(x8)
    12b4:	1f400713          	addi	x14,x0,500
    12b8:	02e68733          	mul	x14,x13,x14
    12bc:	fdc42683          	lw	x13,-36(x8)
    12c0:	00e685b3          	add	x11,x13,x14
    12c4:	ffb78613          	addi	x12,x15,-5
    12c8:	fe442783          	lw	x15,-28(x8)
    12cc:	fe842683          	lw	x13,-24(x8)
    12d0:	00078713          	addi	x14,x15,0
    12d4:	00271713          	slli	x14,x14,0x2
    12d8:	00f70733          	add	x14,x14,x15
    12dc:	00068793          	addi	x15,x13,0
    12e0:	00179793          	slli	x15,x15,0x1
    12e4:	00d787b3          	add	x15,x15,x13
    12e8:	00379793          	slli	x15,x15,0x3
    12ec:	00d787b3          	add	x15,x15,x13
    12f0:	00f70733          	add	x14,x14,x15
    12f4:	fe042783          	lw	x15,-32(x8)
    12f8:	00f707b3          	add	x15,x14,x15
    12fc:	00279793          	slli	x15,x15,0x2
    1300:	00f587b3          	add	x15,x11,x15
    1304:	00c7a023          	sw	x12,0(x15)
                for (k_c_itr = 0; k_c_itr < kernel_size; k_c_itr++) {
    1308:	fe042783          	lw	x15,-32(x8)
    130c:	00178793          	addi	x15,x15,1
    1310:	fef42023          	sw	x15,-32(x8)
    1314:	fe042703          	lw	x14,-32(x8)
    1318:	fcc42783          	lw	x15,-52(x8)
    131c:	f8f742e3          	blt	x14,x15,12a0 <cnn_weight_generator+0x6c>
            for (k_r_itr = 0; k_r_itr < kernel_size; k_r_itr++) {
    1320:	fe442783          	lw	x15,-28(x8)
    1324:	00178793          	addi	x15,x15,1
    1328:	fef42223          	sw	x15,-28(x8)
    132c:	fe442703          	lw	x14,-28(x8)
    1330:	fcc42783          	lw	x15,-52(x8)
    1334:	f6f742e3          	blt	x14,x15,1298 <cnn_weight_generator+0x64>
        for (i_ch_itr = 0; i_ch_itr < input_channel; i_ch_itr++) {
    1338:	fe842783          	lw	x15,-24(x8)
    133c:	00178793          	addi	x15,x15,1
    1340:	fef42423          	sw	x15,-24(x8)
    1344:	fe842703          	lw	x14,-24(x8)
    1348:	fd442783          	lw	x15,-44(x8)
    134c:	f4f742e3          	blt	x14,x15,1290 <cnn_weight_generator+0x5c>
	for (o_ch_itr = 0; o_ch_itr < output_channel; o_ch_itr++) {
    1350:	fec42783          	lw	x15,-20(x8)
    1354:	00178793          	addi	x15,x15,1
    1358:	fef42623          	sw	x15,-20(x8)
    135c:	fec42703          	lw	x14,-20(x8)
    1360:	fd042783          	lw	x15,-48(x8)
    1364:	eef74ee3          	blt	x14,x15,1260 <cnn_weight_generator+0x2c>
                }
            }
        }
    }
}
    1368:	00000013          	addi	x0,x0,0
    136c:	00000013          	addi	x0,x0,0
    1370:	03c12083          	lw	x1,60(x2)
    1374:	03812403          	lw	x8,56(x2)
    1378:	04010113          	addi	x2,x2,64
    137c:	00008067          	jalr	x0,0(x1)

00001380 <cnn_to_fc>:

void cnn_to_fc(int cnn_feature[5][5][5], int cnn_feature_channel, int cnn_feature_size, int fc_feature[5]){
    1380:	fd010113          	addi	x2,x2,-48
    1384:	02812623          	sw	x8,44(x2)
    1388:	03010413          	addi	x8,x2,48
    138c:	fca42e23          	sw	x10,-36(x8)
    1390:	fcb42c23          	sw	x11,-40(x8)
    1394:	fcc42a23          	sw	x12,-44(x8)
    1398:	fcd42823          	sw	x13,-48(x8)
	int ch_itr, r_itr, c_itr;
	for (ch_itr = 0; ch_itr < cnn_feature_channel; ch_itr++) {
    139c:	fe042623          	sw	x0,-20(x8)
    13a0:	0c40006f          	jal	x0,1464 <cnn_to_fc+0xe4>
        for (r_itr = 0; r_itr < cnn_feature_size; r_itr++) {
    13a4:	fe042423          	sw	x0,-24(x8)
    13a8:	0a40006f          	jal	x0,144c <cnn_to_fc+0xcc>
            for (c_itr = 0; c_itr < cnn_feature_size; c_itr++) {
    13ac:	fe042223          	sw	x0,-28(x8)
    13b0:	0840006f          	jal	x0,1434 <cnn_to_fc+0xb4>
                fc_feature[(ch_itr*cnn_feature_size*cnn_feature_size)+(r_itr*cnn_feature_size)+c_itr] = cnn_feature[ch_itr][r_itr][c_itr];
    13b4:	fec42703          	lw	x14,-20(x8)
    13b8:	06400793          	addi	x15,x0,100
    13bc:	02f707b3          	mul	x15,x14,x15
    13c0:	fdc42703          	lw	x14,-36(x8)
    13c4:	00f70633          	add	x12,x14,x15
    13c8:	fec42703          	lw	x14,-20(x8)
    13cc:	fd442783          	lw	x15,-44(x8)
    13d0:	02f70733          	mul	x14,x14,x15
    13d4:	fd442783          	lw	x15,-44(x8)
    13d8:	02f70733          	mul	x14,x14,x15
    13dc:	fe842683          	lw	x13,-24(x8)
    13e0:	fd442783          	lw	x15,-44(x8)
    13e4:	02f687b3          	mul	x15,x13,x15
    13e8:	00f70733          	add	x14,x14,x15
    13ec:	fe442783          	lw	x15,-28(x8)
    13f0:	00f707b3          	add	x15,x14,x15
    13f4:	00279793          	slli	x15,x15,0x2
    13f8:	fd042703          	lw	x14,-48(x8)
    13fc:	00f706b3          	add	x13,x14,x15
    1400:	fe842703          	lw	x14,-24(x8)
    1404:	00070793          	addi	x15,x14,0
    1408:	00279793          	slli	x15,x15,0x2
    140c:	00e787b3          	add	x15,x15,x14
    1410:	fe442703          	lw	x14,-28(x8)
    1414:	00e787b3          	add	x15,x15,x14
    1418:	00279793          	slli	x15,x15,0x2
    141c:	00f607b3          	add	x15,x12,x15
    1420:	0007a783          	lw	x15,0(x15)
    1424:	00f6a023          	sw	x15,0(x13)
            for (c_itr = 0; c_itr < cnn_feature_size; c_itr++) {
    1428:	fe442783          	lw	x15,-28(x8)
    142c:	00178793          	addi	x15,x15,1
    1430:	fef42223          	sw	x15,-28(x8)
    1434:	fe442703          	lw	x14,-28(x8)
    1438:	fd442783          	lw	x15,-44(x8)
    143c:	f6f74ce3          	blt	x14,x15,13b4 <cnn_to_fc+0x34>
        for (r_itr = 0; r_itr < cnn_feature_size; r_itr++) {
    1440:	fe842783          	lw	x15,-24(x8)
    1444:	00178793          	addi	x15,x15,1
    1448:	fef42423          	sw	x15,-24(x8)
    144c:	fe842703          	lw	x14,-24(x8)
    1450:	fd442783          	lw	x15,-44(x8)
    1454:	f4f74ce3          	blt	x14,x15,13ac <cnn_to_fc+0x2c>
	for (ch_itr = 0; ch_itr < cnn_feature_channel; ch_itr++) {
    1458:	fec42783          	lw	x15,-20(x8)
    145c:	00178793          	addi	x15,x15,1
    1460:	fef42623          	sw	x15,-20(x8)
    1464:	fec42703          	lw	x14,-20(x8)
    1468:	fd842783          	lw	x15,-40(x8)
    146c:	f2f74ce3          	blt	x14,x15,13a4 <cnn_to_fc+0x24>
            }
        }
    }
}
    1470:	00000013          	addi	x0,x0,0
    1474:	00000013          	addi	x0,x0,0
    1478:	02c12403          	lw	x8,44(x2)
    147c:	03010113          	addi	x2,x2,48
    1480:	00008067          	jalr	x0,0(x1)

00001484 <main>:


int main(){
    1484:	81010113          	addi	x2,x2,-2032
    1488:	7e112623          	sw	x1,2028(x2)
    148c:	7e812423          	sw	x8,2024(x2)
    1490:	7f010413          	addi	x8,x2,2032
    1494:	94010113          	addi	x2,x2,-1728
    int cnn_af_type;
    int cnn_pool_type;

	int itr;

    for (itr = 0; itr < TEST_ITR; itr++) {
    1498:	fe042623          	sw	x0,-20(x8)
    149c:	2180006f          	jal	x0,16b4 <main+0x230>
        //layer 1
        cnn_output_channel = 5;
    14a0:	00500793          	addi	x15,x0,5
    14a4:	fef42423          	sw	x15,-24(x8)
        cnn_input_channel = 5;
    14a8:	00500793          	addi	x15,x0,5
    14ac:	fef42223          	sw	x15,-28(x8)
        cnn_input_size = 5;
    14b0:	00500793          	addi	x15,x0,5
    14b4:	fef42023          	sw	x15,-32(x8)
        cnn_kernel_size = 2;
    14b8:	00200793          	addi	x15,x0,2
    14bc:	fcf42e23          	sw	x15,-36(x8)
        cnn_stride = 1;
    14c0:	00100793          	addi	x15,x0,1
    14c4:	fcf42c23          	sw	x15,-40(x8)
        cnn_zero_padd = 0;
    14c8:	fc042a23          	sw	x0,-44(x8)
        cnn_af_type = 2;
    14cc:	00200793          	addi	x15,x0,2
    14d0:	fcf42823          	sw	x15,-48(x8)

        cnn_input_generator(cnn_inputs, cnn_input_channel, cnn_input_size);
    14d4:	fffff7b7          	lui	x15,0xfffff
    14d8:	36478793          	addi	x15,x15,868 # fffff364 <_sp+0xfffef364>
    14dc:	ff078793          	addi	x15,x15,-16
    14e0:	008787b3          	add	x15,x15,x8
    14e4:	fe042603          	lw	x12,-32(x8)
    14e8:	fe442583          	lw	x11,-28(x8)
    14ec:	00078513          	addi	x10,x15,0
    14f0:	00000097          	auipc	x1,0x0
    14f4:	c64080e7          	jalr	x1,-924(x1) # 1154 <cnn_input_generator>
        cnn_weight_generator(cnn_weights, cnn_biasses, cnn_input_channel, cnn_output_channel, cnn_kernel_size);
    14f8:	fffff7b7          	lui	x15,0xfffff
    14fc:	55878793          	addi	x15,x15,1368 # fffff558 <_sp+0xfffef558>
    1500:	ff078793          	addi	x15,x15,-16
    1504:	008785b3          	add	x11,x15,x8
    1508:	fffff7b7          	lui	x15,0xfffff
    150c:	56c78793          	addi	x15,x15,1388 # fffff56c <_sp+0xfffef56c>
    1510:	ff078793          	addi	x15,x15,-16
    1514:	008787b3          	add	x15,x15,x8
    1518:	fdc42703          	lw	x14,-36(x8)
    151c:	fe842683          	lw	x13,-24(x8)
    1520:	fe442603          	lw	x12,-28(x8)
    1524:	00078513          	addi	x10,x15,0
    1528:	00000097          	auipc	x1,0x0
    152c:	d0c080e7          	jalr	x1,-756(x1) # 1234 <cnn_weight_generator>
        cnn_layer(cnn_weights, cnn_biasses, cnn_inputs, cnn_outputs, cnn_input_channel, cnn_output_channel, cnn_input_size, cnn_kernel_size, cnn_stride, cnn_zero_padd, cnn_af_type);
    1530:	fffff7b7          	lui	x15,0xfffff
    1534:	17078793          	addi	x15,x15,368 # fffff170 <_sp+0xfffef170>
    1538:	ff078793          	addi	x15,x15,-16
    153c:	008786b3          	add	x13,x15,x8
    1540:	fffff7b7          	lui	x15,0xfffff
    1544:	36478793          	addi	x15,x15,868 # fffff364 <_sp+0xfffef364>
    1548:	ff078793          	addi	x15,x15,-16
    154c:	00878633          	add	x12,x15,x8
    1550:	fffff7b7          	lui	x15,0xfffff
    1554:	55878793          	addi	x15,x15,1368 # fffff558 <_sp+0xfffef558>
    1558:	ff078793          	addi	x15,x15,-16
    155c:	008785b3          	add	x11,x15,x8
    1560:	fffff7b7          	lui	x15,0xfffff
    1564:	56c78793          	addi	x15,x15,1388 # fffff56c <_sp+0xfffef56c>
    1568:	ff078793          	addi	x15,x15,-16
    156c:	00878533          	add	x10,x15,x8
    1570:	fd042783          	lw	x15,-48(x8)
    1574:	00f12423          	sw	x15,8(x2)
    1578:	fd442783          	lw	x15,-44(x8)
    157c:	00f12223          	sw	x15,4(x2)
    1580:	fd842783          	lw	x15,-40(x8)
    1584:	00f12023          	sw	x15,0(x2)
    1588:	fdc42883          	lw	x17,-36(x8)
    158c:	fe042803          	lw	x16,-32(x8)
    1590:	fe842783          	lw	x15,-24(x8)
    1594:	fe442703          	lw	x14,-28(x8)
    1598:	fffff097          	auipc	x1,0xfffff
    159c:	378080e7          	jalr	x1,888(x1) # 910 <cnn_layer>

        cnn_output_channel = 5;
    15a0:	00500793          	addi	x15,x0,5
    15a4:	fef42423          	sw	x15,-24(x8)
        cnn_input_channel = 5;
    15a8:	00500793          	addi	x15,x0,5
    15ac:	fef42223          	sw	x15,-28(x8)
        cnn_input_size = 4;
    15b0:	00400793          	addi	x15,x0,4
    15b4:	fef42023          	sw	x15,-32(x8)
        cnn_kernel_size = 2;
    15b8:	00200793          	addi	x15,x0,2
    15bc:	fcf42e23          	sw	x15,-36(x8)
        cnn_stride = 2;
    15c0:	00200793          	addi	x15,x0,2
    15c4:	fcf42c23          	sw	x15,-40(x8)
        cnn_zero_padd = 0;
    15c8:	fc042a23          	sw	x0,-44(x8)
        cnn_pool_type = 0;
    15cc:	fc042623          	sw	x0,-52(x8)

        cnn_pool(cnn_outputs, cnn_inputs, cnn_input_channel, cnn_input_size, cnn_kernel_size, cnn_stride, cnn_zero_padd, cnn_pool_type);
    15d0:	fffff7b7          	lui	x15,0xfffff
    15d4:	36478793          	addi	x15,x15,868 # fffff364 <_sp+0xfffef364>
    15d8:	ff078793          	addi	x15,x15,-16
    15dc:	008785b3          	add	x11,x15,x8
    15e0:	fffff7b7          	lui	x15,0xfffff
    15e4:	17078793          	addi	x15,x15,368 # fffff170 <_sp+0xfffef170>
    15e8:	ff078793          	addi	x15,x15,-16
    15ec:	00878533          	add	x10,x15,x8
    15f0:	fcc42883          	lw	x17,-52(x8)
    15f4:	fd442803          	lw	x16,-44(x8)
    15f8:	fd842783          	lw	x15,-40(x8)
    15fc:	fdc42703          	lw	x14,-36(x8)
    1600:	fe042683          	lw	x13,-32(x8)
    1604:	fe442603          	lw	x12,-28(x8)
    1608:	fffff097          	auipc	x1,0xfffff
    160c:	770080e7          	jalr	x1,1904(x1) # d78 <cnn_pool>

        //layer conversion
        cnn_to_fc(cnn_inputs, 5, 1, fc_inputs);
    1610:	f3440713          	addi	x14,x8,-204
    1614:	fffff7b7          	lui	x15,0xfffff
    1618:	36478793          	addi	x15,x15,868 # fffff364 <_sp+0xfffef364>
    161c:	ff078793          	addi	x15,x15,-16
    1620:	008787b3          	add	x15,x15,x8
    1624:	00070693          	addi	x13,x14,0
    1628:	00100613          	addi	x12,x0,1
    162c:	00500593          	addi	x11,x0,5
    1630:	00078513          	addi	x10,x15,0
    1634:	00000097          	auipc	x1,0x0
    1638:	d4c080e7          	jalr	x1,-692(x1) # 1380 <cnn_to_fc>

        //first FC layer
        fc_input_num = 5;
    163c:	00500793          	addi	x15,x0,5
    1640:	fcf42423          	sw	x15,-56(x8)
        fc_output_num = 5;
    1644:	00500793          	addi	x15,x0,5
    1648:	fcf42223          	sw	x15,-60(x8)
        fc_af_type = 0;
    164c:	fc042023          	sw	x0,-64(x8)

        fc_input_generator(fc_inputs, fc_input_num);
    1650:	f3440793          	addi	x15,x8,-204
    1654:	fc842583          	lw	x11,-56(x8)
    1658:	00078513          	addi	x10,x15,0
    165c:	fffff097          	auipc	x1,0xfffff
    1660:	0d4080e7          	jalr	x1,212(x1) # 730 <fc_input_generator>
        fc_weight_generator(fc_weights, fc_biasses, fc_input_num, fc_output_num);
    1664:	f4840713          	addi	x14,x8,-184
    1668:	f5c40793          	addi	x15,x8,-164
    166c:	fc442683          	lw	x13,-60(x8)
    1670:	fc842603          	lw	x12,-56(x8)
    1674:	00070593          	addi	x11,x14,0
    1678:	00078513          	addi	x10,x15,0
    167c:	fffff097          	auipc	x1,0xfffff
    1680:	12c080e7          	jalr	x1,300(x1) # 7a8 <fc_weight_generator>
        fc_layer(fc_weights, fc_biasses, fc_inputs, fc_outputs, fc_input_num, fc_output_num, fc_af_type);
    1684:	f2040693          	addi	x13,x8,-224
    1688:	f3440613          	addi	x12,x8,-204
    168c:	f4840593          	addi	x11,x8,-184
    1690:	f5c40513          	addi	x10,x8,-164
    1694:	fc042803          	lw	x16,-64(x8)
    1698:	fc442783          	lw	x15,-60(x8)
    169c:	fc842703          	lw	x14,-56(x8)
    16a0:	fffff097          	auipc	x1,0xfffff
    16a4:	ed8080e7          	jalr	x1,-296(x1) # 578 <fc_layer>
    for (itr = 0; itr < TEST_ITR; itr++) {
    16a8:	fec42783          	lw	x15,-20(x8)
    16ac:	00178793          	addi	x15,x15,1
    16b0:	fef42623          	sw	x15,-20(x8)
    16b4:	fec42703          	lw	x14,-20(x8)
    16b8:	00200793          	addi	x15,x0,2
    16bc:	dee7d2e3          	bge	x15,x14,14a0 <main+0x1c>

    }

	return 0;
    16c0:	00000793          	addi	x15,x0,0

}
    16c4:	00078513          	addi	x10,x15,0
    16c8:	6c010113          	addi	x2,x2,1728
    16cc:	7ec12083          	lw	x1,2028(x2)
    16d0:	7e812403          	lw	x8,2024(x2)
    16d4:	7f010113          	addi	x2,x2,2032
    16d8:	00008067          	jalr	x0,0(x1)

000016dc <memset>:
    16dc:	433d                	c.li	x6,15
    16de:	872a                	c.mv	x14,x10
    16e0:	02c37363          	bgeu	x6,x12,1706 <memset+0x2a>
    16e4:	00f77793          	andi	x15,x14,15
    16e8:	efbd                	c.bnez	x15,1766 <memset+0x8a>
    16ea:	e5ad                	c.bnez	x11,1754 <memset+0x78>
    16ec:	ff067693          	andi	x13,x12,-16
    16f0:	8a3d                	c.andi	x12,15
    16f2:	96ba                	c.add	x13,x14
    16f4:	c30c                	c.sw	x11,0(x14)
    16f6:	c34c                	c.sw	x11,4(x14)
    16f8:	c70c                	c.sw	x11,8(x14)
    16fa:	c74c                	c.sw	x11,12(x14)
    16fc:	0741                	c.addi	x14,16
    16fe:	fed76be3          	bltu	x14,x13,16f4 <memset+0x18>
    1702:	e211                	c.bnez	x12,1706 <memset+0x2a>
    1704:	8082                	c.jr	x1
    1706:	40c306b3          	sub	x13,x6,x12
    170a:	068a                	c.slli	x13,0x2
    170c:	00000297          	auipc	x5,0x0
    1710:	9696                	c.add	x13,x5
    1712:	00a68067          	jalr	x0,10(x13)
    1716:	00b70723          	sb	x11,14(x14)
    171a:	00b706a3          	sb	x11,13(x14)
    171e:	00b70623          	sb	x11,12(x14)
    1722:	00b705a3          	sb	x11,11(x14)
    1726:	00b70523          	sb	x11,10(x14)
    172a:	00b704a3          	sb	x11,9(x14)
    172e:	00b70423          	sb	x11,8(x14)
    1732:	00b703a3          	sb	x11,7(x14)
    1736:	00b70323          	sb	x11,6(x14)
    173a:	00b702a3          	sb	x11,5(x14)
    173e:	00b70223          	sb	x11,4(x14)
    1742:	00b701a3          	sb	x11,3(x14)
    1746:	00b70123          	sb	x11,2(x14)
    174a:	00b700a3          	sb	x11,1(x14)
    174e:	00b70023          	sb	x11,0(x14)
    1752:	8082                	c.jr	x1
    1754:	0ff5f593          	andi	x11,x11,255
    1758:	00859693          	slli	x13,x11,0x8
    175c:	8dd5                	c.or	x11,x13
    175e:	01059693          	slli	x13,x11,0x10
    1762:	8dd5                	c.or	x11,x13
    1764:	b761                	c.j	16ec <memset+0x10>
    1766:	00279693          	slli	x13,x15,0x2
    176a:	00000297          	auipc	x5,0x0
    176e:	9696                	c.add	x13,x5
    1770:	8286                	c.mv	x5,x1
    1772:	fa8680e7          	jalr	x1,-88(x13)
    1776:	8096                	c.mv	x1,x5
    1778:	17c1                	c.addi	x15,-16
    177a:	8f1d                	c.sub	x14,x15
    177c:	963e                	c.add	x12,x15
    177e:	f8c374e3          	bgeu	x6,x12,1706 <memset+0x2a>
    1782:	b7a5                	c.j	16ea <memset+0xe>
	...

Disassembly of section .sdata:

000017e0 <next_index>:
static void* next_index = (void *)heap; //the next place to be allocated
    17e0:	1818                	c.addi4spn	x14,x2,48
	...

000017e4 <avail_mem>:
static unsigned int avail_mem = sizeof(heap); //the most CONTIGUOUS memory available
    17e4:	4000                	c.lw	x8,0(x8)
	...

000017e8 <lfsr>:
unsigned int lfsr = 0xACE1u;
    17e8:	ace1                	c.j	1ac0 <heap+0x2a8>
	...

Disassembly of section .bss:

00001800 <period>:
unsigned period = 0;
    1800:	0000                	c.unimp
	...

00001804 <s>:
	...

00001818 <heap>:
	...

00001fc0 <__global_pointer$>:
	...

00005818 <base>:
	...

00005820 <freep>:
static Header *freep = NULL; //start of the free list
    5820:	0000                	c.unimp
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
	nop
   0:	2941                	c.jal	490 <tj_calloc+0xc>
   2:	0000                	c.unimp
	la ra, exit
   4:	7200                	.2byte	0x7200
   6:	7369                	c.lui	x6,0xffffa
   8:	01007663          	bgeu	x0,x16,14 <crt+0x14>
	la sp, _sp
   c:	001f 0000 1004      	.byte	0x1f, 0x00, 0x00, 0x00, 0x04, 0x10
  12:	7205                	c.lui	x4,0xfffe1
	mv s0, sp
  14:	3376                	.2byte	0x3376
  16:	6932                	.2byte	0x6932
	la gp, __global_pointer$
  18:	7032                	.2byte	0x7032
  1a:	5f30                	c.lw	x12,120(x14)
  1c:	326d                	c.jal	fffff9c6 <_sp+0xfffef9c6>
  1e:	3070                	.2byte	0x3070
	li tp, 0
  20:	635f 7032 0030      	.byte	0x5f, 0x63, 0x32, 0x70, 0x30, 0x00
	li t0, 0
  26:	0108                	c.addi4spn	x10,x2,128
	li t1, 0
  28:	0b0a                	c.slli	x22,0x2

Disassembly of section .comment:

00000000 <.comment>:
	nop
   0:	3a434347          	.4byte	0x3a434347
	la ra, exit
   4:	2820                	.2byte	0x2820
   6:	31202967          	.4byte	0x31202967
   a:	2e31                	c.jal	326 <tj_malloc+0x36>
	la sp, _sp
   c:	2e31                	c.jal	328 <tj_malloc+0x38>
   e:	0030                	c.addi4spn	x12,x2,8

Disassembly of section .debug_line:

00000000 <.debug_line>:
	nop
       0:	0124                	c.addi4spn	x9,x2,136
       2:	0000                	c.unimp
	la ra, exit
       4:	0005                	c.addi	x0,1
       6:	0004                	.2byte	0x4
       8:	002a                	c.slli	x0,0xa
       a:	0000                	c.unimp
	la sp, _sp
       c:	0101                	c.addi	x2,0
       e:	fb01                	c.bnez	x14,ffffff1e <_sp+0xfffeff1e>
      10:	0d0e                	c.slli	x26,0x3
      12:	0100                	c.addi4spn	x8,x2,128
	mv s0, sp
      14:	0101                	c.addi	x2,0
      16:	0001                	c.addi	x0,0
	la gp, __global_pointer$
      18:	0000                	c.unimp
      1a:	0001                	c.addi	x0,0
      1c:	0100                	c.addi4spn	x8,x2,128
      1e:	0101                	c.addi	x2,0
	li tp, 0
      20:	011f 0000 0000      	.byte	0x1f, 0x01, 0x00, 0x00, 0x00, 0x00
	li t0, 0
      26:	0102                	c.slli64	x2
	li t1, 0
      28:	021f 020f 004b      	.byte	0x1f, 0x02, 0x0f, 0x02, 0x4b, 0x00
	li t2, 0
      2e:	0000                	c.unimp
	li s1, 0
      30:	4b00                	c.lw	x8,16(x14)
      32:	0000                	c.unimp
	li a0, 0
      34:	0000                	c.unimp
      36:	0500                	c.addi4spn	x8,x2,640
	li a1, 0
      38:	0002                	c.slli64	x0
      3a:	0000                	c.unimp
	li a2, 0
      3c:	0300                	c.addi4spn	x8,x2,384
      3e:	010d                	c.addi	x2,3
	li a3, 0
      40:	04090103          	lb	x2,64(x18)
	li a4, 0
      44:	0100                	c.addi4spn	x8,x2,128
      46:	08090103          	lb	x2,128(x18)
	li a5, 0
      4a:	0100                	c.addi4spn	x8,x2,128
	li a6, 0
      4c:	08090103          	lb	x2,128(x18)
	li a7, 0
      50:	0100                	c.addi4spn	x8,x2,128
      52:	04090103          	lb	x2,64(x18)
	li s2, 0
      56:	0100                	c.addi4spn	x8,x2,128
	li s3, 0
      58:	08090103          	lb	x2,128(x18)
	li s4, 0
      5c:	0100                	c.addi4spn	x8,x2,128
      5e:	04090103          	lb	x2,64(x18)
	li s5, 0
      62:	0100                	c.addi4spn	x8,x2,128
	li s6, 0
      64:	04090103          	lb	x2,64(x18)
	li s7, 0
      68:	0100                	c.addi4spn	x8,x2,128
      6a:	04090103          	lb	x2,64(x18)
	li s8, 0
      6e:	0100                	c.addi4spn	x8,x2,128
	li s9, 0
      70:	04090103          	lb	x2,64(x18)
	li s10, 0
      74:	0100                	c.addi4spn	x8,x2,128
      76:	04090103          	lb	x2,64(x18)
	li s11, 0
      7a:	0100                	c.addi4spn	x8,x2,128
	li t3, 0
      7c:	04090103          	lb	x2,64(x18)
	li t4, 0
      80:	0100                	c.addi4spn	x8,x2,128
      82:	04090103          	lb	x2,64(x18)
	li t5, 0
      86:	0100                	c.addi4spn	x8,x2,128
	li t6, 0
      88:	04090103          	lb	x2,64(x18)
	j main
      8c:	0100                	c.addi4spn	x8,x2,128
      8e:	04090103          	lb	x2,64(x18)
      92:	0100                	c.addi4spn	x8,x2,128
      94:	04090103          	lb	x2,64(x18)
      98:	0100                	c.addi4spn	x8,x2,128
      9a:	04090103          	lb	x2,64(x18)
      9e:	0100                	c.addi4spn	x8,x2,128
	la sp, _sp
      a0:	04090103          	lb	x2,64(x18)
      a4:	0100                	c.addi4spn	x8,x2,128
      a6:	04090103          	lb	x2,64(x18)
	sw a0, -8(sp)
      aa:	0100                	c.addi4spn	x8,x2,128
	nop
      ac:	04090103          	lb	x2,64(x18)
	wfi
      b0:	0100                	c.addi4spn	x8,x2,128
      b2:	04090103          	lb	x2,64(x18)
void tj_free(void *mem) {
      b6:	0100                	c.addi4spn	x8,x2,128
      b8:	04090103          	lb	x2,64(x18)
      bc:	0100                	c.addi4spn	x8,x2,128
      be:	04090103          	lb	x2,64(x18)
      c2:	0100                	c.addi4spn	x8,x2,128
      c4:	04090103          	lb	x2,64(x18)
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
      c8:	0100                	c.addi4spn	x8,x2,128
      ca:	04090103          	lb	x2,64(x18)
      ce:	0100                	c.addi4spn	x8,x2,128
      d0:	04090103          	lb	x2,64(x18)
      d4:	0100                	c.addi4spn	x8,x2,128
      d6:	04090103          	lb	x2,64(x18)
      da:	0100                	c.addi4spn	x8,x2,128
      dc:	04090103          	lb	x2,64(x18)
      e0:	0100                	c.addi4spn	x8,x2,128
      e2:	04090103          	lb	x2,64(x18)
      e6:	0100                	c.addi4spn	x8,x2,128
		exit(1);
      e8:	04090103          	lb	x2,64(x18)
      ec:	0100                	c.addi4spn	x8,x2,128
      ee:	04090103          	lb	x2,64(x18)
      f2:	0100                	c.addi4spn	x8,x2,128
	bp = (Header *)mem - 1; //point to block header
      f4:	04090103          	lb	x2,64(x18)
      f8:	0100                	c.addi4spn	x8,x2,128
      fa:	04090103          	lb	x2,64(x18)
      fe:	0100                	c.addi4spn	x8,x2,128
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
     100:	0409                	c.addi	x8,2
     102:	0000                	c.unimp
     104:	0101                	c.addi	x2,0
     106:	0500                	c.addi4spn	x8,x2,640
     108:	a002                	.2byte	0xa002
     10a:	0000                	c.unimp
     10c:	0300                	c.addi4spn	x8,x2,384
     10e:	01030133          	add	x2,x6,x16
		if (p >= p->next && (bp > p || bp < p->next))
     112:	0809                	c.addi	x16,2
     114:	0100                	c.addi4spn	x8,x2,128
     116:	04090103          	lb	x2,64(x18)
     11a:	0100                	c.addi4spn	x8,x2,128
     11c:	04090103          	lb	x2,64(x18)
     120:	0100                	c.addi4spn	x8,x2,128
     122:	0409                	c.addi	x8,2
     124:	0000                	c.unimp
     126:	0101                	c.addi	x2,0
     128:	00001007          	.4byte	0x1007
     12c:	0005                	c.addi	x0,1
     12e:	0004                	.2byte	0x4
     130:	004a                	c.slli	x0,0x12
     132:	0000                	c.unimp
     134:	0101                	c.addi	x2,0
     136:	fb01                	c.bnez	x14,46 <crt+0x46>
     138:	0d0e                	c.slli	x26,0x3
     13a:	0100                	c.addi4spn	x8,x2,128
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
     13c:	0101                	c.addi	x2,0
     13e:	0001                	c.addi	x0,0
     140:	0000                	c.unimp
     142:	0001                	c.addi	x0,0
     144:	0100                	c.addi4spn	x8,x2,128
     146:	0101                	c.addi	x2,0
     148:	041f 0000 0000      	.byte	0x1f, 0x04, 0x00, 0x00, 0x00, 0x00
     14e:	0066                	c.slli	x0,0x19
     150:	0000                	c.unimp
     152:	0071                	c.addi	x0,28
     154:	0000                	c.unimp
     156:	00a9                	c.addi	x1,10
     158:	0000                	c.unimp
     15a:	0102                	c.slli64	x2
     15c:	021f 060f 005c      	.byte	0x1f, 0x02, 0x0f, 0x06, 0x5c, 0x00
     162:	0000                	c.unimp
	if (bp + bp->size == p->next) { //join to upper nbr
     164:	d201                	c.beqz	x12,64 <crt+0x64>
     166:	0000                	c.unimp
     168:	0100                	c.addi4spn	x8,x2,128
     16a:	005c                	c.addi4spn	x15,x2,4
     16c:	0000                	c.unimp
     16e:	de01                	c.beqz	x12,86 <crt+0x86>
     170:	0000                	c.unimp
     172:	0200                	c.addi4spn	x8,x2,256
     174:	000000e7          	jalr	x1,0(x0) # 0 <crt>
     178:	0000f003          	.4byte	0xf003
     17c:	0300                	c.addi4spn	x8,x2,384
     17e:	1905                	c.addi	x18,-31
     180:	0500                	c.addi4spn	x8,x2,640
     182:	b402                	.2byte	0xb402
		bp->size += p->next->size;
     184:	0000                	c.unimp
     186:	0300                	c.addi4spn	x8,x2,384
     188:	0129                	c.addi	x2,10
     18a:	0505                	c.addi	x10,1
     18c:	14090303          	lb	x6,320(x18)
     190:	0100                	c.addi4spn	x8,x2,128
     192:	2205                	c.jal	2b2 <getmoremem+0x6e>
     194:	0200                	c.addi4spn	x8,x2,256
     196:	0104                	c.addi4spn	x9,x2,128
     198:	10090003          	lb	x0,256(x18)
     19c:	0100                	c.addi4spn	x8,x2,128
     19e:	1905                	c.addi	x18,-31
     1a0:	0200                	c.addi4spn	x8,x2,256
     1a2:	0104                	c.addi4spn	x9,x2,128
		bp->next = p->next->next;
     1a4:	08090003          	lb	x0,128(x18)
     1a8:	0100                	c.addi4spn	x8,x2,128
     1aa:	0305                	c.addi	x6,1 # ffffa001 <_sp+0xfffea001>
     1ac:	08090103          	lb	x2,128(x18)
     1b0:	0100                	c.addi4spn	x8,x2,128
     1b2:	0505                	c.addi	x10,1
     1b4:	0c090303          	lb	x6,192(x18)
     1b8:	0100                	c.addi4spn	x8,x2,128
     1ba:	0905                	c.addi	x18,1
		bp->next = p->next; //insert bp after p in the linked list
     1bc:	0c090203          	lb	x4,192(x18)
     1c0:	0100                	c.addi4spn	x8,x2,128
     1c2:	0205                	c.addi	x4,1 # fffe1001 <_sp+0xfffd1001>
     1c4:	0c090003          	lb	x0,192(x18)
     1c8:	0100                	c.addi4spn	x8,x2,128
     1ca:	0d05                	c.addi	x26,1
	if (p + p->size == bp) { //join to lower nbr
     1cc:	04090303          	lb	x6,64(x18)
     1d0:	0100                	c.addi4spn	x8,x2,128
     1d2:	0605                	c.addi	x12,1
     1d4:	08090003          	lb	x0,128(x18)
     1d8:	0100                	c.addi4spn	x8,x2,128
     1da:	1405                	c.addi	x8,-31
     1dc:	0200                	c.addi4spn	x8,x2,256
     1de:	0104                	c.addi4spn	x9,x2,128
     1e0:	08090003          	lb	x0,128(x18)
     1e4:	0100                	c.addi4spn	x8,x2,128
     1e6:	2805                	c.jal	216 <tj_free+0x162>
		p->size += bp->size;
     1e8:	0200                	c.addi4spn	x8,x2,256
     1ea:	0204                	c.addi4spn	x9,x2,256
     1ec:	0c090003          	lb	x0,192(x18)
     1f0:	0100                	c.addi4spn	x8,x2,128
     1f2:	1f05                	c.addi	x30,-31
     1f4:	0200                	c.addi4spn	x8,x2,256
     1f6:	0204                	c.addi4spn	x9,x2,256
     1f8:	08090003          	lb	x0,128(x18)
     1fc:	0100                	c.addi4spn	x8,x2,128
     1fe:	2f05                	c.jal	92e <cnn_layer+0x1e>
     200:	0200                	c.addi4spn	x8,x2,256
     202:	0204                	c.addi4spn	x9,x2,256
		p->next = bp->next;
     204:	08097d03          	.4byte	0x8097d03
     208:	0100                	c.addi4spn	x8,x2,128
     20a:	1205                	c.addi	x4,-31 # ffffffe1 <_sp+0xfffeffe1>
     20c:	0200                	c.addi4spn	x8,x2,256
     20e:	0104                	c.addi4spn	x9,x2,128
     210:	0c090003          	lb	x0,192(x18)
     214:	0100                	c.addi4spn	x8,x2,128
     216:	2405                	c.jal	436 <tj_malloc+0x146>
		p->next = bp; //again, if the free list is just the base
     218:	0200                	c.addi4spn	x8,x2,256
     21a:	0304                	c.addi4spn	x9,x2,384
     21c:	0c090003          	lb	x0,192(x18)
     220:	0100                	c.addi4spn	x8,x2,128
     222:	1205                	c.addi	x4,-31 # ffffffe1 <_sp+0xfffeffe1>
	freep = p;
     224:	0200                	c.addi4spn	x8,x2,256
     226:	0304                	c.addi4spn	x9,x2,384
     228:	08090003          	lb	x0,128(x18)
     22c:	0100                	c.addi4spn	x8,x2,128
     22e:	0d05                	c.addi	x26,1
}
     230:	08090703          	lb	x14,128(x18)
     234:	0100                	c.addi4spn	x8,x2,128
     236:	0905                	c.addi	x18,1
     238:	08090003          	lb	x0,128(x18)
     23c:	0100                	c.addi4spn	x8,x2,128
     23e:	1805                	c.addi	x16,-31
     240:	0c090003          	lb	x0,192(x18)
static Header* getmoremem(unsigned int total_size) {
     244:	0100                	c.addi4spn	x8,x2,128
     246:	0505                	c.addi	x10,1
     248:	08090003          	lb	x0,128(x18)
     24c:	0100                	c.addi4spn	x8,x2,128
     24e:	0c05                	c.addi	x24,1
     250:	04090203          	lb	x4,64(x18)
     254:	0100                	c.addi4spn	x8,x2,128
     256:	1005                	c.addi	x0,-31
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
     258:	08090003          	lb	x0,128(x18)
     25c:	0100                	c.addi4spn	x8,x2,128
     25e:	1605                	c.addi	x12,-31
     260:	08090003          	lb	x0,128(x18)
     264:	0100                	c.addi4spn	x8,x2,128
     266:	0c05                	c.addi	x24,1
     268:	04090003          	lb	x0,64(x18)
     26c:	0100                	c.addi4spn	x8,x2,128
     26e:	0f05                	c.addi	x30,1
	Header* up = (Header *)next_index;
     270:	0c090103          	lb	x2,192(x18)
     274:	0100                	c.addi4spn	x8,x2,128
     276:	1505                	c.addi	x10,-31
     278:	08090003          	lb	x0,128(x18)
	next_index += total_size; //allocate the block
     27c:	0100                	c.addi4spn	x8,x2,128
     27e:	0c05                	c.addi	x24,1
     280:	04090003          	lb	x0,64(x18)
     284:	0100                	c.addi4spn	x8,x2,128
     286:	0f05                	c.addi	x30,1
     288:	0c090203          	lb	x4,192(x18)
     28c:	0100                	c.addi4spn	x8,x2,128
     28e:	0c05                	c.addi	x24,1
     290:	08090003          	lb	x0,128(x18)
	avail_mem -= total_size; //deduct from avail mem;
     294:	0100                	c.addi4spn	x8,x2,128
     296:	0b05                	c.addi	x22,1
     298:	08090403          	lb	x8,128(x18)
     29c:	0100                	c.addi4spn	x8,x2,128
     29e:	0805                	c.addi	x16,1
     2a0:	08090003          	lb	x0,128(x18)
     2a4:	0100                	c.addi4spn	x8,x2,128
     2a6:	0505                	c.addi	x10,1
     2a8:	0c090003          	lb	x0,192(x18)
	up->size = total_size - sizeof(Header); //set the size right
     2ac:	0100                	c.addi4spn	x8,x2,128
     2ae:	0b05                	c.addi	x22,1
     2b0:	08090203          	lb	x4,128(x18)
     2b4:	0100                	c.addi4spn	x8,x2,128
     2b6:	1005                	c.addi	x0,-31
     2b8:	08090003          	lb	x0,128(x18)
	tj_free((void *)(++up)); //append the new block to the free list first
     2bc:	0100                	c.addi4spn	x8,x2,128
     2be:	0b05                	c.addi	x22,1
     2c0:	08090003          	lb	x0,128(x18)
     2c4:	0100                	c.addi4spn	x8,x2,128
     2c6:	0f05                	c.addi	x30,1
     2c8:	0c090103          	lb	x2,192(x18)
     2cc:	0100                	c.addi4spn	x8,x2,128
     2ce:	0b05                	c.addi	x22,1
     2d0:	08090003          	lb	x0,128(x18)
	return freep;
     2d4:	0100                	c.addi4spn	x8,x2,128
     2d6:	0c090203          	lb	x4,192(x18)
     2da:	0100                	c.addi4spn	x8,x2,128
}
     2dc:	0805                	c.addi	x16,1
     2de:	0c090303          	lb	x6,192(x18)
     2e2:	0100                	c.addi4spn	x8,x2,128
     2e4:	0105                	c.addi	x2,1
     2e6:	0c090103          	lb	x2,192(x18)
     2ea:	0100                	c.addi4spn	x8,x2,128
     2ec:	3405                	c.jal	fffffd0c <_sp+0xfffefd0c>
     2ee:	14090203          	lb	x4,320(x18)
void *tj_malloc(unsigned int size) {
     2f2:	0100                	c.addi4spn	x8,x2,128
     2f4:	1005                	c.addi	x0,-31
     2f6:	14090103          	lb	x2,320(x18)
     2fa:	0100                	c.addi4spn	x8,x2,128
     2fc:	0505                	c.addi	x10,1
     2fe:	08090003          	lb	x0,128(x18)
     302:	0100                	c.addi4spn	x8,x2,128
	if (size > sizeof(heap)) return NULL;
     304:	2505                	c.jal	924 <cnn_layer+0x14>
     306:	0200                	c.addi4spn	x8,x2,256
     308:	0104                	c.addi4spn	x9,x2,128
     30a:	08090003          	lb	x0,128(x18)
     30e:	0100                	c.addi4spn	x8,x2,128
     310:	0a05                	c.addi	x20,1
     312:	08090103          	lb	x2,128(x18)
     316:	0100                	c.addi4spn	x8,x2,128
	if ((size & 3) != 0) {
     318:	0d05                	c.addi	x26,1
     31a:	0c090103          	lb	x2,192(x18)
     31e:	0100                	c.addi4spn	x8,x2,128
     320:	0c05                	c.addi	x24,1
     322:	18090103          	lb	x2,384(x18)
		size = size + 4 - (size & 3);
     326:	0100                	c.addi4spn	x8,x2,128
     328:	1805                	c.addi	x16,-31
     32a:	18090103          	lb	x2,384(x18)
     32e:	0100                	c.addi4spn	x8,x2,128
     330:	0b05                	c.addi	x22,1
     332:	08090003          	lb	x0,128(x18)
	unsigned int total_size = size + sizeof(Header); //need to include the header size as well
     336:	0100                	c.addi4spn	x8,x2,128
     338:	0205                	c.addi	x4,1 # 1 <crt+0x1>
     33a:	08090103          	lb	x2,128(x18)
     33e:	0100                	c.addi4spn	x8,x2,128
	prevp = freep;
     340:	0905                	c.addi	x18,1
     342:	18090103          	lb	x2,384(x18)
     346:	0100                	c.addi4spn	x8,x2,128
     348:	0105                	c.addi	x2,1
     34a:	08090103          	lb	x2,128(x18)
	if (prevp == NULL) {
     34e:	0100                	c.addi4spn	x8,x2,128
     350:	2405                	c.jal	570 <relu_af+0x2c>
     352:	14090203          	lb	x4,320(x18)
		prevp = &base;
     356:	0100                	c.addi4spn	x8,x2,128
     358:	0505                	c.addi	x10,1
     35a:	14090203          	lb	x4,320(x18)
     35e:	0100                	c.addi4spn	x8,x2,128
		freep = prevp;
     360:	2205                	c.jal	480 <tj_malloc+0x190>
     362:	0200                	c.addi4spn	x8,x2,256
     364:	0104                	c.addi4spn	x9,x2,128
     366:	0c090003          	lb	x0,192(x18)
     36a:	0100                	c.addi4spn	x8,x2,128
		base.next = freep;
     36c:	0c05                	c.addi	x24,1
     36e:	08090303          	lb	x6,128(x18)
     372:	0100                	c.addi4spn	x8,x2,128
     374:	0505                	c.addi	x10,1
     376:	08090003          	lb	x0,128(x18)
     37a:	0100                	c.addi4spn	x8,x2,128
     37c:	1305                	c.addi	x6,-31
     37e:	04090103          	lb	x2,64(x18)
		base.size = 0;
     382:	0100                	c.addi4spn	x8,x2,128
     384:	0805                	c.addi	x16,1
     386:	08090003          	lb	x0,128(x18)
     38a:	0100                	c.addi4spn	x8,x2,128
	for (p = prevp->next; ;prevp = p, p = p->next) {
     38c:	0f05                	c.addi	x30,1
     38e:	08090603          	lb	x12,128(x18)
     392:	0100                	c.addi4spn	x8,x2,128
     394:	0805                	c.addi	x16,1
     396:	0c090203          	lb	x4,192(x18)
		if (p->size >= size) { //big enough
     39a:	0100                	c.addi4spn	x8,x2,128
     39c:	0505                	c.addi	x10,1
     39e:	0c090203          	lb	x4,192(x18)
     3a2:	0100                	c.addi4spn	x8,x2,128
     3a4:	0905                	c.addi	x18,1
     3a6:	08090103          	lb	x2,128(x18)
			if (p->size == size) // exact size
     3aa:	0100                	c.addi4spn	x8,x2,128
     3ac:	0c090103          	lb	x2,192(x18)
     3b0:	0100                	c.addi4spn	x8,x2,128
     3b2:	0d05                	c.addi	x26,1
     3b4:	0c090103          	lb	x2,192(x18)
				prevp->next = p->next; // just return that block
     3b8:	0100                	c.addi4spn	x8,x2,128
     3ba:	14090103          	lb	x2,320(x18)
     3be:	0100                	c.addi4spn	x8,x2,128
     3c0:	0905                	c.addi	x18,1
     3c2:	0c090303          	lb	x6,192(x18)
     3c6:	0100                	c.addi4spn	x8,x2,128
     3c8:	0805                	c.addi	x16,1
     3ca:	0c090103          	lb	x2,192(x18)
				p->size -= total_size; //break up the block
     3ce:	0100                	c.addi4spn	x8,x2,128
     3d0:	0605                	c.addi	x12,1
     3d2:	08090003          	lb	x0,128(x18)
     3d6:	0100                	c.addi4spn	x8,x2,128
     3d8:	0905                	c.addi	x18,1
     3da:	08090103          	lb	x2,128(x18)
     3de:	0100                	c.addi4spn	x8,x2,128
     3e0:	0705                	c.addi	x14,1
     3e2:	08090003          	lb	x0,128(x18)
				p += p->size;
     3e6:	0100                	c.addi4spn	x8,x2,128
     3e8:	1405                	c.addi	x8,-31
     3ea:	08090103          	lb	x2,128(x18)
     3ee:	0100                	c.addi4spn	x8,x2,128
     3f0:	1105                	c.addi	x2,-31
     3f2:	08090003          	lb	x0,128(x18)
     3f6:	0100                	c.addi4spn	x8,x2,128
     3f8:	0d05                	c.addi	x26,1
     3fa:	0c090203          	lb	x4,192(x18)
				p->size = size;
     3fe:	0100                	c.addi4spn	x8,x2,128
     400:	0b05                	c.addi	x22,1
     402:	18090103          	lb	x2,384(x18)
     406:	0100                	c.addi4spn	x8,x2,128
			freep = prevp;
     408:	0705                	c.addi	x14,1
     40a:	08090003          	lb	x0,128(x18)
     40e:	0100                	c.addi4spn	x8,x2,128
     410:	0d05                	c.addi	x26,1
     412:	10090103          	lb	x2,256(x18)
			return (void *)(++p);
     416:	0100                	c.addi4spn	x8,x2,128
     418:	0a05                	c.addi	x20,1
     41a:	0c090203          	lb	x4,192(x18)
     41e:	0100                	c.addi4spn	x8,x2,128
     420:	0b05                	c.addi	x22,1
     422:	0c090403          	lb	x8,192(x18)
     426:	0100                	c.addi4spn	x8,x2,128
		if (p == freep) //wrapped around free list
     428:	0905                	c.addi	x18,1
     42a:	14090203          	lb	x4,320(x18)
     42e:	0100                	c.addi4spn	x8,x2,128
     430:	0605                	c.addi	x12,1
     432:	08090003          	lb	x0,128(x18)
     436:	0100                	c.addi4spn	x8,x2,128
			if ((p = getmoremem(total_size)) == NULL) //if the heap runs out
     438:	0d05                	c.addi	x26,1
     43a:	08090103          	lb	x2,128(x18)
     43e:	0100                	c.addi4spn	x8,x2,128
     440:	0705                	c.addi	x14,1
     442:	10090003          	lb	x0,256(x18)
     446:	0100                	c.addi4spn	x8,x2,128
     448:	0c05                	c.addi	x24,1
     44a:	08090103          	lb	x2,128(x18)
     44e:	0100                	c.addi4spn	x8,x2,128
				return NULL; //well, you got nothing left, gg
     450:	1f05                	c.addi	x30,-31
     452:	08096f03          	.4byte	0x8096f03
     456:	0100                	c.addi4spn	x8,x2,128
	for (p = prevp->next; ;prevp = p, p = p->next) {
     458:	2605                	c.jal	778 <fc_input_generator+0x48>
     45a:	08090003          	lb	x0,128(x18)
     45e:	0100                	c.addi4spn	x8,x2,128
     460:	0605                	c.addi	x12,1
     462:	0c090103          	lb	x2,192(x18)
     466:	0100                	c.addi4spn	x8,x2,128
     468:	0105                	c.addi	x2,1
     46a:	04091203          	lh	x4,64(x18)
		if (p->size >= size) { //big enough
     46e:	0100                	c.addi4spn	x8,x2,128
}
     470:	2405                	c.jal	690 <fc_layer+0x118>
     472:	14090203          	lb	x4,320(x18)
     476:	0100                	c.addi4spn	x8,x2,128
     478:	0e05                	c.addi	x28,1
     47a:	14090103          	lb	x2,320(x18)
     47e:	0100                	c.addi4spn	x8,x2,128
     480:	0205                	c.addi	x4,1 # 1 <crt+0x1>
     482:	10090103          	lb	x2,256(x18)
void *tj_calloc(unsigned int size) {
     486:	0100                	c.addi4spn	x8,x2,128
     488:	0905                	c.addi	x18,1
     48a:	14090103          	lb	x2,320(x18)
     48e:	0100                	c.addi4spn	x8,x2,128
     490:	0105                	c.addi	x2,1
     492:	04090103          	lb	x2,64(x18)
     496:	0100                	c.addi4spn	x8,x2,128
	void *mem = tj_malloc(size);
     498:	0204                	c.addi4spn	x9,x2,256
     49a:	1105                	c.addi	x2,-31
     49c:	097f8e03          	lb	x28,151(x31)
     4a0:	0014                	.2byte	0x14
     4a2:	0501                	c.addi	x10,0
     4a4:	0319                	c.addi	x6,6
     4a6:	0901                	c.addi	x18,0
	memset(mem, 0, size);
     4a8:	000c                	.2byte	0xc
     4aa:	0501                	c.addi	x10,0
     4ac:	030e                	c.slli	x6,0x3
     4ae:	0900                	c.addi4spn	x8,x2,144
     4b0:	0008                	.2byte	0x8
     4b2:	0501                	c.addi	x10,0
     4b4:	030a                	c.slli	x6,0x2
     4b6:	0902                	c.slli64	x18
     4b8:	0008                	.2byte	0x8
     4ba:	0501                	c.addi	x10,0
	return mem;
     4bc:	0308                	c.addi4spn	x10,x2,384
     4be:	0902                	c.slli64	x18
}
     4c0:	0014                	.2byte	0x14
     4c2:	0501                	c.addi	x10,0
     4c4:	030e                	c.slli	x6,0x3
     4c6:	0901                	c.addi	x18,0
     4c8:	000c                	.2byte	0xc
     4ca:	0501                	c.addi	x10,0
     4cc:	030c                	c.addi4spn	x11,x2,384
     4ce:	0902                	c.slli64	x18
     4d0:	001c                	.2byte	0x1c
     4d2:	0501                	c.addi	x10,0
int random_gen(){
     4d4:	0301                	c.addi	x6,0
     4d6:	0901                	c.addi	x18,0
     4d8:	0008                	.2byte	0x8
     4da:	0501                	c.addi	x10,0
     4dc:	09020317          	auipc	x6,0x9020
    unsigned lsb = lfsr & 1;
     4e0:	0010                	.2byte	0x10
     4e2:	0501                	c.addi	x10,0
     4e4:	0304                	c.addi4spn	x9,x2,384
     4e6:	0901                	c.addi	x18,0
     4e8:	0010                	.2byte	0x10
     4ea:	0501                	c.addi	x10,0
     4ec:	030a                	c.slli	x6,0x2
     4ee:	0901                	c.addi	x18,0
    lfsr >>= 1;
     4f0:	0008                	.2byte	0x8
     4f2:	0501                	c.addi	x10,0
     4f4:	0309                	c.addi	x6,2 # 90204de <_sp+0x90104de>
     4f6:	0902                	c.slli64	x18
     4f8:	0008                	.2byte	0x8
     4fa:	0501                	c.addi	x10,0
     4fc:	0301                	c.addi	x6,0
     4fe:	0901                	c.addi	x18,0
     500:	0004                	.2byte	0x4
     502:	0501                	c.addi	x10,0
    if (lsb == 1)
     504:	0902037b          	.4byte	0x902037b
     508:	0010                	.2byte	0x10
     50a:	0501                	c.addi	x10,0
     50c:	0309                	c.addi	x6,2
     50e:	00300903          	lb	x18,3(x0) # 3 <crt+0x3>
        lfsr ^= 0xB400u;
     512:	0501                	c.addi	x10,0
     514:	0302                	c.slli64	x6
     516:	0900                	c.addi4spn	x8,x2,144
     518:	0004                	.2byte	0x4
     51a:	0501                	c.addi	x10,0
     51c:	09010317          	auipc	x6,0x9010
     520:	0004                	.2byte	0x4
     522:	0501                	c.addi	x10,0
     524:	030a                	c.slli	x6,0x2
     526:	0900                	c.addi4spn	x8,x2,144
     528:	0010                	.2byte	0x10
     52a:	0501                	c.addi	x10,0
    return lfsr;
     52c:	09000317          	auipc	x6,0x9000
     530:	0010                	.2byte	0x10
     532:	0501                	c.addi	x10,0
}
     534:	030e                	c.slli	x6,0x3
     536:	0900                	c.addi4spn	x8,x2,144
     538:	0004                	.2byte	0x4
     53a:	0501                	c.addi	x10,0
     53c:	030a                	c.slli	x6,0x2
     53e:	0901                	c.addi	x18,0
     540:	0004                	.2byte	0x4
     542:	0501                	c.addi	x10,0
int relu_af(int in_af){
     544:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
     548:	0004                	.2byte	0x4
     54a:	0501                	c.addi	x10,0
     54c:	0402000f          	.4byte	0x402000f
     550:	09010303          	lb	x6,144(x2)
	if(in_af < 0)
     554:	0004                	.2byte	0x4
     556:	0501                	c.addi	x10,0
     558:	0019                	c.addi	x0,6
     55a:	0402                	c.slli64	x8
		return 0;
     55c:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
     560:	0014                	.2byte	0x14
     562:	0501                	c.addi	x10,0
	return in_af;
     564:	001c                	.2byte	0x1c
     566:	0402                	c.slli64	x8
}
     568:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
     56c:	0020                	c.addi4spn	x8,x2,8
     56e:	0501                	c.addi	x10,0
     570:	0028                	c.addi4spn	x10,x2,8
     572:	0402                	c.slli64	x8
     574:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
void fc_layer(int weights[5][5], int biasses[5], int inputs[5], int outputs[5], int input_num, int output_num, int af_num){
     578:	0010                	.2byte	0x10
     57a:	0501                	c.addi	x10,0
     57c:	0020                	c.addi4spn	x8,x2,8
     57e:	0402                	c.slli64	x8
     580:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
     584:	0014                	.2byte	0x14
     586:	0501                	c.addi	x10,0
     588:	0402000f          	.4byte	0x402000f
     58c:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
     590:	0004                	.2byte	0x4
     592:	0501                	c.addi	x10,0
     594:	001f 0402 0303      	.byte	0x1f, 0x00, 0x02, 0x04, 0x03, 0x03
     59a:	097f                	.2byte	0x97f
     59c:	0018                	.2byte	0x18
     59e:	0501                	c.addi	x10,0
     5a0:	0011                	c.addi	x0,4
     5a2:	0402                	c.slli64	x8
     5a4:	0301                	c.addi	x6,0 # 900052c <_sp+0x8ff052c>
     5a6:	0900                	c.addi4spn	x8,x2,144
	for (i = 0; i < output_num; i++) {
     5a8:	000c                	.2byte	0xc
     5aa:	0501                	c.addi	x10,0
     5ac:	0309                	c.addi	x6,2
     5ae:	000c0903          	lb	x18,0(x24)
		outputs[i] = biasses[i];
     5b2:	0501                	c.addi	x10,0
     5b4:	032d                	c.addi	x6,11
     5b6:	0902                	c.slli64	x18
     5b8:	0018                	.2byte	0x18
     5ba:	0501                	c.addi	x10,0
     5bc:	031e                	c.slli	x6,0x7
     5be:	0900                	c.addi4spn	x8,x2,144
     5c0:	0010                	.2byte	0x10
     5c2:	0501                	c.addi	x10,0
     5c4:	0318                	c.addi4spn	x14,x2,384
     5c6:	0900                	c.addi4spn	x8,x2,144
     5c8:	0004                	.2byte	0x4
     5ca:	0501                	c.addi	x10,0
     5cc:	031e                	c.slli	x6,0x7
     5ce:	0900                	c.addi4spn	x8,x2,144
     5d0:	0010                	.2byte	0x10
     5d2:	0501                	c.addi	x10,0
     5d4:	031c                	c.addi4spn	x15,x2,384
     5d6:	0900                	c.addi4spn	x8,x2,144
		for (j = 0; j < input_num; j++) {
     5d8:	0010                	.2byte	0x10
     5da:	0501                	c.addi	x10,0
     5dc:	0311                	c.addi	x6,4
     5de:	0901                	c.addi	x18,0
			outputs[i] += weights[i][j] * inputs[j];
     5e0:	0004                	.2byte	0x4
     5e2:	0501                	c.addi	x10,0
     5e4:	032d                	c.addi	x6,11
     5e6:	0902                	c.slli64	x18
     5e8:	0004                	.2byte	0x4
     5ea:	0501                	c.addi	x10,0
     5ec:	031e                	c.slli	x6,0x7
     5ee:	0900                	c.addi4spn	x8,x2,144
     5f0:	0010                	.2byte	0x10
     5f2:	0501                	c.addi	x10,0
     5f4:	0318                	c.addi4spn	x14,x2,384
     5f6:	0900                	c.addi4spn	x8,x2,144
     5f8:	0004                	.2byte	0x4
     5fa:	0501                	c.addi	x10,0
     5fc:	031e                	c.slli	x6,0x7
     5fe:	0900                	c.addi4spn	x8,x2,144
     600:	0010                	.2byte	0x10
     602:	0501                	c.addi	x10,0
     604:	031c                	c.addi4spn	x15,x2,384
     606:	0900                	c.addi4spn	x8,x2,144
     608:	0010                	.2byte	0x10
     60a:	0501                	c.addi	x10,0
     60c:	0311                	c.addi	x6,4
     60e:	0901                	c.addi	x18,0
     610:	0004                	.2byte	0x4
     612:	0501                	c.addi	x10,0
     614:	001f 0402 0302      	.byte	0x1f, 0x00, 0x02, 0x04, 0x02, 0x03
     61a:	0975                	c.addi	x18,29
     61c:	0004                	.2byte	0x4
     61e:	0501                	c.addi	x10,0
     620:	0010                	.2byte	0x10
     622:	0402                	c.slli64	x8
     624:	0301                	c.addi	x6,0
     626:	0900                	c.addi4spn	x8,x2,144
     628:	000c                	.2byte	0xc
     62a:	0501                	c.addi	x10,0
     62c:	0301                	c.addi	x6,0
     62e:	090e                	c.slli	x18,0x3
     630:	000c                	.2byte	0xc
     632:	0501                	c.addi	x10,0
     634:	0336                	c.slli	x6,0xd
     636:	0902                	c.slli64	x18
     638:	001c                	.2byte	0x1c
     63a:	0501                	c.addi	x10,0
     63c:	030c                	c.addi4spn	x11,x2,384
     63e:	0902                	c.slli64	x18
     640:	0018                	.2byte	0x18
     642:	0501                	c.addi	x10,0
     644:	0305                	c.addi	x6,1
     646:	0900                	c.addi4spn	x8,x2,144
     648:	0004                	.2byte	0x4
     64a:	0501                	c.addi	x10,0
     64c:	0016                	c.slli	x0,0x5
     64e:	0402                	c.slli64	x8
     650:	09010303          	lb	x6,144(x2)
		for (j = 0; j < input_num; j++) {
     654:	0004                	.2byte	0x4
     656:	0501                	c.addi	x10,0
     658:	0022                	c.slli	x0,0x8
     65a:	0402                	c.slli64	x8
     65c:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
     660:	000c                	.2byte	0xc
     662:	0501                	c.addi	x10,0
     664:	0402000f          	.4byte	0x402000f
     668:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
        switch (af_num) {
     66c:	0004                	.2byte	0x4
     66e:	0501                	c.addi	x10,0
     670:	04020027          	.4byte	0x4020027
     674:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
     678:	0010                	.2byte	0x10
     67a:	0501                	c.addi	x10,0
     67c:	04020013          	addi	x0,x4,64 # 40 <crt+0x40>
     680:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
                outputs[i] = relu_af(outputs[i]);
     684:	0004                	.2byte	0x4
     686:	0501                	c.addi	x10,0
     688:	0021                	c.addi	x0,8
     68a:	0402                	c.slli64	x8
     68c:	097f0303          	lb	x6,151(x30)
     690:	0004                	.2byte	0x4
     692:	0501                	c.addi	x10,0
     694:	04020013          	addi	x0,x4,64 # 40 <crt+0x40>
     698:	0301                	c.addi	x6,0
     69a:	0900                	c.addi4spn	x8,x2,144
     69c:	000c                	.2byte	0xc
     69e:	0501                	c.addi	x10,0
     6a0:	0301                	c.addi	x6,0
     6a2:	000c0903          	lb	x18,0(x24)
     6a6:	0501                	c.addi	x10,0
     6a8:	0902035b          	.4byte	0x902035b
     6ac:	0018                	.2byte	0x18
     6ae:	0501                	c.addi	x10,0
     6b0:	0309                	c.addi	x6,2
     6b2:	00200903          	lb	x18,2(x0) # 2 <crt+0x2>
     6b6:	0501                	c.addi	x10,0
     6b8:	0302                	c.slli64	x6
     6ba:	0900                	c.addi4spn	x8,x2,144
                break;
     6bc:	0004                	.2byte	0x4
     6be:	0501                	c.addi	x10,0
                outputs[i] = relu_af(outputs[i]);
     6c0:	09010317          	auipc	x6,0x9010
     6c4:	0004                	.2byte	0x4
     6c6:	0501                	c.addi	x10,0
     6c8:	09000323          	sb	x16,134(x0) # 86 <crt+0x86>
     6cc:	000c                	.2byte	0xc
     6ce:	0501                	c.addi	x10,0
     6d0:	0310                	c.addi4spn	x12,x2,384
     6d2:	0900                	c.addi4spn	x8,x2,144
     6d4:	0004                	.2byte	0x4
     6d6:	0501                	c.addi	x10,0
     6d8:	0328                	c.addi4spn	x10,x2,392
     6da:	0900                	c.addi4spn	x8,x2,144
     6dc:	0010                	.2byte	0x10
     6de:	0501                	c.addi	x10,0
     6e0:	0314                	c.addi4spn	x13,x2,384
     6e2:	0900                	c.addi4spn	x8,x2,144
     6e4:	0004                	.2byte	0x4
     6e6:	0501                	c.addi	x10,0
     6e8:	0310                	c.addi4spn	x12,x2,384
     6ea:	0901                	c.addi	x18,0
     6ec:	0004                	.2byte	0x4
     6ee:	0501                	c.addi	x10,0
     6f0:	0309                	c.addi	x6,2 # 90106c2 <_sp+0x90006c2>
     6f2:	0900                	c.addi4spn	x8,x2,144
     6f4:	0004                	.2byte	0x4
     6f6:	0501                	c.addi	x10,0
                break;
     6f8:	001e                	c.slli	x0,0x7
     6fa:	0402                	c.slli64	x8
	for (i = 0; i < output_num; i++) {
     6fc:	09010303          	lb	x6,144(x2)
     700:	0004                	.2byte	0x4
     702:	0501                	c.addi	x10,0
     704:	002a                	c.slli	x0,0xa
     706:	0402                	c.slli64	x8
     708:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
     70c:	000c                	.2byte	0xc
     70e:	0501                	c.addi	x10,0
     710:	0014                	.2byte	0x14
     712:	0402                	c.slli64	x8
}
     714:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
     718:	0004                	.2byte	0x4
     71a:	0501                	c.addi	x10,0
     71c:	0402002f          	.4byte	0x402002f
     720:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
     724:	0020                	c.addi4spn	x8,x2,8
     726:	0501                	c.addi	x10,0
     728:	0402001b          	.4byte	0x402001b
     72c:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
void fc_input_generator(int inputs[5], int input_num){
     730:	0004                	.2byte	0x4
     732:	0501                	c.addi	x10,0
     734:	0025                	c.addi	x0,9
     736:	0402                	c.slli64	x8
     738:	097f0303          	lb	x6,151(x30)
     73c:	0010                	.2byte	0x10
     73e:	0501                	c.addi	x10,0
     740:	04020017          	auipc	x0,0x4020
     744:	0301                	c.addi	x6,0
     746:	0900                	c.addi4spn	x8,x2,144
    for (i = 0; i < input_num; i++) {
     748:	000c                	.2byte	0xc
     74a:	0501                	c.addi	x10,0
     74c:	001f 0402 0302      	.byte	0x1f, 0x00, 0x02, 0x04, 0x02, 0x03
        inputs[i] = (random_gen()&15) - 5;
     752:	097e                	c.slli	x18,0x1f
     754:	000c                	.2byte	0xc
     756:	0501                	c.addi	x10,0
     758:	0010                	.2byte	0x10
     75a:	0402                	c.slli64	x8
     75c:	0301                	c.addi	x6,0
     75e:	0900                	c.addi4spn	x8,x2,144
     760:	000c                	.2byte	0xc
     762:	0501                	c.addi	x10,0
     764:	0301                	c.addi	x6,0
     766:	0906                	c.slli	x18,0x1
     768:	000c                	.2byte	0xc
     76a:	0501                	c.addi	x10,0
     76c:	0332                	c.slli	x6,0xc
     76e:	0902                	c.slli64	x18
     770:	0018                	.2byte	0x18
     772:	0501                	c.addi	x10,0
     774:	0306                	c.slli	x6,0x1
     776:	0902                	c.slli64	x18
    for (i = 0; i < input_num; i++) {
     778:	0014                	.2byte	0x14
     77a:	0501                	c.addi	x10,0
     77c:	030c                	c.addi4spn	x11,x2,384
     77e:	0901                	c.addi	x18,0
     780:	0004                	.2byte	0x4
     782:	0501                	c.addi	x10,0
     784:	0305                	c.addi	x6,1
     786:	0900                	c.addi4spn	x8,x2,144
     788:	0008                	.2byte	0x8
     78a:	0501                	c.addi	x10,0
     78c:	0314                	c.addi4spn	x13,x2,384
     78e:	0901                	c.addi	x18,0
}
     790:	0004                	.2byte	0x4
     792:	0501                	c.addi	x10,0
     794:	0324                	c.addi4spn	x9,x2,392
     796:	0900                	c.addi4spn	x8,x2,144
     798:	0014                	.2byte	0x14
     79a:	0501                	c.addi	x10,0
     79c:	0900030b          	.4byte	0x900030b
     7a0:	0014                	.2byte	0x14
     7a2:	0501                	c.addi	x10,0
     7a4:	0311                	c.addi	x6,4
     7a6:	0901                	c.addi	x18,0
void fc_weight_generator(int weights[5][5], int biasses[5], int input_num, int output_num){
     7a8:	0004                	.2byte	0x4
     7aa:	0501                	c.addi	x10,0
     7ac:	04020023          	sb	x0,64(x4) # 40 <crt+0x40>
     7b0:	0302                	c.slli64	x6
     7b2:	097e                	c.slli	x18,0x1f
     7b4:	0008                	.2byte	0x8
     7b6:	0501                	c.addi	x10,0
     7b8:	04020013          	addi	x0,x4,64 # 40 <crt+0x40>
     7bc:	0301                	c.addi	x6,0
     7be:	0900                	c.addi4spn	x8,x2,144
     7c0:	000c                	.2byte	0xc
     7c2:	0501                	c.addi	x10,0
     7c4:	030c                	c.addi4spn	x11,x2,384
     7c6:	0904                	c.addi4spn	x9,x2,144
	for (i = 0; i < output_num; i++) {
     7c8:	000c                	.2byte	0xc
     7ca:	0501                	c.addi	x10,0
     7cc:	0301                	c.addi	x6,0
     7ce:	0901                	c.addi	x18,0
        biasses[i] = (random_gen()&15) - 5;
     7d0:	0004                	.2byte	0x4
     7d2:	0501                	c.addi	x10,0
     7d4:	01d1                	c.addi	x3,20 # 1fd4 <__global_pointer$+0x14>
     7d6:	10090203          	lb	x4,256(x18)
     7da:	0100                	c.addi4spn	x8,x2,128
     7dc:	2905                	c.jal	c0c <cnn_layer+0x2fc>
     7de:	34090103          	lb	x2,832(x18)
     7e2:	0100                	c.addi4spn	x8,x2,128
     7e4:	2405                	c.jal	a04 <cnn_layer+0xf4>
     7e6:	08090003          	lb	x0,128(x18)
     7ea:	0100                	c.addi4spn	x8,x2,128
     7ec:	3505                	c.jal	60c <fc_layer+0x94>
     7ee:	08090003          	lb	x0,128(x18)
     7f2:	0100                	c.addi4spn	x8,x2,128
     7f4:	4405                	c.li	x8,1
     7f6:	08090003          	lb	x0,128(x18)
        for (j = 0; j < input_num; j++) {
     7fa:	0100                	c.addi4spn	x8,x2,128
     7fc:	0905                	c.addi	x18,1
     7fe:	08090003          	lb	x0,128(x18)
            weights[i][j] = (random_gen()&15) - 5;
     802:	0100                	c.addi4spn	x8,x2,128
     804:	1005                	c.addi	x0,-31
     806:	08090203          	lb	x4,128(x18)
     80a:	0100                	c.addi4spn	x8,x2,128
     80c:	0205                	c.addi	x4,1 # 1 <crt+0x1>
     80e:	04090003          	lb	x0,64(x18)
     812:	0100                	c.addi4spn	x8,x2,128
     814:	1605                	c.addi	x12,-31
     816:	04090103          	lb	x2,64(x18)
     81a:	0100                	c.addi4spn	x8,x2,128
     81c:	0905                	c.addi	x18,1
     81e:	04090003          	lb	x0,64(x18)
     822:	0100                	c.addi4spn	x8,x2,128
     824:	1a05                	c.addi	x20,-31
     826:	04090103          	lb	x2,64(x18)
     82a:	0100                	c.addi4spn	x8,x2,128
     82c:	0d05                	c.addi	x26,1
     82e:	04090003          	lb	x0,64(x18)
     832:	0100                	c.addi4spn	x8,x2,128
     834:	3e05                	c.jal	364 <tj_malloc+0x74>
     836:	04090103          	lb	x2,64(x18)
     83a:	0100                	c.addi4spn	x8,x2,128
     83c:	1805                	c.addi	x16,-31
     83e:	10090003          	lb	x0,256(x18)
     842:	0100                	c.addi4spn	x8,x2,128
        for (j = 0; j < input_num; j++) {
     844:	3e05                	c.jal	374 <tj_malloc+0x84>
     846:	14090003          	lb	x0,320(x18)
     84a:	0100                	c.addi4spn	x8,x2,128
     84c:	3505                	c.jal	66c <fc_layer+0xf4>
     84e:	04090003          	lb	x0,64(x18)
     852:	0100                	c.addi4spn	x8,x2,128
     854:	1905                	c.addi	x18,-31
     856:	24090103          	lb	x2,576(x18)
     85a:	0100                	c.addi4spn	x8,x2,128
	for (i = 0; i < output_num; i++) {
     85c:	0b05                	c.addi	x22,1
     85e:	04090003          	lb	x0,64(x18)
     862:	0100                	c.addi4spn	x8,x2,128
     864:	2205                	c.jal	984 <cnn_layer+0x74>
     866:	04090103          	lb	x2,64(x18)
     86a:	0100                	c.addi4spn	x8,x2,128
     86c:	1505                	c.addi	x10,-31
     86e:	04090003          	lb	x0,64(x18)
     872:	0100                	c.addi4spn	x8,x2,128
}
     874:	2605                	c.jal	b94 <cnn_layer+0x284>
     876:	04090103          	lb	x2,64(x18)
     87a:	0100                	c.addi4spn	x8,x2,128
     87c:	1905                	c.addi	x18,-31
     87e:	04090003          	lb	x0,64(x18)
     882:	0100                	c.addi4spn	x8,x2,128
     884:	4105                	c.li	x2,1
     886:	04090103          	lb	x2,64(x18)
     88a:	0100                	c.addi4spn	x8,x2,128
int fc_soft_max(int features[5], int feature_num){
     88c:	4d05                	c.li	x26,1
     88e:	38090003          	lb	x0,896(x18)
     892:	0100                	c.addi4spn	x8,x2,128
     894:	5605                	c.li	x12,-31
     896:	0c090003          	lb	x0,192(x18)
     89a:	0100                	c.addi4spn	x8,x2,128
     89c:	5e05                	c.li	x28,-31
     89e:	08090003          	lb	x0,128(x18)
	int max = 0;
     8a2:	0100                	c.addi4spn	x8,x2,128
    for (i = 1; i < feature_num; i++) {
     8a4:	8d05                	c.sub	x10,x9
     8a6:	0302                	c.slli64	x6
     8a8:	0900                	c.addi4spn	x8,x2,144
     8aa:	0008                	.2byte	0x8
     8ac:	0501                	c.addi	x10,0
     8ae:	007a                	c.slli	x0,0x1e
        if(features[max] < features[i])
     8b0:	0402                	c.slli64	x8
     8b2:	0301                	c.addi	x6,0
     8b4:	0900                	c.addi4spn	x8,x2,144
     8b6:	0004                	.2byte	0x4
     8b8:	0501                	c.addi	x10,0
     8ba:	02000183          	lb	x3,32(x0) # 20 <crt+0x20>
     8be:	0104                	c.addi4spn	x9,x2,128
     8c0:	0c090003          	lb	x0,192(x18)
     8c4:	0100                	c.addi4spn	x8,x2,128
     8c6:	8b05                	c.andi	x14,1
     8c8:	0001                	c.addi	x0,0
     8ca:	0402                	c.slli64	x8
     8cc:	0301                	c.addi	x6,0
     8ce:	0900                	c.addi4spn	x8,x2,144
     8d0:	0008                	.2byte	0x8
     8d2:	0501                	c.addi	x10,0
     8d4:	006e                	c.slli	x0,0x1b
     8d6:	0402                	c.slli64	x8
     8d8:	0301                	c.addi	x6,0
     8da:	0900                	c.addi4spn	x8,x2,144
            max = i;
     8dc:	0008                	.2byte	0x8
     8de:	0501                	c.addi	x10,0
     8e0:	020001a7          	.4byte	0x20001a7
    for (i = 1; i < feature_num; i++) {
     8e4:	0304                	c.addi4spn	x9,x2,384
     8e6:	04090003          	lb	x0,64(x18)
     8ea:	0100                	c.addi4spn	x8,x2,128
     8ec:	b005                	c.j	10c <tj_free+0x58>
     8ee:	0001                	c.addi	x0,0
     8f0:	0402                	c.slli64	x8
     8f2:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
     8f6:	000c                	.2byte	0xc
     8f8:	0501                	c.addi	x10,0
     8fa:	01b8                	c.addi4spn	x14,x2,200
    return max;
     8fc:	0200                	c.addi4spn	x8,x2,256
     8fe:	0304                	c.addi4spn	x9,x2,384
}
     900:	08090003          	lb	x0,128(x18)
     904:	0100                	c.addi4spn	x8,x2,128
     906:	9b05                	c.andi	x14,-31
     908:	0001                	c.addi	x0,0
     90a:	0402                	c.slli64	x8
     90c:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
void cnn_layer(int weights[5][5][5][5], int biasses[5], int inputs[5][5][5], int outputs[5][5][5], int input_channel, int output_channel, int input_size, int kernel_size, int stride, int zero_pad, int af_num){
     910:	0008                	.2byte	0x8
     912:	0501                	c.addi	x10,0
     914:	01de                	c.slli	x3,0x17
     916:	0200                	c.addi4spn	x8,x2,256
     918:	0504                	c.addi4spn	x9,x2,640
     91a:	08090003          	lb	x0,128(x18)
     91e:	0100                	c.addi4spn	x8,x2,128
     920:	e705                	c.bnez	x14,948 <cnn_layer+0x38>
     922:	0001                	c.addi	x0,0
     924:	0402                	c.slli64	x8
     926:	0305                	c.addi	x6,1
     928:	0900                	c.addi4spn	x8,x2,144
     92a:	000c                	.2byte	0xc
     92c:	0501                	c.addi	x10,0
     92e:	020001ef          	jal	x3,94e <cnn_layer+0x3e>
     932:	0504                	c.addi4spn	x9,x2,640
     934:	08090003          	lb	x0,128(x18)
     938:	0100                	c.addi4spn	x8,x2,128
     93a:	d205                	c.beqz	x12,85a <fc_weight_generator+0xb2>
     93c:	0001                	c.addi	x0,0
     93e:	0402                	c.slli64	x8
     940:	0305                	c.addi	x6,1
     942:	0900                	c.addi4spn	x8,x2,144
    int output_size = ((input_size + (2 * zero_pad) - kernel_size) >> stride) + 1;
     944:	0008                	.2byte	0x8
     946:	0501                	c.addi	x10,0
     948:	0295                	c.addi	x5,5 # 176f <memset+0x93>
     94a:	0200                	c.addi4spn	x8,x2,256
     94c:	0704                	c.addi4spn	x9,x2,896
     94e:	08090003          	lb	x0,128(x18)
     952:	0100                	c.addi4spn	x8,x2,128
     954:	a705                	c.j	1074 <cnn_pool+0x2fc>
     956:	0002                	c.slli64	x0
     958:	0402                	c.slli64	x8
     95a:	09000307          	.4byte	0x9000307
     95e:	0014                	.2byte	0x14
     960:	0501                	c.addi	x10,0
     962:	02b0                	c.addi4spn	x12,x2,328
     964:	0200                	c.addi4spn	x8,x2,256
     966:	0704                	c.addi4spn	x9,x2,896
     968:	0c090003          	lb	x0,192(x18)
	for (o_ch_itr = 0; o_ch_itr < output_channel; o_ch_itr++) {
     96c:	0100                	c.addi4spn	x8,x2,128
     96e:	b805                	c.j	19e <tj_free+0xea>
     970:	0002                	c.slli64	x0
     972:	0402                	c.slli64	x8
        for (o_r_itr = 0; o_r_itr < output_size; o_r_itr++) {
     974:	09000307          	.4byte	0x9000307
     978:	0008                	.2byte	0x8
     97a:	0501                	c.addi	x10,0
            for (o_c_itr = 0; o_c_itr < output_size; o_c_itr++) {
     97c:	02ca                	c.slli	x5,0x12
     97e:	0200                	c.addi4spn	x8,x2,256
     980:	0704                	c.addi4spn	x9,x2,896
     982:	08090003          	lb	x0,128(x18)
                outputs[o_ch_itr][o_r_itr][o_c_itr] = biasses[o_ch_itr];
     986:	0100                	c.addi4spn	x8,x2,128
     988:	d305                	c.beqz	x14,8a8 <fc_soft_max+0x1c>
     98a:	0002                	c.slli64	x0
     98c:	0402                	c.slli64	x8
     98e:	09000307          	.4byte	0x9000307
     992:	000c                	.2byte	0xc
     994:	0501                	c.addi	x10,0
     996:	020002db          	.4byte	0x20002db
     99a:	0704                	c.addi4spn	x9,x2,896
     99c:	08090003          	lb	x0,128(x18)
     9a0:	0100                	c.addi4spn	x8,x2,128
     9a2:	c205                	c.beqz	x12,9c2 <cnn_layer+0xb2>
     9a4:	0002                	c.slli64	x0
     9a6:	0402                	c.slli64	x8
     9a8:	09000307          	.4byte	0x9000307
     9ac:	0008                	.2byte	0x8
     9ae:	0501                	c.addi	x10,0
     9b0:	020002ef          	jal	x5,9d0 <cnn_layer+0xc0>
     9b4:	0704                	c.addi4spn	x9,x2,896
     9b6:	1c090003          	lb	x0,448(x18)
     9ba:	0100                	c.addi4spn	x8,x2,128
     9bc:	8c05                	c.sub	x8,x9
     9be:	04020003          	lb	x0,64(x4) # 40 <crt+0x40>
     9c2:	09000307          	.4byte	0x9000307
     9c6:	0014                	.2byte	0x14
     9c8:	0501                	c.addi	x10,0
     9ca:	028d                	c.addi	x5,3
     9cc:	0200                	c.addi4spn	x8,x2,256
     9ce:	0704                	c.addi4spn	x9,x2,896
        		for (i_ch_itr = 0; i_ch_itr < input_channel; i_ch_itr++) {
     9d0:	40090003          	lb	x0,1024(x18)
     9d4:	0100                	c.addi4spn	x8,x2,128
     9d6:	0200                	c.addi4spn	x8,x2,256
                    for (k_r_itr = 0; k_r_itr < kernel_size; k_r_itr++) {
     9d8:	0804                	c.addi4spn	x9,x2,16
     9da:	0306                	c.slli	x6,0x1
     9dc:	0900                	c.addi4spn	x8,x2,144
     9de:	0008                	.2byte	0x8
                        for (k_c_itr = 0; k_c_itr < kernel_size; k_c_itr++) {
     9e0:	0501                	c.addi	x10,0
     9e2:	0041                	c.addi	x0,16
     9e4:	0402                	c.slli64	x8
     9e6:	060a                	c.slli	x12,0x2
                            outputs[o_ch_itr][o_r_itr][o_c_itr] += (((stride*o_r_itr)+k_r_itr-zero_pad) < 0) || (((stride*o_c_itr)+k_c_itr-zero_pad) < 0) || (((stride*o_r_itr)+k_r_itr-zero_pad) >= input_size) || (((stride*o_c_itr)+k_c_itr-zero_pad) >= input_size) ? 0 : inputs[i_ch_itr][(stride*o_r_itr)+k_r_itr-zero_pad][(stride*o_c_itr)+k_c_itr-zero_pad] * weights[o_ch_itr][i_ch_itr][k_r_itr][k_c_itr];
     9e8:	04090003          	lb	x0,64(x18)
     9ec:	0100                	c.addi4spn	x8,x2,128
     9ee:	4905                	c.li	x18,1
     9f0:	0200                	c.addi4spn	x8,x2,256
     9f2:	0a04                	c.addi4spn	x9,x2,272
     9f4:	3c097f03          	.4byte	0x3c097f03
     9f8:	0100                	c.addi4spn	x8,x2,128
     9fa:	3305                	c.jal	71a <fc_layer+0x1a2>
     9fc:	0200                	c.addi4spn	x8,x2,256
     9fe:	0204                	c.addi4spn	x9,x2,256
     a00:	0c090003          	lb	x0,192(x18)
     a04:	0100                	c.addi4spn	x8,x2,128
     a06:	4505                	c.li	x10,1
     a08:	0200                	c.addi4spn	x8,x2,256
     a0a:	0204                	c.addi4spn	x9,x2,256
     a0c:	0c097f03          	.4byte	0xc097f03
     a10:	0100                	c.addi4spn	x8,x2,128
     a12:	2f05                	c.jal	1142 <cnn_pool+0x3ca>
     a14:	0200                	c.addi4spn	x8,x2,256
     a16:	0104                	c.addi4spn	x9,x2,128
     a18:	0c090003          	lb	x0,192(x18)
     a1c:	0100                	c.addi4spn	x8,x2,128
     a1e:	4005                	c.li	x0,1
     a20:	0200                	c.addi4spn	x8,x2,256
     a22:	0204                	c.addi4spn	x9,x2,256
     a24:	0c097f03          	.4byte	0xc097f03
     a28:	0100                	c.addi4spn	x8,x2,128
     a2a:	2705                	c.jal	114a <cnn_pool+0x3d2>
     a2c:	0200                	c.addi4spn	x8,x2,256
     a2e:	0104                	c.addi4spn	x9,x2,128
     a30:	0c090003          	lb	x0,192(x18)
     a34:	0100                	c.addi4spn	x8,x2,128
     a36:	1105                	c.addi	x2,-31
     a38:	0c090703          	lb	x14,192(x18)
     a3c:	0100                	c.addi4spn	x8,x2,128
     a3e:	4e05                	c.li	x28,1
     a40:	18090203          	lb	x4,384(x18)
     a44:	0100                	c.addi4spn	x8,x2,128
     a46:	3f05                	c.jal	976 <cnn_layer+0x66>
     a48:	14090003          	lb	x0,320(x18)
     a4c:	0100                	c.addi4spn	x8,x2,128
     a4e:	2005                	c.jal	a6e <cnn_layer+0x15e>
     a50:	24090003          	lb	x0,576(x18)
     a54:	0100                	c.addi4spn	x8,x2,128
     a56:	3f05                	c.jal	986 <cnn_layer+0x76>
     a58:	14090003          	lb	x0,320(x18)
     a5c:	0100                	c.addi4spn	x8,x2,128
     a5e:	3d05                	c.jal	88e <fc_soft_max+0x2>
     a60:	10090003          	lb	x0,256(x18)
     a64:	0100                	c.addi4spn	x8,x2,128
     a66:	1905                	c.addi	x18,-31
     a68:	24090103          	lb	x2,576(x18)
     a6c:	0100                	c.addi4spn	x8,x2,128
     a6e:	4e05                	c.li	x28,1
     a70:	04090203          	lb	x4,64(x18)
     a74:	0100                	c.addi4spn	x8,x2,128
     a76:	3f05                	c.jal	9a6 <cnn_layer+0x96>
     a78:	14090003          	lb	x0,320(x18)
     a7c:	0100                	c.addi4spn	x8,x2,128
     a7e:	2005                	c.jal	a9e <cnn_layer+0x18e>
     a80:	24090003          	lb	x0,576(x18)
     a84:	0100                	c.addi4spn	x8,x2,128
     a86:	3f05                	c.jal	9b6 <cnn_layer+0xa6>
     a88:	14090003          	lb	x0,320(x18)
     a8c:	0100                	c.addi4spn	x8,x2,128
     a8e:	3d05                	c.jal	8be <fc_soft_max+0x32>
     a90:	10090003          	lb	x0,256(x18)
     a94:	0100                	c.addi4spn	x8,x2,128
     a96:	1905                	c.addi	x18,-31
     a98:	24090103          	lb	x2,576(x18)
     a9c:	0100                	c.addi4spn	x8,x2,128
     a9e:	3d05                	c.jal	8ce <fc_soft_max+0x42>
     aa0:	0200                	c.addi4spn	x8,x2,256
     aa2:	0204                	c.addi4spn	x9,x2,256
     aa4:	04097103          	.4byte	0x4097103
     aa8:	0100                	c.addi4spn	x8,x2,128
     aaa:	2705                	c.jal	11ca <cnn_input_generator+0x76>
     aac:	0200                	c.addi4spn	x8,x2,256
     aae:	0104                	c.addi4spn	x9,x2,128
     ab0:	0c090003          	lb	x0,192(x18)
     ab4:	0100                	c.addi4spn	x8,x2,128
     ab6:	3905                	c.jal	6e6 <fc_layer+0x16e>
     ab8:	0200                	c.addi4spn	x8,x2,256
     aba:	0204                	c.addi4spn	x9,x2,256
     abc:	0c097f03          	.4byte	0xc097f03
     ac0:	0100                	c.addi4spn	x8,x2,128
     ac2:	2305                	c.jal	fe2 <cnn_pool+0x26a>
     ac4:	0200                	c.addi4spn	x8,x2,256
     ac6:	0104                	c.addi4spn	x9,x2,128
     ac8:	0c090003          	lb	x0,192(x18)
     acc:	0100                	c.addi4spn	x8,x2,128
     ace:	3805                	c.jal	2fe <tj_malloc+0xe>
     ad0:	0200                	c.addi4spn	x8,x2,256
     ad2:	0204                	c.addi4spn	x9,x2,256
     ad4:	0c097f03          	.4byte	0xc097f03
     ad8:	0100                	c.addi4spn	x8,x2,128
     ada:	1e05                	c.addi	x28,-31
     adc:	0200                	c.addi4spn	x8,x2,256
     ade:	0104                	c.addi4spn	x9,x2,128
     ae0:	0c090003          	lb	x0,192(x18)
     ae4:	0100                	c.addi4spn	x8,x2,128
     ae6:	0105                	c.addi	x2,1
     ae8:	0c091603          	lh	x12,192(x18)
     aec:	0100                	c.addi4spn	x8,x2,128
     aee:	9705                	c.srai	x14,0x21
     af0:	0301                	c.addi	x6,0
     af2:	0902                	c.slli64	x18
     af4:	001c                	.2byte	0x1c
     af6:	0501                	c.addi	x10,0
     af8:	0329                	c.addi	x6,10
     afa:	0901                	c.addi	x18,0
     afc:	002c                	c.addi4spn	x11,x2,8
     afe:	0501                	c.addi	x10,0
     b00:	0324                	c.addi4spn	x9,x2,392
     b02:	0900                	c.addi4spn	x8,x2,144
     b04:	0008                	.2byte	0x8
     b06:	0501                	c.addi	x10,0
     b08:	0335                	c.addi	x6,13
     b0a:	0900                	c.addi4spn	x8,x2,144
     b0c:	0008                	.2byte	0x8
     b0e:	0501                	c.addi	x10,0
     b10:	0344                	c.addi4spn	x9,x2,388
     b12:	0900                	c.addi4spn	x8,x2,144
     b14:	0008                	.2byte	0x8
     b16:	0501                	c.addi	x10,0
     b18:	0309                	c.addi	x6,2
     b1a:	0900                	c.addi4spn	x8,x2,144
     b1c:	0008                	.2byte	0x8
     b1e:	0501                	c.addi	x10,0
     b20:	0311                	c.addi	x6,4
     b22:	00080903          	lb	x18,0(x16)
     b26:	0501                	c.addi	x10,0
     b28:	0305                	c.addi	x6,1
     b2a:	0900                	c.addi4spn	x8,x2,144
     b2c:	0004                	.2byte	0x4
     b2e:	0501                	c.addi	x10,0
     b30:	0316                	c.slli	x6,0x5
     b32:	0901                	c.addi	x18,0
     b34:	0004                	.2byte	0x4
     b36:	0501                	c.addi	x10,0
     b38:	0309                	c.addi	x6,2
     b3a:	0900                	c.addi4spn	x8,x2,144
     b3c:	0004                	.2byte	0x4
     b3e:	0501                	c.addi	x10,0
     b40:	031a                	c.slli	x6,0x6
     b42:	0901                	c.addi	x18,0
     b44:	0004                	.2byte	0x4
     b46:	0501                	c.addi	x10,0
     b48:	030d                	c.addi	x6,3
     b4a:	0900                	c.addi4spn	x8,x2,144
     b4c:	0004                	.2byte	0x4
     b4e:	0501                	c.addi	x10,0
     b50:	0311                	c.addi	x6,4
     b52:	0901                	c.addi	x18,0
     b54:	0004                	.2byte	0x4
     b56:	0501                	c.addi	x10,0
     b58:	09020343          	.4byte	0x9020343
     b5c:	0018                	.2byte	0x18
     b5e:	0501                	c.addi	x10,0
     b60:	0352                	c.slli	x6,0x14
     b62:	0900                	c.addi4spn	x8,x2,144
     b64:	0014                	.2byte	0x14
     b66:	0501                	c.addi	x10,0
     b68:	0362                	c.slli	x6,0x18
     b6a:	0900                	c.addi4spn	x8,x2,144
     b6c:	000c                	.2byte	0xc
     b6e:	0501                	c.addi	x10,0
     b70:	0320                	c.addi4spn	x8,x2,392
     b72:	0900                	c.addi4spn	x8,x2,144
     b74:	000c                	.2byte	0xc
     b76:	0501                	c.addi	x10,0
     b78:	0900035b          	.4byte	0x900035b
     b7c:	0014                	.2byte	0x14
     b7e:	0501                	c.addi	x10,0
     b80:	0900033b          	.4byte	0x900033b
     b84:	001c                	.2byte	0x1c
     b86:	0501                	c.addi	x10,0
     b88:	0319                	c.addi	x6,6
     b8a:	0901                	c.addi	x18,0
     b8c:	0024                	c.addi4spn	x9,x2,8
     b8e:	0501                	c.addi	x10,0
     b90:	0320                	c.addi4spn	x8,x2,392
     b92:	0902                	c.slli64	x18
     b94:	0004                	.2byte	0x4
     b96:	0501                	c.addi	x10,0
     b98:	0900033b          	.4byte	0x900033b
     b9c:	0014                	.2byte	0x14
     b9e:	0501                	c.addi	x10,0
     ba0:	0319                	c.addi	x6,6
     ba2:	0901                	c.addi	x18,0
     ba4:	0024                	c.addi4spn	x9,x2,8
     ba6:	0501                	c.addi	x10,0
     ba8:	031e                	c.slli	x6,0x7
     baa:	0902                	c.slli64	x18
                        for (k_c_itr = 0; k_c_itr < kernel_size; k_c_itr++) {
     bac:	0004                	.2byte	0x4
     bae:	0501                	c.addi	x10,0
     bb0:	0311                	c.addi	x6,4
     bb2:	0900                	c.addi4spn	x8,x2,144
     bb4:	0004                	.2byte	0x4
     bb6:	0501                	c.addi	x10,0
     bb8:	0322                	c.slli	x6,0x8
     bba:	0901                	c.addi	x18,0
     bbc:	0004                	.2byte	0x4
     bbe:	0501                	c.addi	x10,0
     bc0:	0315                	c.addi	x6,5
     bc2:	0900                	c.addi4spn	x8,x2,144
                    for (k_r_itr = 0; k_r_itr < kernel_size; k_r_itr++) {
     bc4:	0004                	.2byte	0x4
     bc6:	0501                	c.addi	x10,0
     bc8:	0901032f          	.4byte	0x901032f
     bcc:	0004                	.2byte	0x4
     bce:	0501                	c.addi	x10,0
     bd0:	0900033f 05010014 	.8byte	0x50100140900033f
     bd8:	0348                	c.addi4spn	x10,x2,388
     bda:	0900                	c.addi4spn	x8,x2,144
        		for (i_ch_itr = 0; i_ch_itr < input_channel; i_ch_itr++) {
     bdc:	000c                	.2byte	0xc
     bde:	0501                	c.addi	x10,0
     be0:	0359                	c.addi	x6,22
     be2:	0900                	c.addi4spn	x8,x2,144
     be4:	0008                	.2byte	0x8
     be6:	0501                	c.addi	x10,0
     be8:	0362                	c.slli	x6,0x18
     bea:	0900                	c.addi4spn	x8,x2,144
     bec:	000c                	.2byte	0xc
     bee:	0501                	c.addi	x10,0
     bf0:	09000327          	.4byte	0x9000327
                switch (af_num) {
     bf4:	0008                	.2byte	0x8
     bf6:	0501                	c.addi	x10,0
     bf8:	0319                	c.addi	x6,6
     bfa:	0901                	c.addi	x18,0
     bfc:	0020                	c.addi4spn	x8,x2,8
     bfe:	0501                	c.addi	x10,0
     c00:	034d                	c.addi	x6,19
     c02:	0902                	c.slli64	x18
     c04:	0018                	.2byte	0x18
     c06:	0501                	c.addi	x10,0
     c08:	035e                	c.slli	x6,0x17
     c0a:	0900                	c.addi4spn	x8,x2,144
                        outputs[o_ch_itr][o_r_itr][o_c_itr] = relu_af(outputs[o_ch_itr][o_r_itr][o_c_itr]);
     c0c:	0014                	.2byte	0x14
     c0e:	0501                	c.addi	x10,0
     c10:	0328                	c.addi4spn	x10,x2,392
     c12:	0900                	c.addi4spn	x8,x2,144
     c14:	0024                	c.addi4spn	x9,x2,8
     c16:	0501                	c.addi	x10,0
     c18:	0189                	c.addi	x3,2 # 1fc2 <__global_pointer$+0x2>
     c1a:	14090003          	lb	x0,320(x18)
     c1e:	0100                	c.addi4spn	x8,x2,128
     c20:	4305                	c.li	x6,1
     c22:	0c090003          	lb	x0,192(x18)
     c26:	0100                	c.addi4spn	x8,x2,128
     c28:	2105                	c.jal	1048 <cnn_pool+0x2d0>
     c2a:	24090103          	lb	x2,576(x18)
     c2e:	0100                	c.addi4spn	x8,x2,128
     c30:	4305                	c.li	x6,1
     c32:	04090203          	lb	x4,64(x18)
     c36:	0100                	c.addi4spn	x8,x2,128
     c38:	2105                	c.jal	1058 <cnn_pool+0x2e0>
     c3a:	78090103          	lb	x2,1920(x18)
     c3e:	0100                	c.addi4spn	x8,x2,128
     c40:	4505                	c.li	x10,1
     c42:	0200                	c.addi4spn	x8,x2,256
     c44:	0204                	c.addi4spn	x9,x2,256
     c46:	04097803          	.4byte	0x4097803
     c4a:	0100                	c.addi4spn	x8,x2,128
     c4c:	2f05                	c.jal	137c <cnn_weight_generator+0x148>
     c4e:	0200                	c.addi4spn	x8,x2,256
     c50:	0104                	c.addi4spn	x9,x2,128
     c52:	0c090003          	lb	x0,192(x18)
     c56:	0100                	c.addi4spn	x8,x2,128
     c58:	4105                	c.li	x2,1
     c5a:	0200                	c.addi4spn	x8,x2,256
     c5c:	0204                	c.addi4spn	x9,x2,256
     c5e:	0c097f03          	.4byte	0xc097f03
     c62:	0100                	c.addi4spn	x8,x2,128
     c64:	2b05                	c.jal	1194 <cnn_input_generator+0x40>
     c66:	0200                	c.addi4spn	x8,x2,256
     c68:	0104                	c.addi4spn	x9,x2,128
     c6a:	0c090003          	lb	x0,192(x18)
     c6e:	0100                	c.addi4spn	x8,x2,128
     c70:	1105                	c.addi	x2,-31
     c72:	0c090d03          	lb	x26,192(x18)
     c76:	0100                	c.addi4spn	x8,x2,128
     c78:	4405                	c.li	x8,1
     c7a:	0c090203          	lb	x4,192(x18)
     c7e:	0100                	c.addi4spn	x8,x2,128
     c80:	5505                	c.li	x10,-31
     c82:	14090003          	lb	x0,320(x18)
     c86:	0100                	c.addi4spn	x8,x2,128
     c88:	6e05                	c.lui	x28,0x1
     c8a:	24090003          	lb	x0,576(x18)
                        break;
     c8e:	0100                	c.addi4spn	x8,x2,128
                        outputs[o_ch_itr][o_r_itr][o_c_itr] = relu_af(outputs[o_ch_itr][o_r_itr][o_c_itr]);
     c90:	2005                	c.jal	cb0 <cnn_layer+0x3a0>
     c92:	08090003          	lb	x0,128(x18)
     c96:	0100                	c.addi4spn	x8,x2,128
     c98:	5f05                	c.li	x30,-31
     c9a:	14090003          	lb	x0,320(x18)
     c9e:	0100                	c.addi4spn	x8,x2,128
     ca0:	3b05                	c.jal	9d0 <cnn_layer+0xc0>
     ca2:	04090003          	lb	x0,64(x18)
     ca6:	0100                	c.addi4spn	x8,x2,128
     ca8:	1905                	c.addi	x18,-31
     caa:	24090103          	lb	x2,576(x18)
     cae:	0100                	c.addi4spn	x8,x2,128
     cb0:	3d05                	c.jal	ae0 <cnn_layer+0x1d0>
     cb2:	0200                	c.addi4spn	x8,x2,256
     cb4:	0204                	c.addi4spn	x9,x2,256
     cb6:	04096703          	.4byte	0x4096703
     cba:	0100                	c.addi4spn	x8,x2,128
     cbc:	2705                	c.jal	13dc <cnn_to_fc+0x5c>
     cbe:	0200                	c.addi4spn	x8,x2,256
     cc0:	0104                	c.addi4spn	x9,x2,128
     cc2:	0c090003          	lb	x0,192(x18)
     cc6:	0100                	c.addi4spn	x8,x2,128
     cc8:	3905                	c.jal	8f8 <fc_soft_max+0x6c>
     cca:	0200                	c.addi4spn	x8,x2,256
     ccc:	0204                	c.addi4spn	x9,x2,256
     cce:	0c097f03          	.4byte	0xc097f03
     cd2:	0100                	c.addi4spn	x8,x2,128
     cd4:	2305                	c.jal	11f4 <cnn_input_generator+0xa0>
     cd6:	0200                	c.addi4spn	x8,x2,256
     cd8:	0104                	c.addi4spn	x9,x2,128
     cda:	0c090003          	lb	x0,192(x18)
     cde:	0100                	c.addi4spn	x8,x2,128
     ce0:	3605                	c.jal	800 <fc_weight_generator+0x58>
     ce2:	0200                	c.addi4spn	x8,x2,256
     ce4:	0204                	c.addi4spn	x9,x2,256
     ce6:	0c097f03          	.4byte	0xc097f03
     cea:	0100                	c.addi4spn	x8,x2,128
     cec:	1d05                	c.addi	x26,-31
     cee:	0200                	c.addi4spn	x8,x2,256
     cf0:	0104                	c.addi4spn	x9,x2,128
     cf2:	0c090003          	lb	x0,192(x18)
     cf6:	0100                	c.addi4spn	x8,x2,128
     cf8:	0105                	c.addi	x2,1
     cfa:	0c092003          	lw	x0,192(x18)
     cfe:	0100                	c.addi4spn	x8,x2,128
     d00:	5105                	c.li	x2,-31
     d02:	14090203          	lb	x4,320(x18)
     d06:	0100                	c.addi4spn	x8,x2,128
     d08:	1005                	c.addi	x0,-31
     d0a:	1c090203          	lb	x4,448(x18)
     d0e:	0100                	c.addi4spn	x8,x2,128
                        break;
     d10:	0205                	c.addi	x4,1 # 1 <crt+0x1>
     d12:	04090003          	lb	x0,64(x18)
            for (o_c_itr = 0; o_c_itr < output_size; o_c_itr++) {
     d16:	0100                	c.addi4spn	x8,x2,128
     d18:	1605                	c.addi	x12,-31
     d1a:	04090103          	lb	x2,64(x18)
     d1e:	0100                	c.addi4spn	x8,x2,128
     d20:	0905                	c.addi	x18,1
     d22:	04090003          	lb	x0,64(x18)
     d26:	0100                	c.addi4spn	x8,x2,128
     d28:	1a05                	c.addi	x20,-31
     d2a:	04090103          	lb	x2,64(x18)
        for (o_r_itr = 0; o_r_itr < output_size; o_r_itr++) {
     d2e:	0100                	c.addi4spn	x8,x2,128
     d30:	0d05                	c.addi	x26,1
     d32:	04090003          	lb	x0,64(x18)
     d36:	0100                	c.addi4spn	x8,x2,128
     d38:	3705                	c.jal	c58 <cnn_layer+0x348>
     d3a:	0200                	c.addi4spn	x8,x2,256
     d3c:	0304                	c.addi4spn	x9,x2,384
     d3e:	04090103          	lb	x2,64(x18)
     d42:	0100                	c.addi4spn	x8,x2,128
	for (o_ch_itr = 0; o_ch_itr < output_channel; o_ch_itr++) {
     d44:	4305                	c.li	x6,1
     d46:	0200                	c.addi4spn	x8,x2,256
     d48:	0304                	c.addi4spn	x9,x2,384
     d4a:	0c090003          	lb	x0,192(x18)
     d4e:	0100                	c.addi4spn	x8,x2,128
     d50:	1705                	c.addi	x14,-31
     d52:	0200                	c.addi4spn	x8,x2,256
     d54:	0304                	c.addi4spn	x9,x2,384
     d56:	04090003          	lb	x0,64(x18)
     d5a:	0100                	c.addi4spn	x8,x2,128
}
     d5c:	4805                	c.li	x16,1
     d5e:	0200                	c.addi4spn	x8,x2,256
     d60:	0304                	c.addi4spn	x9,x2,384
     d62:	14090003          	lb	x0,320(x18)
     d66:	0100                	c.addi4spn	x8,x2,128
     d68:	3405                	c.jal	788 <fc_input_generator+0x58>
     d6a:	0200                	c.addi4spn	x8,x2,256
     d6c:	0304                	c.addi4spn	x9,x2,384
     d6e:	04090003          	lb	x0,64(x18)
     d72:	0100                	c.addi4spn	x8,x2,128
     d74:	3c05                	c.jal	7a4 <fc_input_generator+0x74>
     d76:	0200                	c.addi4spn	x8,x2,256
void cnn_pool(int inputs[5][5][5], int outputs[5][5][5], int feature_channel, int input_size, int kernel_size, int stride, int zero_pad, int pool_num){
     d78:	0304                	c.addi4spn	x9,x2,384
     d7a:	24097f03          	.4byte	0x24097f03
     d7e:	0100                	c.addi4spn	x8,x2,128
     d80:	2705                	c.jal	14a0 <main+0x1c>
     d82:	0200                	c.addi4spn	x8,x2,256
     d84:	0104                	c.addi4spn	x9,x2,128
     d86:	0c090003          	lb	x0,192(x18)
     d8a:	0100                	c.addi4spn	x8,x2,128
     d8c:	3805                	c.jal	5bc <fc_layer+0x44>
     d8e:	0200                	c.addi4spn	x8,x2,256
     d90:	0204                	c.addi4spn	x9,x2,256
     d92:	0c097f03          	.4byte	0xc097f03
     d96:	0100                	c.addi4spn	x8,x2,128
     d98:	2305                	c.jal	12b8 <cnn_weight_generator+0x84>
     d9a:	0200                	c.addi4spn	x8,x2,256
     d9c:	0104                	c.addi4spn	x9,x2,128
     d9e:	0c090003          	lb	x0,192(x18)
     da2:	0100                	c.addi4spn	x8,x2,128
    int output_size = ((input_size + (2 * zero_pad) - kernel_size) >> stride) + 1;
     da4:	3705                	c.jal	cc4 <cnn_layer+0x3b4>
     da6:	0200                	c.addi4spn	x8,x2,256
     da8:	0204                	c.addi4spn	x9,x2,256
     daa:	0c097f03          	.4byte	0xc097f03
     dae:	0100                	c.addi4spn	x8,x2,128
     db0:	1e05                	c.addi	x28,-31 # fe1 <cnn_pool+0x269>
     db2:	0200                	c.addi4spn	x8,x2,256
     db4:	0104                	c.addi4spn	x9,x2,128
     db6:	0c090003          	lb	x0,192(x18)
     dba:	0100                	c.addi4spn	x8,x2,128
     dbc:	0105                	c.addi	x2,1
     dbe:	0c090703          	lb	x14,192(x18)
     dc2:	0100                	c.addi4spn	x8,x2,128
     dc4:	7b05                	c.lui	x22,0xfffe1
     dc6:	18090203          	lb	x4,384(x18)
     dca:	0100                	c.addi4spn	x8,x2,128
    for (ch_itr = 0; ch_itr < feature_channel; ch_itr++) {
     dcc:	1005                	c.addi	x0,-31
     dce:	24090203          	lb	x4,576(x18)
     dd2:	0100                	c.addi4spn	x8,x2,128
        for (o_r_itr = 0; o_r_itr < output_size; o_r_itr++) {
     dd4:	0205                	c.addi	x4,1 # 1 <crt+0x1>
     dd6:	04090003          	lb	x0,64(x18)
     dda:	0100                	c.addi4spn	x8,x2,128
            for (o_c_itr = 0; o_c_itr < output_size; o_c_itr++) {
     ddc:	1e05                	c.addi	x28,-31
     dde:	04090103          	lb	x2,64(x18)
     de2:	0100                	c.addi4spn	x8,x2,128
                switch (pool_num) {
     de4:	2a05                	c.jal	f14 <cnn_pool+0x19c>
     de6:	0c090003          	lb	x0,192(x18)
     dea:	0100                	c.addi4spn	x8,x2,128
     dec:	1005                	c.addi	x0,-31
     dee:	04090003          	lb	x0,64(x18)
     df2:	0100                	c.addi4spn	x8,x2,128
     df4:	2f05                	c.jal	1524 <main+0xa0>
     df6:	10090003          	lb	x0,256(x18)
     dfa:	0100                	c.addi4spn	x8,x2,128
                        outputs[ch_itr][o_r_itr][o_c_itr] = inputs[ch_itr][stride*o_r_itr][stride*o_c_itr];
     dfc:	1b05                	c.addi	x22,-31 # fffe0fe1 <_sp+0xfffd0fe1>
     dfe:	04090003          	lb	x0,64(x18)
     e02:	0100                	c.addi4spn	x8,x2,128
     e04:	1705                	c.addi	x14,-31
     e06:	04090103          	lb	x2,64(x18)
     e0a:	0100                	c.addi4spn	x8,x2,128
     e0c:	0905                	c.addi	x18,1
     e0e:	04090003          	lb	x0,64(x18)
     e12:	0100                	c.addi4spn	x8,x2,128
     e14:	1a05                	c.addi	x20,-31
     e16:	04090103          	lb	x2,64(x18)
     e1a:	0100                	c.addi4spn	x8,x2,128
     e1c:	0d05                	c.addi	x26,1
     e1e:	04090003          	lb	x0,64(x18)
     e22:	0100                	c.addi4spn	x8,x2,128
     e24:	1e05                	c.addi	x28,-31
     e26:	04090103          	lb	x2,64(x18)
     e2a:	0100                	c.addi4spn	x8,x2,128
     e2c:	1105                	c.addi	x2,-31
     e2e:	04090003          	lb	x0,64(x18)
     e32:	0100                	c.addi4spn	x8,x2,128
     e34:	4605                	c.li	x12,1
     e36:	0200                	c.addi4spn	x8,x2,256
     e38:	0304                	c.addi4spn	x9,x2,384
     e3a:	04090103          	lb	x2,64(x18)
     e3e:	0100                	c.addi4spn	x8,x2,128
     e40:	5205                	c.li	x4,-31
     e42:	0200                	c.addi4spn	x8,x2,256
     e44:	0304                	c.addi4spn	x9,x2,384
     e46:	0c090003          	lb	x0,192(x18)
     e4a:	0100                	c.addi4spn	x8,x2,128
     e4c:	1c05                	c.addi	x24,-31
     e4e:	0200                	c.addi4spn	x8,x2,256
     e50:	0304                	c.addi4spn	x9,x2,384
     e52:	04090003          	lb	x0,64(x18)
     e56:	0100                	c.addi4spn	x8,x2,128
     e58:	5705                	c.li	x14,-31
     e5a:	0200                	c.addi4spn	x8,x2,256
     e5c:	0304                	c.addi4spn	x9,x2,384
     e5e:	14090003          	lb	x0,320(x18)
     e62:	0100                	c.addi4spn	x8,x2,128
     e64:	4305                	c.li	x6,1
     e66:	0200                	c.addi4spn	x8,x2,256
     e68:	0304                	c.addi4spn	x9,x2,384
     e6a:	04090003          	lb	x0,64(x18)
     e6e:	0100                	c.addi4spn	x8,x2,128
     e70:	4105                	c.li	x2,1
     e72:	0200                	c.addi4spn	x8,x2,256
     e74:	0304                	c.addi4spn	x9,x2,384
     e76:	40097f03          	.4byte	0x40097f03
     e7a:	0100                	c.addi4spn	x8,x2,128
                        break;
     e7c:	2b05                	c.jal	13ac <cnn_to_fc+0x2c>
     e7e:	0200                	c.addi4spn	x8,x2,256
                        outputs[ch_itr][o_r_itr][o_c_itr] = 0;
     e80:	0104                	c.addi4spn	x9,x2,128
     e82:	0c090003          	lb	x0,192(x18)
     e86:	0100                	c.addi4spn	x8,x2,128
     e88:	3d05                	c.jal	cb8 <cnn_layer+0x3a8>
     e8a:	0200                	c.addi4spn	x8,x2,256
     e8c:	0204                	c.addi4spn	x9,x2,256
     e8e:	0c097f03          	.4byte	0xc097f03
     e92:	0100                	c.addi4spn	x8,x2,128
     e94:	2705                	c.jal	15b4 <main+0x130>
     e96:	0200                	c.addi4spn	x8,x2,256
     e98:	0104                	c.addi4spn	x9,x2,128
     e9a:	0c090003          	lb	x0,192(x18)
     e9e:	0100                	c.addi4spn	x8,x2,128
     ea0:	3e05                	c.jal	9d0 <cnn_layer+0xc0>
     ea2:	0200                	c.addi4spn	x8,x2,256
     ea4:	0204                	c.addi4spn	x9,x2,256
     ea6:	0c097f03          	.4byte	0xc097f03
     eaa:	0100                	c.addi4spn	x8,x2,128
     eac:	2505                	c.jal	14cc <main+0x48>
     eae:	0200                	c.addi4spn	x8,x2,256
     eb0:	0104                	c.addi4spn	x9,x2,128
     eb2:	0c090003          	lb	x0,192(x18)
     eb6:	0100                	c.addi4spn	x8,x2,128
                        break;
     eb8:	3805                	c.jal	6e8 <fc_layer+0x170>
     eba:	0200                	c.addi4spn	x8,x2,256
                for (k_r_itr = 0; k_r_itr < kernel_size; k_r_itr++) {
     ebc:	0204                	c.addi4spn	x9,x2,256
     ebe:	0c097e03          	.4byte	0xc097e03
     ec2:	0100                	c.addi4spn	x8,x2,128
                    for (k_c_itr = 0; k_c_itr < kernel_size; k_c_itr++) {
     ec4:	1e05                	c.addi	x28,-31
     ec6:	0200                	c.addi4spn	x8,x2,256
     ec8:	0104                	c.addi4spn	x9,x2,128
     eca:	0c090003          	lb	x0,192(x18)
                        new_candidate = inputs[ch_itr][(stride*o_r_itr)+k_r_itr][(stride*o_c_itr)+k_c_itr];
     ece:	0100                	c.addi4spn	x8,x2,128
     ed0:	0105                	c.addi	x2,1
     ed2:	0c090a03          	lb	x20,192(x18)
     ed6:	0100                	c.addi4spn	x8,x2,128
     ed8:	6b05                	c.lui	x22,0x1
     eda:	18090203          	lb	x4,384(x18)
     ede:	0100                	c.addi4spn	x8,x2,128
     ee0:	0e05                	c.addi	x28,1
     ee2:	1c090203          	lb	x4,448(x18)
     ee6:	0100                	c.addi4spn	x8,x2,128
     ee8:	0205                	c.addi	x4,1 # 1 <crt+0x1>
     eea:	04090003          	lb	x0,64(x18)
     eee:	0100                	c.addi4spn	x8,x2,128
     ef0:	1405                	c.addi	x8,-31
     ef2:	04090103          	lb	x2,64(x18)
     ef6:	0100                	c.addi4spn	x8,x2,128
     ef8:	0905                	c.addi	x18,1
     efa:	04090003          	lb	x0,64(x18)
     efe:	0100                	c.addi4spn	x8,x2,128
     f00:	1805                	c.addi	x16,-31
     f02:	04090103          	lb	x2,64(x18)
     f06:	0100                	c.addi4spn	x8,x2,128
     f08:	0d05                	c.addi	x26,1
     f0a:	04090003          	lb	x0,64(x18)
     f0e:	0100                	c.addi4spn	x8,x2,128
     f10:	7405                	c.lui	x8,0xfffe1
     f12:	0200                	c.addi4spn	x8,x2,256
     f14:	0304                	c.addi4spn	x9,x2,384
     f16:	04090103          	lb	x2,64(x18)
     f1a:	0100                	c.addi4spn	x8,x2,128
     f1c:	2305                	c.jal	143c <cnn_to_fc+0xbc>
     f1e:	0200                	c.addi4spn	x8,x2,256
     f20:	0304                	c.addi4spn	x9,x2,384
     f22:	14090003          	lb	x0,320(x18)
     f26:	0100                	c.addi4spn	x8,x2,128
                        switch (pool_num) {
     f28:	3405                	c.jal	948 <cnn_layer+0x38>
     f2a:	0200                	c.addi4spn	x8,x2,256
     f2c:	0304                	c.addi4spn	x9,x2,384
     f2e:	0c090003          	lb	x0,192(x18)
     f32:	0100                	c.addi4spn	x8,x2,128
     f34:	4d05                	c.li	x26,1
     f36:	0200                	c.addi4spn	x8,x2,256
     f38:	0304                	c.addi4spn	x9,x2,384
     f3a:	08090003          	lb	x0,128(x18)
     f3e:	0100                	c.addi4spn	x8,x2,128
                                outputs[ch_itr][o_r_itr][o_c_itr] = (outputs[ch_itr][o_r_itr][o_c_itr] < new_candidate) ? new_candidate : outputs[ch_itr][o_r_itr][o_c_itr];
     f40:	4605                	c.li	x12,1
     f42:	0200                	c.addi4spn	x8,x2,256
     f44:	0304                	c.addi4spn	x9,x2,384
     f46:	0c090003          	lb	x0,192(x18)
     f4a:	0100                	c.addi4spn	x8,x2,128
     f4c:	5f05                	c.li	x30,-31
     f4e:	0200                	c.addi4spn	x8,x2,256
     f50:	0304                	c.addi4spn	x9,x2,384
     f52:	04090003          	lb	x0,64(x18)
     f56:	0100                	c.addi4spn	x8,x2,128
     f58:	1b05                	c.addi	x22,-31 # fe1 <cnn_pool+0x269>
     f5a:	0200                	c.addi4spn	x8,x2,256
     f5c:	0304                	c.addi4spn	x9,x2,384
     f5e:	08090003          	lb	x0,128(x18)
     f62:	0100                	c.addi4spn	x8,x2,128
     f64:	8305                	c.srli	x14,0x1
     f66:	0001                	c.addi	x0,0
     f68:	0402                	c.slli64	x8
     f6a:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
     f6e:	000c                	.2byte	0xc
     f70:	0501                	c.addi	x10,0
     f72:	04020067          	jalr	x0,64(x4) # 0 <crt>
     f76:	09000303          	lb	x6,144(x0) # 90 <crt+0x90>
     f7a:	0024                	c.addi4spn	x9,x2,8
     f7c:	0501                	c.addi	x10,0
     f7e:	003c                	c.addi4spn	x15,x2,8
     f80:	0402                	c.slli64	x8
     f82:	097f0303          	lb	x6,151(x30)
     f86:	0004                	.2byte	0x4
     f88:	0501                	c.addi	x10,0
     f8a:	04020023          	sb	x0,64(x4) # 40 <crt+0x40>
     f8e:	0301                	c.addi	x6,0
     f90:	0900                	c.addi4spn	x8,x2,144
     f92:	000c                	.2byte	0xc
     f94:	0501                	c.addi	x10,0
     f96:	0038                	c.addi4spn	x14,x2,8
     f98:	0402                	c.slli64	x8
     f9a:	0302                	c.slli64	x6
     f9c:	097f                	.2byte	0x97f
     f9e:	000c                	.2byte	0xc
     fa0:	0501                	c.addi	x10,0
     fa2:	001f 0402 0301      	.byte	0x1f, 0x00, 0x02, 0x04, 0x01, 0x03
     fa8:	0900                	c.addi4spn	x8,x2,144
     faa:	000c                	.2byte	0xc
     fac:	0501                	c.addi	x10,0
     fae:	04020037          	lui	x0,0x4020
     fb2:	0302                	c.slli64	x6
     fb4:	097f                	.2byte	0x97f
     fb6:	000c                	.2byte	0xc
     fb8:	0501                	c.addi	x10,0
     fba:	001a                	c.slli	x0,0x6
                                break;
     fbc:	0402                	c.slli64	x8
     fbe:	0301                	c.addi	x6,0
                                outputs[ch_itr][o_r_itr][o_c_itr] += new_candidate;
     fc0:	0900                	c.addi4spn	x8,x2,144
     fc2:	000c                	.2byte	0xc
     fc4:	0501                	c.addi	x10,0
     fc6:	0301                	c.addi	x6,0
     fc8:	000c0907          	.4byte	0xc0907
     fcc:	0501                	c.addi	x10,0
     fce:	0903030b          	.4byte	0x903030b
     fd2:	0014                	.2byte	0x14
     fd4:	0501                	c.addi	x10,0
     fd6:	030e                	c.slli	x6,0x3
     fd8:	0919                	c.addi	x18,6
     fda:	0014                	.2byte	0x14
     fdc:	0501                	c.addi	x10,0
     fde:	0305                	c.addi	x6,1
     fe0:	0900                	c.addi4spn	x8,x2,144
     fe2:	0004                	.2byte	0x4
     fe4:	0501                	c.addi	x10,0
     fe6:	001c                	.2byte	0x1c
     fe8:	0402                	c.slli64	x8
     fea:	09020303          	lb	x6,144(x4) # 90 <crt+0x90>
     fee:	0004                	.2byte	0x4
     ff0:	0501                	c.addi	x10,0
     ff2:	0402001b          	.4byte	0x402001b
     ff6:	09010303          	lb	x6,144(x2)
     ffa:	0008                	.2byte	0x8
     ffc:	0501                	c.addi	x10,0
     ffe:	0018                	.2byte	0x18
    1000:	0402                	c.slli64	x8
    1002:	09010303          	lb	x6,144(x2)
    1006:	0008                	.2byte	0x8
    1008:	0501                	c.addi	x10,0
    100a:	0019                	c.addi	x0,6
    100c:	0402                	c.slli64	x8
    100e:	09010303          	lb	x6,144(x2)
    1012:	0008                	.2byte	0x8
    1014:	0501                	c.addi	x10,0
    1016:	0014                	.2byte	0x14
    1018:	0402                	c.slli64	x8
    101a:	09010303          	lb	x6,144(x2)
    101e:	0008                	.2byte	0x8
    1020:	0501                	c.addi	x10,0
    1022:	04020017          	auipc	x0,0x4020
    1026:	09010303          	lb	x6,144(x2)
    102a:	0008                	.2byte	0x8
    102c:	0501                	c.addi	x10,0
    102e:	0015                	c.addi	x0,5
    1030:	0402                	c.slli64	x8
    1032:	09010303          	lb	x6,144(x2)
    1036:	0004                	.2byte	0x4
                                break;
    1038:	0501                	c.addi	x10,0
    103a:	0009                	c.addi	x0,2
                    for (k_c_itr = 0; k_c_itr < kernel_size; k_c_itr++) {
    103c:	0402                	c.slli64	x8
    103e:	09020303          	lb	x6,144(x4) # 90 <crt+0x90>
    1042:	0008                	.2byte	0x8
    1044:	0001                	c.addi	x0,0
    1046:	0402                	c.slli64	x8
    1048:	09010303          	lb	x6,144(x2)
    104c:	0024                	c.addi4spn	x9,x2,8
    104e:	0001                	c.addi	x0,0
    1050:	0402                	c.slli64	x8
    1052:	09010303          	lb	x6,144(x2)
                for (k_r_itr = 0; k_r_itr < kernel_size; k_r_itr++) {
    1056:	0038                	c.addi4spn	x14,x2,8
    1058:	0501                	c.addi	x10,0
    105a:	001c                	.2byte	0x1c
    105c:	0402                	c.slli64	x8
    105e:	09020303          	lb	x6,144(x4) # 90 <crt+0x90>
    1062:	0070                	c.addi4spn	x12,x2,12
    1064:	0501                	c.addi	x10,0
    1066:	0402001b          	.4byte	0x402001b
    106a:	09010303          	lb	x6,144(x2)
                switch (pool_num) {
    106e:	0008                	.2byte	0x8
    1070:	0501                	c.addi	x10,0
    1072:	0018                	.2byte	0x18
    1074:	0402                	c.slli64	x8
    1076:	09010303          	lb	x6,144(x2)
                        outputs[ch_itr][o_r_itr][o_c_itr] = outputs[ch_itr][o_r_itr][o_c_itr] - (kernel_size * kernel_size);
    107a:	0008                	.2byte	0x8
    107c:	0501                	c.addi	x10,0
    107e:	0019                	c.addi	x0,6
    1080:	0402                	c.slli64	x8
    1082:	09010303          	lb	x6,144(x2)
    1086:	0008                	.2byte	0x8
    1088:	0501                	c.addi	x10,0
    108a:	0014                	.2byte	0x14
    108c:	0402                	c.slli64	x8
    108e:	09010303          	lb	x6,144(x2)
    1092:	0008                	.2byte	0x8
    1094:	0501                	c.addi	x10,0
    1096:	04020017          	auipc	x0,0x4020
    109a:	09010303          	lb	x6,144(x2)
    109e:	0008                	.2byte	0x8
    10a0:	0001                	c.addi	x0,0
    10a2:	0402                	c.slli64	x8
    10a4:	09010303          	lb	x6,144(x2)
    10a8:	0004                	.2byte	0x4
    10aa:	0501                	c.addi	x10,0
    10ac:	0009                	c.addi	x0,2
    10ae:	0402                	c.slli64	x8
    10b0:	09020303          	lb	x6,144(x4) # 90 <crt+0x90>
    10b4:	0004                	.2byte	0x4
    10b6:	0001                	c.addi	x0,0
    10b8:	0402                	c.slli64	x8
    10ba:	09030303          	lb	x6,144(x6)
    10be:	0040                	c.addi4spn	x8,x2,4
    10c0:	0501                	c.addi	x10,0
    10c2:	0016                	c.slli	x0,0x5
    10c4:	0402                	c.slli64	x8
    10c6:	09030303          	lb	x6,144(x6)
    10ca:	002c                	c.addi4spn	x11,x2,8
    10cc:	0501                	c.addi	x10,0
    10ce:	04020017          	auipc	x0,0x4020
    10d2:	09010303          	lb	x6,144(x2)
    10d6:	0008                	.2byte	0x8
    10d8:	0501                	c.addi	x10,0
    10da:	0014                	.2byte	0x14
    10dc:	0402                	c.slli64	x8
    10de:	09010303          	lb	x6,144(x2)
    10e2:	0008                	.2byte	0x8
    10e4:	0501                	c.addi	x10,0
    10e6:	0009                	c.addi	x0,2
    10e8:	0402                	c.slli64	x8
    10ea:	09020303          	lb	x6,144(x4) # 90 <crt+0x90>
    10ee:	0004                	.2byte	0x4
    10f0:	0001                	c.addi	x0,0
    10f2:	0402                	c.slli64	x8
                        break;
    10f4:	09010303          	lb	x6,144(x2)
            for (o_c_itr = 0; o_c_itr < output_size; o_c_itr++) {
    10f8:	0014                	.2byte	0x14
    10fa:	0001                	c.addi	x0,0
    10fc:	0402                	c.slli64	x8
    10fe:	09010303          	lb	x6,144(x2)
    1102:	0020                	c.addi4spn	x8,x2,8
    1104:	0501                	c.addi	x10,0
    1106:	0026                	c.slli	x0,0x9
    1108:	0402                	c.slli64	x8
    110a:	095e0303          	lb	x6,149(x28)
    110e:	0024                	c.addi4spn	x9,x2,8
        for (o_r_itr = 0; o_r_itr < output_size; o_r_itr++) {
    1110:	0501                	c.addi	x10,0
    1112:	04020017          	auipc	x0,0x4020
    1116:	0301                	c.addi	x6,0
    1118:	0900                	c.addi4spn	x8,x2,144
    111a:	000c                	.2byte	0xc
    111c:	0501                	c.addi	x10,0
    111e:	0309                	c.addi	x6,2
    1120:	0926                	c.slli	x18,0x9
    1122:	000c                	.2byte	0xc
    1124:	0501                	c.addi	x10,0
    1126:	0301                	c.addi	x6,0
    for (ch_itr = 0; ch_itr < feature_channel; ch_itr++) {
    1128:	0902                	c.slli64	x18
    112a:	0004                	.2byte	0x4
    112c:	0901                	c.addi	x18,0
    112e:	0018                	.2byte	0x18
    1130:	0100                	c.addi4spn	x8,x2,128
    1132:	01              	Address 0x0000000000001132 is out of bounds.


Disassembly of section .debug_line_str:

00000000 <.debug_line_str>:
	nop
   0:	6d6f682f          	.4byte	0x6d6f682f
	la ra, exit
   4:	2f65                	c.jal	7bc <fc_weight_generator+0x14>
   6:	7961                	c.lui	x18,0xffff8
   8:	742d616b          	.4byte	0x742d616b
	la sp, _sp
   c:	757a7573          	csrrci	x10,0x757,20
  10:	442f696b          	.4byte	0x442f696b
	mv s0, sp
  14:	6d75636f          	jal	x6,56eea <_sp+0x46eea>
	la gp, __global_pointer$
  18:	6e65                	c.lui	x28,0x19
  1a:	7374                	.2byte	0x7374
  1c:	6f72702f          	.4byte	0x6f72702f
	li tp, 0
  20:	656a                	.2byte	0x656a
  22:	762d7463          	bgeu	x26,x2,78a <fc_input_generator+0x5a>
	li t0, 0
  26:	6f2d                	c.lui	x30,0xb
	li t1, 0
  28:	6570                	.2byte	0x6570
  2a:	2d6e                	.2byte	0x2d6e
	li t2, 0
  2c:	6562                	.2byte	0x6562
  2e:	6174                	.2byte	0x6174
	li s1, 0
  30:	462d                	c.li	x12,11
  32:	452d726f          	jal	x4,d7484 <_sp+0xc7484>
	li a0, 0
  36:	37344543          	.4byte	0x37344543
	li a1, 0
  3a:	3030                	.2byte	0x3030
	li a2, 0
  3c:	2f4a                	.2byte	0x2f4a
  3e:	6974706f          	jal	x0,47ed4 <_sp+0x37ed4>
	li a3, 0
  42:	696d                	c.lui	x18,0x1b
	li a4, 0
  44:	617a                	.2byte	0x617a
  46:	6974                	.2byte	0x6974
	li a5, 0
  48:	63006e6f          	jal	x28,6678 <_ebss+0xe54>
	li a6, 0
  4c:	7472                	.2byte	0x7472
  4e:	732e                	.2byte	0x732e
	li a7, 0
  50:	7400                	.2byte	0x7400
  52:	7365                	c.lui	x6,0xffff9
	li s2, 0
  54:	5f74                	c.lw	x13,124(x14)
  56:	7270                	.2byte	0x7270
	li s3, 0
  58:	2f73676f          	jal	x14,36b4e <_sp+0x26b4e>
	li s4, 0
  5c:	6c61                	c.lui	x24,0x18
  5e:	7865                	c.lui	x16,0xffff9
	li s5, 0
  60:	656e                	.2byte	0x656e
  62:	2e74                	.2byte	0x2e74
	li s6, 0
  64:	65740063          	beq	x8,x23,6a4 <fc_layer+0x12c>
	li s7, 0
  68:	705f7473          	csrrci	x8,0x705,30
	li s8, 0
  6c:	6f72                	.2byte	0x6f72
  6e:	2f007367          	.4byte	0x2f007367
	li s9, 0
  72:	2f74706f          	jal	x0,47b68 <_sp+0x37b68>
	li s10, 0
  76:	6972                	.2byte	0x6972
	li s11, 0
  78:	33766373          	csrrsi	x6,mhpmevent23,12
	li t3, 0
  7c:	2f32                	.2byte	0x2f32
  7e:	696c                	.2byte	0x696c
	li t4, 0
  80:	2f62                	.2byte	0x2f62
  82:	2f636367          	.4byte	0x2f636367
	li t5, 0
  86:	6972                	.2byte	0x6972
	li t6, 0
  88:	33766373          	csrrsi	x6,mhpmevent23,12
	j main
  8c:	2d32                	.2byte	0x2d32
  8e:	6e75                	c.lui	x28,0x1d
  90:	776f6e6b          	.4byte	0x776f6e6b
  94:	2d6e                	.2byte	0x2d6e
  96:	6c65                	c.lui	x24,0x19
  98:	2f66                	.2byte	0x2f66
  9a:	3131                	c.jal	fffffca6 <_sp+0xfffefca6>
  9c:	312e                	.2byte	0x312e
  9e:	302e                	.2byte	0x302e
	la sp, _sp
  a0:	636e692f          	.4byte	0x636e692f
  a4:	756c                	.2byte	0x756c
  a6:	6564                	.2byte	0x6564
	sw a0, -8(sp)
  a8:	2f00                	.2byte	0x2f00
  aa:	2f74706f          	jal	x0,47ba0 <_sp+0x37ba0>
	nop
  ae:	6972                	.2byte	0x6972
	wfi
  b0:	33766373          	csrrsi	x6,mhpmevent23,12
void tj_free(void *mem) {
  b4:	2f32                	.2byte	0x2f32
  b6:	6972                	.2byte	0x6972
  b8:	33766373          	csrrsi	x6,mhpmevent23,12
  bc:	2d32                	.2byte	0x2d32
  be:	6e75                	c.lui	x28,0x1d
  c0:	776f6e6b          	.4byte	0x776f6e6b
  c4:	2d6e                	.2byte	0x2d6e
  c6:	6c65                	c.lui	x24,0x19
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	2f66                	.2byte	0x2f66
  ca:	6e69                	c.lui	x28,0x1a
  cc:	64756c63          	bltu	x10,x7,724 <fc_layer+0x1ac>
  d0:	0065                	c.addi	x0,25
  d2:	6a74                	.2byte	0x6a74
  d4:	6d5f 6c61 6f6c      	.byte	0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f
  da:	00682e63          	.4byte	0x682e63
  de:	64647473          	csrrci	x8,0x646,8
  e2:	6665                	c.lui	x12,0x19
  e4:	682e                	.2byte	0x682e
  e6:	7300                	.2byte	0x7300
		exit(1);
  e8:	7274                	.2byte	0x7274
  ea:	6e69                	c.lui	x28,0x1a
  ec:	00682e67          	.4byte	0x682e67
  f0:	6c647473          	csrrci	x8,0x6c6,8
	bp = (Header *)mem - 1; //point to block header
  f4:	6269                	c.lui	x4,0x1a
  f6:	682e                	.2byte	0x682e
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
	nop
   0:	001f 0000 0005      	.byte	0x1f, 0x00, 0x00, 0x00, 0x05, 0x00
	la ra, exit
   6:	0401                	c.addi	x8,0 # fffe1000 <_sp+0xfffd1000>
   8:	0000                	c.unimp
   a:	0000                	c.unimp
	la sp, _sp
   c:	0001                	c.addi	x0,0
   e:	0000                	c.unimp
  10:	0c00                	c.addi4spn	x8,x2,528
  12:	0000                	c.unimp
	mv s0, sp
  14:	0000                	c.unimp
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	0600                	c.addi4spn	x8,x2,768
  1a:	0000                	c.unimp
  1c:	5100                	c.lw	x8,32(x10)
  1e:	0000                	c.unimp
	li tp, 0
  20:	0100                	c.addi4spn	x8,x2,128
  22:	f880                	.2byte	0xf880
	li t0, 0
  24:	0009                	c.addi	x0,2
  26:	0500                	c.addi4spn	x8,x2,640
	li t1, 0
  28:	0100                	c.addi4spn	x8,x2,128
  2a:	1204                	c.addi4spn	x9,x2,288
	li t2, 0
  2c:	0000                	c.unimp
  2e:	1000                	c.addi4spn	x8,x2,32
	li s1, 0
  30:	01ba                	c.slli	x3,0xe
  32:	0000                	c.unimp
	li a0, 0
  34:	511d                	c.li	x2,-25
  36:	0000                	c.unimp
	li a1, 0
  38:	0000                	c.unimp
  3a:	0000                	c.unimp
	li a2, 0
  3c:	b400                	.2byte	0xb400
  3e:	0000                	c.unimp
	li a3, 0
  40:	2800                	.2byte	0x2800
  42:	0016                	c.slli	x0,0x5
	li a4, 0
  44:	2800                	.2byte	0x2800
  46:	0001                	c.addi	x0,0
	li a5, 0
  48:	0400                	c.addi4spn	x8,x2,512
  4a:	0601                	c.addi	x12,0 # 19000 <_sp+0x9000>
	li a6, 0
  4c:	024c                	c.addi4spn	x11,x2,260
  4e:	0000                	c.unimp
	li a7, 0
  50:	0104                	c.addi4spn	x9,x2,128
  52:	4a08                	c.lw	x10,16(x12)
	li s2, 0
  54:	0002                	c.slli64	x0
  56:	0400                	c.addi4spn	x8,x2,512
	li s3, 0
  58:	0502                	c.slli64	x10
  5a:	00c5                	c.addi	x1,17
	li s4, 0
  5c:	0000                	c.unimp
  5e:	0204                	c.addi4spn	x9,x2,256
	li s5, 0
  60:	00036807          	.4byte	0x36807
	li s6, 0
  64:	0400                	c.addi4spn	x8,x2,512
  66:	0504                	c.addi4spn	x9,x2,640
	li s7, 0
  68:	0000015b          	.4byte	0x15b
	li s8, 0
  6c:	0404                	c.addi4spn	x9,x2,512
  6e:	0002a607          	.4byte	0x2a607
	li s9, 0
  72:	0400                	c.addi4spn	x8,x2,512
	li s10, 0
  74:	0508                	c.addi4spn	x10,x2,640
  76:	0156                	c.slli	x2,0x15
	li s11, 0
  78:	0000                	c.unimp
  7a:	0804                	c.addi4spn	x9,x2,16
	li t3, 0
  7c:	0002a107          	.4byte	0x2a107
	li t4, 0
  80:	1100                	c.addi4spn	x8,x2,160
  82:	0504                	c.addi4spn	x9,x2,640
	li t5, 0
  84:	6e69                	c.lui	x28,0x1a
  86:	0074                	c.addi4spn	x13,x2,12
	li t6, 0
  88:	0404                	c.addi4spn	x9,x2,512
  8a:	0002ab07          	.4byte	0x2ab07
	j main
  8e:	0a00                	c.addi4spn	x8,x2,272
  90:	000000cf          	.4byte	0xcf
  94:	6517d103          	lhu	x2,1617(x15)
  98:	0000                	c.unimp
  9a:	0400                	c.addi4spn	x8,x2,512
  9c:	0410                	c.addi4spn	x12,x2,512
  9e:	0265                	c.addi	x4,25 # 1a019 <_sp+0xa019>
	la sp, _sp
  a0:	0000                	c.unimp
  a2:	0412                	c.slli	x8,0x4
  a4:	0104                	c.addi4spn	x9,x2,128
  a6:	5308                	c.lw	x10,32(x14)
	sw a0, -8(sp)
  a8:	0002                	c.slli64	x0
  aa:	0600                	c.addi4spn	x8,x2,768
	nop
  ac:	002d                	c.addi	x0,11
  ae:	0000                	c.unimp
	wfi
  b0:	0099                	c.addi	x1,6
  b2:	0000                	c.unimp
void tj_free(void *mem) {
  b4:	00006513          	ori	x10,x0,0
  b8:	ff00                	.2byte	0xff00
  ba:	5101003f 01000001 	.8byte	0x10000015101003f
  c2:	161e                	c.slli	x12,0x27
  c4:	0088                	c.addi4spn	x10,x2,64
  c6:	0000                	c.unimp
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	0305                	c.addi	x6,1 # ffff9001 <_sp+0xfffe9001>
  ca:	1818                	c.addi4spn	x14,x2,48
  cc:	0000                	c.unimp
  ce:	8901                	c.andi	x10,0
  d0:	01000003          	lb	x0,16(x0) # 10 <crt+0x10>
  d4:	0e1f 007f 0000      	.byte	0x1f, 0x0e, 0x7f, 0x00, 0x00, 0x00
  da:	0305                	c.addi	x6,1
  dc:	17e0                	c.addi4spn	x8,x2,1004
  de:	0000                	c.unimp
  e0:	e401                	c.bnez	x8,e8 <tj_free+0x34>
  e2:	01000003          	lb	x0,16(x0) # 10 <crt+0x10>
  e6:	1520                	c.addi4spn	x8,x2,680
		exit(1);
  e8:	0065                	c.addi	x0,25
  ea:	0000                	c.unimp
  ec:	0305                	c.addi	x6,1
  ee:	17e4                	c.addi4spn	x9,x2,1004
  f0:	0000                	c.unimp
  f2:	0c14                	c.addi4spn	x13,x2,528
	bp = (Header *)mem - 1; //point to block header
  f4:	0001                	c.addi	x0,0
  f6:	0800                	c.addi4spn	x8,x2,16
  f8:	2201                	c.jal	1f8 <tj_free+0x144>
  fa:	f510                	.2byte	0xf510
  fc:	0000                	c.unimp
  fe:	0b00                	c.addi4spn	x8,x2,400
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	041a                	c.slli	x8,0x6
 102:	0000                	c.unimp
 104:	00f51123          	sh	x15,2(x10)
 108:	0000                	c.unimp
 10a:	0b00                	c.addi4spn	x8,x2,400
 10c:	02d9                	c.addi	x5,22
 10e:	0000                	c.unimp
		if (p >= p->next && (bp > p || bp < p->next))
 110:	0f24                	c.addi4spn	x9,x2,920
 112:	0065                	c.addi	x0,25
 114:	0000                	c.unimp
 116:	0004                	.2byte	0x4
 118:	0000cf07          	.4byte	0xcf07
 11c:	0a00                	c.addi4spn	x8,x2,272
 11e:	0134                	c.addi4spn	x13,x2,136
 120:	0000                	c.unimp
 122:	2501                	c.jal	722 <fc_layer+0x1aa>
 124:	0000cf03          	lbu	x30,0(x1)
 128:	0100                	c.addi4spn	x8,x2,128
 12a:	0415                	c.addi	x8,5
 12c:	0000                	c.unimp
 12e:	2601                	c.jal	42e <tj_malloc+0x13e>
 130:	0000fa0f          	.4byte	0xfa0f
 134:	0500                	c.addi4spn	x8,x2,640
 136:	00581803          	lh	x16,5(x16) # ffff9005 <_sp+0xfffe9005>
 13a:	0100                	c.addi4spn	x8,x2,128
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	00b5                	c.addi	x1,13
 13e:	0000                	c.unimp
 140:	2701                	c.jal	840 <fc_weight_generator+0x98>
 142:	2a10                	.2byte	0x2a10
 144:	0001                	c.addi	x0,0
 146:	0500                	c.addi4spn	x8,x2,640
 148:	00582003          	lw	x0,5(x16)
 14c:	0700                	c.addi4spn	x8,x2,896
 14e:	00fa                	c.slli	x1,0x1e
 150:	0000                	c.unimp
 152:	050c                	c.addi4spn	x11,x2,640
 154:	0004                	.2byte	0x4
 156:	1200                	c.addi4spn	x8,x2,288
 158:	650e                	.2byte	0x650e
 15a:	0000                	c.unimp
 15c:	0500                	c.addi4spn	x8,x2,640
 15e:	0017e803          	.4byte	0x17e803
 162:	0c00                	c.addi4spn	x8,x2,528
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	01a8                	c.addi4spn	x10,x2,200
 166:	0000                	c.unimp
 168:	00650a13          	addi	x20,x10,6
 16c:	0000                	c.unimp
 16e:	0305                	c.addi	x6,1
 170:	1800                	c.addi4spn	x8,x2,48
 172:	0000                	c.unimp
 174:	8106                	c.mv	x2,x1
 176:	0000                	c.unimp
 178:	6100                	.2byte	0x6100
 17a:	0001                	c.addi	x0,0
 17c:	0500                	c.addi4spn	x8,x2,640
 17e:	0065                	c.addi	x0,25
 180:	0000                	c.unimp
 182:	0010                	.2byte	0x10
		bp->size += p->next->size;
 184:	7315                	c.lui	x6,0xfffe5
 186:	0200                	c.addi4spn	x8,x2,256
 188:	0614                	c.addi4spn	x13,x2,768
 18a:	0151                	c.addi	x2,20
 18c:	0000                	c.unimp
 18e:	0305                	c.addi	x6,1 # fffe5001 <_sp+0xfffd5001>
 190:	1804                	c.addi4spn	x9,x2,48
 192:	0000                	c.unimp
 194:	dd16                	c.swsp	x5,184(x2)
 196:	04000003          	lb	x0,64(x0) # 40 <crt+0x40>
 19a:	0921                	c.addi	x18,8 # 1b008 <_sp+0xb008>
 19c:	007f                	.2byte	0x7f
 19e:	0000                	c.unimp
 1a0:	0191                	c.addi	x3,4 # 1fc4 <__global_pointer$+0x4>
 1a2:	0000                	c.unimp
		bp->next = p->next->next;
 1a4:	7f09                	c.lui	x30,0xfffe2
 1a6:	0000                	c.unimp
 1a8:	0900                	c.addi4spn	x8,x2,144
 1aa:	005e                	c.slli	x0,0x17
 1ac:	0000                	c.unimp
 1ae:	6c09                	c.lui	x24,0x2
 1b0:	0000                	c.unimp
 1b2:	0000                	c.unimp
 1b4:	00025817          	auipc	x16,0x25
 1b8:	0500                	c.addi4spn	x8,x2,640
 1ba:	065d                	c.addi	x12,23
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	000001a3          	sb	x0,3(x0) # 3 <crt+0x3>
 1c0:	5e09                	c.li	x28,-30
 1c2:	0000                	c.unimp
 1c4:	0000                	c.unimp
 1c6:	ee18                	.2byte	0xee18
 1c8:	0000                	c.unimp
 1ca:	0200                	c.addi4spn	x8,x2,256
	if (p + p->size == bp) { //join to lower nbr
 1cc:	05bd                	c.addi	x11,15
 1ce:	005e                	c.slli	x0,0x17
 1d0:	0000                	c.unimp
 1d2:	1484                	c.addi4spn	x9,x2,608
 1d4:	0000                	c.unimp
 1d6:	0258                	c.addi4spn	x14,x2,260
 1d8:	0000                	c.unimp
 1da:	9c01                	.2byte	0x9c01
 1dc:	02f2                	c.slli	x5,0x1c
 1de:	0000                	c.unimp
 1e0:	d201                	c.beqz	x12,e0 <tj_free+0x2c>
 1e2:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
 1e6:	02f209bf 91030000 	.8byte	0x9103000002f209bf
		p->size += bp->size;
 1ee:	7edc                	.2byte	0x7edc
 1f0:	a601                	c.j	4f0 <random_gen+0x1c>
 1f2:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
 1f6:	09c0                	c.addi4spn	x8,x2,212
 1f8:	0308                	c.addi4spn	x10,x2,384
 1fa:	0000                	c.unimp
 1fc:	7ec89103          	lh	x2,2028(x17)
 200:	d601                	c.beqz	x12,108 <tj_free+0x54>
 202:	0000                	c.unimp
		p->next = bp->next;
 204:	0200                	c.addi4spn	x8,x2,256
 206:	09c1                	c.addi	x19,16
 208:	0308                	c.addi4spn	x10,x2,384
 20a:	0000                	c.unimp
 20c:	7eb49103          	lh	x2,2027(x9)
 210:	af01                	c.j	920 <cnn_layer+0x10>
 212:	0001                	c.addi	x0,0
 214:	0200                	c.addi4spn	x8,x2,256
 216:	09c2                	c.slli	x19,0x10
		p->next = bp; //again, if the free list is just the base
 218:	0308                	c.addi4spn	x10,x2,384
 21a:	0000                	c.unimp
 21c:	7ea09103          	lh	x2,2026(x1)
 220:	1301                	c.addi	x6,-32
 222:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
	freep = p;
 226:	005e09c3          	.4byte	0x5e09c3
 22a:	0000                	c.unimp
 22c:	9102                	c.jalr	x2
 22e:	0148                	c.addi4spn	x10,x2,132
}
 230:	0234                	c.addi4spn	x13,x2,264
 232:	0000                	c.unimp
 234:	c402                	c.swsp	x0,8(x2)
 236:	5e09                	c.li	x28,-30
 238:	0000                	c.unimp
 23a:	0200                	c.addi4spn	x8,x2,256
 23c:	4491                	c.li	x9,4
 23e:	6f01                	.2byte	0x6f01
 240:	0000                	c.unimp
 242:	0200                	c.addi4spn	x8,x2,256
static Header* getmoremem(unsigned int total_size) {
 244:	09c5                	c.addi	x19,17
 246:	005e                	c.slli	x0,0x17
 248:	0000                	c.unimp
 24a:	9102                	c.jalr	x2
 24c:	0140                	c.addi4spn	x8,x2,132
 24e:	00000307          	.4byte	0x307
 252:	c702                	c.swsp	x0,140(x2)
 254:	1809                	c.addi	x16,-30 # 25196 <_sp+0x15196>
 256:	03000003          	lb	x0,48(x0) # 30 <crt+0x30>
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 25a:	dc91                	c.beqz	x9,176 <tj_free+0xc2>
 25c:	016a                	c.slli	x2,0x1a
 25e:	0000013b          	.4byte	0x13b
 262:	c802                	c.swsp	x0,16(x2)
 264:	0809                	c.addi	x16,2
 266:	03000003          	lb	x0,48(x0) # 30 <crt+0x30>
 26a:	c891                	c.beqz	x9,27e <getmoremem+0x3a>
 26c:	016a                	c.slli	x2,0x1a
 26e:	00a1                	c.addi	x1,8
	Header* up = (Header *)next_index;
 270:	0000                	c.unimp
 272:	c902                	c.swsp	x0,144(x2)
 274:	3a09                	c.jal	fffffb86 <_sp+0xfffefb86>
 276:	03000003          	lb	x0,48(x0) # 30 <crt+0x30>
 27a:	d491                	c.beqz	x9,186 <tj_free+0xd2>
	next_index += total_size; //allocate the block
 27c:	0166                	c.slli	x2,0x19
 27e:	03ba                	c.slli	x7,0xe
 280:	0000                	c.unimp
 282:	ca02                	c.swsp	x0,20(x2)
 284:	3a09                	c.jal	fffffb96 <_sp+0xfffefb96>
 286:	03000003          	lb	x0,48(x0) # 30 <crt+0x30>
 28a:	e091                	c.bnez	x9,28e <getmoremem+0x4a>
 28c:	0162                	c.slli	x2,0x18
 28e:	027d                	c.addi	x4,31 # 1f <crt+0x1f>
 290:	0000                	c.unimp
 292:	cb02                	c.swsp	x0,148(x2)
	avail_mem -= total_size; //deduct from avail mem;
 294:	5e09                	c.li	x28,-30
 296:	0000                	c.unimp
 298:	0200                	c.addi4spn	x8,x2,256
 29a:	6891                	c.lui	x17,0x4
 29c:	8f01                	c.sub	x14,x8
 29e:	0000                	c.unimp
 2a0:	0200                	c.addi4spn	x8,x2,256
 2a2:	09cc                	c.addi4spn	x11,x2,212
 2a4:	005e                	c.slli	x0,0x17
 2a6:	0000                	c.unimp
 2a8:	9102                	c.jalr	x2
 2aa:	0164                	c.addi4spn	x9,x2,140
	up->size = total_size - sizeof(Header); //set the size right
 2ac:	0164                	c.addi4spn	x9,x2,140
 2ae:	0000                	c.unimp
 2b0:	cd02                	c.swsp	x0,152(x2)
 2b2:	5e09                	c.li	x28,-30
 2b4:	0000                	c.unimp
 2b6:	0200                	c.addi4spn	x8,x2,256
 2b8:	6091                	c.lui	x1,0x4
 2ba:	2401                	c.jal	4ba <tj_calloc+0x36>
	tj_free((void *)(++up)); //append the new block to the free list first
 2bc:	0001                	c.addi	x0,0
 2be:	0200                	c.addi4spn	x8,x2,256
 2c0:	09ce                	c.slli	x19,0x13
 2c2:	005e                	c.slli	x0,0x17
 2c4:	0000                	c.unimp
 2c6:	9102                	c.jalr	x2
 2c8:	015c                	c.addi4spn	x15,x2,132
 2ca:	000000f3          	.4byte	0xf3
 2ce:	cf02                	c.swsp	x0,156(x2)
 2d0:	5e09                	c.li	x28,-30
 2d2:	0000                	c.unimp
	return freep;
 2d4:	0200                	c.addi4spn	x8,x2,256
 2d6:	5891                	c.li	x17,-28
 2d8:	7b01                	c.lui	x22,0xfffe0
 2da:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
}
 2de:	09d0                	c.addi4spn	x12,x2,212
 2e0:	005e                	c.slli	x0,0x17
 2e2:	0000                	c.unimp
 2e4:	9102                	c.jalr	x2
 2e6:	0154                	c.addi4spn	x13,x2,132
 2e8:	0271                	c.addi	x4,28 # 1c <crt+0x1c>
 2ea:	0000                	c.unimp
 2ec:	d102                	c.swsp	x0,160(x2)
 2ee:	5e09                	c.li	x28,-30
void *tj_malloc(unsigned int size) {
 2f0:	0000                	c.unimp
 2f2:	0200                	c.addi4spn	x8,x2,256
 2f4:	5091                	c.li	x1,-28
 2f6:	fe01                	c.bnez	x12,20e <tj_free+0x15a>
 2f8:	0000                	c.unimp
 2fa:	0200                	c.addi4spn	x8,x2,256
 2fc:	09d2                	c.slli	x19,0x14
 2fe:	005e                	c.slli	x0,0x17
 300:	0000                	c.unimp
 302:	9102                	c.jalr	x2
	if (size > sizeof(heap)) return NULL;
 304:	034c                	c.addi4spn	x11,x2,388
 306:	7469                	c.lui	x8,0xffffa
 308:	0072                	c.slli	x0,0x1c
 30a:	d402                	c.swsp	x0,40(x2)
 30c:	5e06                	c.lwsp	x28,96(x2)
 30e:	0000                	c.unimp
 310:	0200                	c.addi4spn	x8,x2,256
 312:	6c91                	c.lui	x25,0x4
 314:	0600                	c.addi4spn	x8,x2,768
 316:	005e                	c.slli	x0,0x17
	if ((size & 3) != 0) {
 318:	0000                	c.unimp
 31a:	0308                	c.addi4spn	x10,x2,384
 31c:	0000                	c.unimp
 31e:	6505                	c.lui	x10,0x1
 320:	0000                	c.unimp
 322:	0400                	c.addi4spn	x8,x2,512
		size = size + 4 - (size & 3);
 324:	6505                	c.lui	x10,0x1
 326:	0000                	c.unimp
 328:	0400                	c.addi4spn	x8,x2,512
 32a:	0600                	c.addi4spn	x8,x2,768
 32c:	005e                	c.slli	x0,0x17
 32e:	0000                	c.unimp
 330:	0318                	c.addi4spn	x14,x2,384
 332:	0000                	c.unimp
	unsigned int total_size = size + sizeof(Header); //need to include the header size as well
 334:	6505                	c.lui	x10,0x1
 336:	0000                	c.unimp
 338:	0400                	c.addi4spn	x8,x2,512
 33a:	0600                	c.addi4spn	x8,x2,768
 33c:	005e                	c.slli	x0,0x17
 33e:	0000                	c.unimp
	prevp = freep;
 340:	033a                	c.slli	x6,0xe
 342:	0000                	c.unimp
 344:	6505                	c.lui	x10,0x1
 346:	0000                	c.unimp
 348:	0400                	c.addi4spn	x8,x2,512
 34a:	6505                	c.lui	x10,0x1
	if (prevp == NULL) {
 34c:	0000                	c.unimp
 34e:	0400                	c.addi4spn	x8,x2,512
 350:	6505                	c.lui	x10,0x1
 352:	0000                	c.unimp
		prevp = &base;
 354:	0400                	c.addi4spn	x8,x2,512
 356:	6505                	c.lui	x10,0x1
 358:	0000                	c.unimp
 35a:	0400                	c.addi4spn	x8,x2,512
 35c:	0600                	c.addi4spn	x8,x2,768
 35e:	005e                	c.slli	x0,0x17
		freep = prevp;
 360:	0000                	c.unimp
 362:	0356                	c.slli	x6,0x15
 364:	0000                	c.unimp
 366:	6505                	c.lui	x10,0x1
 368:	0000                	c.unimp
 36a:	0400                	c.addi4spn	x8,x2,512
		base.next = freep;
 36c:	6505                	c.lui	x10,0x1
 36e:	0000                	c.unimp
 370:	0400                	c.addi4spn	x8,x2,512
 372:	6505                	c.lui	x10,0x1
 374:	0000                	c.unimp
 376:	0400                	c.addi4spn	x8,x2,512
 378:	0d00                	c.addi4spn	x8,x2,656
 37a:	000000bb          	.4byte	0xbb
 37e:	80b1                	c.srli	x9,0xc
		base.size = 0;
 380:	04000013          	addi	x0,x0,64
 384:	0001                	c.addi	x0,0
 386:	0100                	c.addi4spn	x8,x2,128
 388:	d49c                	c.sw	x15,40(x9)
 38a:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
	for (p = prevp->next; ;prevp = p, p = p->next) {
 38e:	03c6                	c.slli	x7,0x11
 390:	0000                	c.unimp
 392:	b102                	.2byte	0xb102
 394:	d414                	c.sw	x13,40(x8)
 396:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
		if (p->size >= size) { //big enough
 39a:	5c91                	c.li	x25,-28
 39c:	e802                	.2byte	0xe802
 39e:	0002                	c.slli64	x0
 3a0:	0200                	c.addi4spn	x8,x2,256
 3a2:	2eb1                	c.jal	6fe <fc_layer+0x186>
 3a4:	005e                	c.slli	x0,0x17
 3a6:	0000                	c.unimp
			if (p->size == size) // exact size
 3a8:	9102                	c.jalr	x2
 3aa:	0258                	c.addi4spn	x14,x2,260
 3ac:	02cd                	c.addi	x5,19
 3ae:	0000                	c.unimp
 3b0:	b102                	.2byte	0xb102
 3b2:	00005e47          	.4byte	0x5e47
 3b6:	0200                	c.addi4spn	x8,x2,256
				prevp->next = p->next; // just return that block
 3b8:	5491                	c.li	x9,-28
 3ba:	0a02                	c.slli64	x20
 3bc:	0004                	.2byte	0x4
 3be:	0200                	c.addi4spn	x8,x2,256
 3c0:	5db1                	c.li	x27,-20
 3c2:	03d9                	c.addi	x7,22
 3c4:	0000                	c.unimp
 3c6:	9102                	c.jalr	x2
 3c8:	0150                	c.addi4spn	x12,x2,132
 3ca:	000003b3          	add	x7,x0,x0
				p->size -= total_size; //break up the block
 3ce:	b202                	.2byte	0xb202
 3d0:	5e06                	c.lwsp	x28,96(x2)
 3d2:	0000                	c.unimp
 3d4:	0200                	c.addi4spn	x8,x2,256
 3d6:	6c91                	c.lui	x25,0x4
 3d8:	4d01                	c.li	x26,0
 3da:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
 3de:	0eb2                	c.slli	x29,0xc
 3e0:	005e                	c.slli	x0,0x17
 3e2:	0000                	c.unimp
				p += p->size;
 3e4:	9102                	c.jalr	x2
 3e6:	0168                	c.addi4spn	x10,x2,140
 3e8:	0244                	c.addi4spn	x9,x2,260
 3ea:	0000                	c.unimp
 3ec:	b202                	.2byte	0xb202
 3ee:	5e15                	c.li	x28,-27
 3f0:	0000                	c.unimp
 3f2:	0200                	c.addi4spn	x8,x2,256
 3f4:	6491                	c.lui	x9,0x4
 3f6:	0700                	c.addi4spn	x8,x2,896
 3f8:	02f2                	c.slli	x5,0x1c
 3fa:	0000                	c.unimp
				p->size = size;
 3fc:	00005e07          	.4byte	0x5e07
 400:	0800                	c.addi4spn	x8,x2,16
 402:	007a                	c.slli	x0,0x1e
 404:	0000                	c.unimp
 406:	001234a3          	.4byte	0x1234a3
			freep = prevp;
 40a:	4c00                	c.lw	x8,24(x8)
 40c:	0001                	c.addi	x0,0
 40e:	0100                	c.addi4spn	x8,x2,128
 410:	7a9c                	.2byte	0x7a9c
 412:	0004                	.2byte	0x4
			return (void *)(++p);
 414:	0200                	c.addi4spn	x8,x2,256
 416:	03d5                	c.addi	x7,21
 418:	0000                	c.unimp
 41a:	a302                	.2byte	0xa302
 41c:	7a1f 0004 0200      	.byte	0x1f, 0x7a, 0x04, 0x00, 0x00, 0x02
 422:	5c91                	c.li	x25,-28
 424:	a902                	.2byte	0xa902
 426:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
		if (p == freep) //wrapped around free list
 42a:	03d938a3          	.4byte	0x3d938a3
 42e:	0000                	c.unimp
 430:	9102                	c.jalr	x2
 432:	0258                	c.addi4spn	x14,x2,260
 434:	00000093          	addi	x1,x0,0
			if ((p = getmoremem(total_size)) == NULL) //if the heap runs out
 438:	a302                	.2byte	0xa302
 43a:	5e48                	c.lw	x10,60(x12)
 43c:	0000                	c.unimp
 43e:	0200                	c.addi4spn	x8,x2,256
 440:	5491                	c.li	x9,-28
 442:	8102                	c.jr	x2
 444:	0002                	c.slli64	x0
 446:	0200                	c.addi4spn	x8,x2,256
 448:	005e5ba3          	.4byte	0x5e5ba3
 44c:	0000                	c.unimp
 44e:	9102                	c.jalr	x2
				return NULL; //well, you got nothing left, gg
 450:	0250                	c.addi4spn	x12,x2,260
 452:	0128                	c.addi4spn	x10,x2,136
 454:	0000                	c.unimp
 456:	a302                	.2byte	0xa302
	for (p = prevp->next; ;prevp = p, p = p->next) {
 458:	00005e6f          	jal	x28,5458 <__global_pointer$+0x3498>
 45c:	0200                	c.addi4spn	x8,x2,256
 45e:	4c91                	c.li	x25,4
 460:	b801                	c.j	fffffc70 <_sp+0xfffefc70>
 462:	0002                	c.slli64	x0
 464:	0200                	c.addi4spn	x8,x2,256
 466:	06a4                	c.addi4spn	x9,x2,840
 468:	005e                	c.slli	x0,0x17
 46a:	0000                	c.unimp
		if (p->size >= size) { //big enough
 46c:	9102                	c.jalr	x2
 46e:	016c                	c.addi4spn	x11,x2,140
}
 470:	03b1                	c.addi	x7,12
 472:	0000                	c.unimp
 474:	a402                	.2byte	0xa402
 476:	5e10                	c.lw	x12,56(x12)
 478:	0000                	c.unimp
 47a:	0200                	c.addi4spn	x8,x2,256
 47c:	6891                	c.lui	x17,0x4
 47e:	9401                	c.srai	x8,0x20
 480:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
void *tj_calloc(unsigned int size) {
 484:	1aa4                	c.addi4spn	x9,x2,376
 486:	005e                	c.slli	x0,0x17
 488:	0000                	c.unimp
 48a:	9102                	c.jalr	x2
 48c:	0164                	c.addi4spn	x9,x2,140
 48e:	0299                	c.addi	x5,6
 490:	0000                	c.unimp
 492:	a402                	.2byte	0xa402
 494:	00005e23          	.4byte	0x5e23
	void *mem = tj_malloc(size);
 498:	0200                	c.addi4spn	x8,x2,256
 49a:	6091                	c.lui	x1,0x4
 49c:	0700                	c.addi4spn	x8,x2,896
 49e:	033a                	c.slli	x6,0xe
 4a0:	0000                	c.unimp
 4a2:	9408                	.2byte	0x9408
 4a4:	0001                	c.addi	x0,0
 4a6:	9800                	.2byte	0x9800
	memset(mem, 0, size);
 4a8:	1154                	c.addi4spn	x13,x2,164
 4aa:	0000                	c.unimp
 4ac:	00e0                	c.addi4spn	x8,x2,76
 4ae:	0000                	c.unimp
 4b0:	9c01                	.2byte	0x9c01
 4b2:	04ee                	c.slli	x9,0x1b
 4b4:	0000                	c.unimp
 4b6:	d902                	c.swsp	x0,176(x2)
 4b8:	0000                	c.unimp
 4ba:	0200                	c.addi4spn	x8,x2,256
	return mem;
 4bc:	1e98                	c.addi4spn	x14,x2,880
 4be:	03d4                	c.addi4spn	x13,x2,452
}
 4c0:	0000                	c.unimp
 4c2:	9102                	c.jalr	x2
 4c4:	025c                	c.addi4spn	x15,x2,260
 4c6:	00000093          	addi	x1,x0,0
 4ca:	9802                	c.jalr	x16
 4cc:	00005e33          	srl	x28,x0,x0
 4d0:	0200                	c.addi4spn	x8,x2,256
 4d2:	5891                	c.li	x17,-28
int random_gen(){
 4d4:	6802                	.2byte	0x6802
 4d6:	0001                	c.addi	x0,0
 4d8:	0200                	c.addi4spn	x8,x2,256
 4da:	4698                	c.lw	x14,8(x13)
 4dc:	005e                	c.slli	x0,0x17
 4de:	0000                	c.unimp
    unsigned lsb = lfsr & 1;
 4e0:	9102                	c.jalr	x2
 4e2:	0154                	c.addi4spn	x13,x2,132
 4e4:	03b1                	c.addi	x7,12
 4e6:	0000                	c.unimp
 4e8:	9902                	c.jalr	x18
 4ea:	5e06                	c.lwsp	x28,96(x2)
 4ec:	0000                	c.unimp
 4ee:	0200                	c.addi4spn	x8,x2,256
    lfsr >>= 1;
 4f0:	6c91                	c.lui	x25,0x4
 4f2:	4b01                	c.li	x22,0
 4f4:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
 4f8:	1099                	c.addi	x1,-26 # 3fe6 <__global_pointer$+0x2026>
 4fa:	005e                	c.slli	x0,0x17
 4fc:	0000                	c.unimp
 4fe:	9102                	c.jalr	x2
 500:	0168                	c.addi4spn	x10,x2,140
 502:	0242                	c.slli	x4,0x10
    if (lsb == 1)
 504:	0000                	c.unimp
 506:	9902                	c.jalr	x18
 508:	5e19                	c.li	x28,-26
 50a:	0000                	c.unimp
 50c:	0200                	c.addi4spn	x8,x2,256
 50e:	6491                	c.lui	x9,0x4
        lfsr ^= 0xB400u;
 510:	0d00                	c.addi4spn	x8,x2,656
 512:	0342                	c.slli	x6,0x10
 514:	0000                	c.unimp
 516:	7872                	.2byte	0x7872
 518:	000d                	c.addi	x0,3
 51a:	dc00                	c.sw	x8,56(x8)
 51c:	01000003          	lb	x0,16(x0) # 10 <crt+0x10>
 520:	e89c                	.2byte	0xe89c
 522:	0005                	c.addi	x0,1
 524:	0200                	c.addi4spn	x8,x2,256
 526:	00d9                	c.addi	x1,22
 528:	0000                	c.unimp
 52a:	7202                	.2byte	0x7202
    return lfsr;
 52c:	0003d413          	srli	x8,x7,0x0
 530:	0200                	c.addi4spn	x8,x2,256
 532:	4c91                	c.li	x25,4
}
 534:	b202                	.2byte	0xb202
 536:	0001                	c.addi	x0,0
 538:	0200                	c.addi4spn	x8,x2,256
 53a:	2872                	.2byte	0x2872
 53c:	03d4                	c.addi4spn	x13,x2,452
 53e:	0000                	c.unimp
 540:	9102                	c.jalr	x2
 542:	0248                	c.addi4spn	x10,x2,260
int relu_af(int in_af){
 544:	02ec                	c.addi4spn	x11,x2,332
 546:	0000                	c.unimp
 548:	7202                	.2byte	0x7202
 54a:	5e3e                	c.lwsp	x28,236(x2)
 54c:	0000                	c.unimp
 54e:	0200                	c.addi4spn	x8,x2,256
 550:	4491                	c.li	x9,4
 552:	6802                	.2byte	0x6802
	if(in_af < 0)
 554:	0001                	c.addi	x0,0
 556:	0200                	c.addi4spn	x8,x2,256
 558:	5372                	c.lwsp	x6,60(x2)
 55a:	005e                	c.slli	x0,0x17
		return 0;
 55c:	0000                	c.unimp
 55e:	9102                	c.jalr	x2
 560:	0240                	c.addi4spn	x8,x2,260
 562:	0128                	c.addi4spn	x10,x2,136
	return in_af;
 564:	0000                	c.unimp
 566:	7202                	.2byte	0x7202
}
 568:	00005e63          	bge	x0,x0,584 <fc_layer+0xc>
 56c:	0300                	c.addi4spn	x8,x2,384
 56e:	bc91                	c.j	ffffffc2 <_sp+0xfffeffc2>
 570:	027f                	.2byte	0x27f
 572:	000000f7          	.4byte	0xf7
 576:	7202                	.2byte	0x7202
void fc_layer(int weights[5][5], int biasses[5], int inputs[5], int outputs[5], int input_num, int output_num, int af_num){
 578:	5e74                	c.lw	x13,124(x12)
 57a:	0000                	c.unimp
 57c:	0300                	c.addi4spn	x8,x2,384
 57e:	b891                	c.j	fffffdd2 <_sp+0xfffefdd2>
 580:	027f                	.2byte	0x27f
 582:	0290                	c.addi4spn	x12,x2,320
 584:	0000                	c.unimp
 586:	7202                	.2byte	0x7202
 588:	5e80                	c.lw	x8,56(x13)
 58a:	0000                	c.unimp
 58c:	0300                	c.addi4spn	x8,x2,384
 58e:	b491                	c.j	ffffffd2 <_sp+0xfffeffd2>
 590:	027f                	.2byte	0x27f
 592:	00ac                	c.addi4spn	x11,x2,72
 594:	0000                	c.unimp
 596:	7202                	.2byte	0x7202
 598:	5e8e                	c.lwsp	x29,224(x2)
 59a:	0000                	c.unimp
 59c:	0300                	c.addi4spn	x8,x2,384
 59e:	b091                	c.j	fffffde2 <_sp+0xfffefde2>
 5a0:	017f                	.2byte	0x17f
 5a2:	00000353          	.4byte	0x353
 5a6:	7302                	.2byte	0x7302
	for (i = 0; i < output_num; i++) {
 5a8:	5e09                	c.li	x28,-30
 5aa:	0000                	c.unimp
 5ac:	0200                	c.addi4spn	x8,x2,256
 5ae:	5891                	c.li	x17,-28
		outputs[i] = biasses[i];
 5b0:	8601                	c.srai64	x12
 5b2:	0001                	c.addi	x0,0
 5b4:	0200                	c.addi4spn	x8,x2,256
 5b6:	0974                	c.addi4spn	x13,x2,156
 5b8:	005e                	c.slli	x0,0x17
 5ba:	0000                	c.unimp
 5bc:	9102                	c.jalr	x2
 5be:	0154                	c.addi4spn	x13,x2,132
 5c0:	000003b3          	add	x7,x0,x0
 5c4:	7502                	.2byte	0x7502
 5c6:	5e06                	c.lwsp	x28,96(x2)
 5c8:	0000                	c.unimp
 5ca:	0200                	c.addi4spn	x8,x2,256
 5cc:	6c91                	c.lui	x25,0x4
 5ce:	5d01                	c.li	x26,-32
 5d0:	0002                	c.slli64	x0
 5d2:	0200                	c.addi4spn	x8,x2,256
 5d4:	0e75                	c.addi	x28,29 # 1a01d <_sp+0xa01d>
 5d6:	005e                	c.slli	x0,0x17
		for (j = 0; j < input_num; j++) {
 5d8:	0000                	c.unimp
 5da:	9102                	c.jalr	x2
 5dc:	0168                	c.addi4spn	x10,x2,140
 5de:	00000113          	addi	x2,x0,0
			outputs[i] += weights[i][j] * inputs[j];
 5e2:	7502                	.2byte	0x7502
 5e4:	00005e17          	auipc	x28,0x5
 5e8:	0200                	c.addi4spn	x8,x2,256
 5ea:	6491                	c.lui	x9,0x4
 5ec:	9401                	c.srai	x8,0x20
 5ee:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
 5f2:	2075                	c.jal	69e <fc_layer+0x126>
 5f4:	005e                	c.slli	x0,0x17
 5f6:	0000                	c.unimp
 5f8:	9102                	c.jalr	x2
 5fa:	0160                	c.addi4spn	x8,x2,140
 5fc:	0299                	c.addi	x5,6
 5fe:	0000                	c.unimp
 600:	7502                	.2byte	0x7502
 602:	5e29                	c.li	x28,-22
 604:	0000                	c.unimp
 606:	0200                	c.addi4spn	x8,x2,256
 608:	5c91                	c.li	x25,-28
 60a:	0800                	c.addi4spn	x8,x2,16
 60c:	00000147          	.4byte	0x147
 610:	00091057          	.4byte	0x91057
 614:	6800                	.2byte	0x6800
 616:	0004                	.2byte	0x4
 618:	0100                	c.addi4spn	x8,x2,128
 61a:	0f9c                	c.addi4spn	x15,x2,976
 61c:	02000007          	.4byte	0x2000007
 620:	03d5                	c.addi	x7,21
 622:	0000                	c.unimp
 624:	5702                	c.lwsp	x14,32(x2)
 626:	7a14                	.2byte	0x7a14
 628:	0004                	.2byte	0x4
 62a:	0200                	c.addi4spn	x8,x2,256
 62c:	4c91                	c.li	x25,4
 62e:	a902                	.2byte	0xa902
 630:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
 634:	03d92d57          	.4byte	0x3d92d57
 638:	0000                	c.unimp
 63a:	9102                	c.jalr	x2
 63c:	0248                	c.addi4spn	x10,x2,260
 63e:	00d9                	c.addi	x1,22
 640:	0000                	c.unimp
 642:	5702                	c.lwsp	x14,32(x2)
 644:	d43d                	c.beqz	x8,5b2 <fc_layer+0x3a>
 646:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
 64a:	4491                	c.li	x9,4
 64c:	b202                	.2byte	0xb202
 64e:	0001                	c.addi	x0,0
 650:	0200                	c.addi4spn	x8,x2,256
 652:	03d45257          	.4byte	0x3d45257
		for (j = 0; j < input_num; j++) {
 656:	0000                	c.unimp
 658:	9102                	c.jalr	x2
 65a:	0240                	c.addi4spn	x8,x2,260
 65c:	00000093          	addi	x1,x0,0
 660:	5702                	c.lwsp	x14,32(x2)
 662:	5e68                	c.lw	x10,124(x12)
 664:	0000                	c.unimp
 666:	0300                	c.addi4spn	x8,x2,384
 668:	bc91                	c.j	bc <tj_free+0x8>
 66a:	027f                	.2byte	0x27f
        switch (af_num) {
 66c:	0281                	c.addi	x5,0
 66e:	0000                	c.unimp
 670:	5702                	c.lwsp	x14,32(x2)
 672:	00005e7b          	.4byte	0x5e7b
 676:	0300                	c.addi4spn	x8,x2,384
 678:	b891                	c.j	fffffecc <_sp+0xfffefecc>
 67a:	027f                	.2byte	0x27f
 67c:	0168                	c.addi4spn	x10,x2,140
 67e:	0000                	c.unimp
 680:	5702                	c.lwsp	x14,32(x2)
 682:	00005e8f          	.4byte	0x5e8f
                outputs[i] = relu_af(outputs[i]);
 686:	0300                	c.addi4spn	x8,x2,384
 688:	b491                	c.j	cc <tj_free+0x18>
 68a:	027f                	.2byte	0x27f
 68c:	0128                	c.addi4spn	x10,x2,136
 68e:	0000                	c.unimp
 690:	5702                	c.lwsp	x14,32(x2)
 692:	5e9f 0000 0300      	.byte	0x9f, 0x5e, 0x00, 0x00, 0x00, 0x03
 698:	b091                	c.j	fffffedc <_sp+0xfffefedc>
 69a:	027f                	.2byte	0x27f
 69c:	000000f7          	.4byte	0xf7
 6a0:	5702                	c.lwsp	x14,32(x2)
 6a2:	5eb0                	c.lw	x12,120(x13)
 6a4:	0000                	c.unimp
 6a6:	0200                	c.addi4spn	x8,x2,256
 6a8:	0091                	c.addi	x1,4
 6aa:	9002                	c.ebreak
 6ac:	0002                	c.slli64	x0
 6ae:	0200                	c.addi4spn	x8,x2,256
 6b0:	005ebc57          	.4byte	0x5ebc57
 6b4:	0000                	c.unimp
 6b6:	9102                	c.jalr	x2
 6b8:	0204                	c.addi4spn	x9,x2,256
 6ba:	0068                	c.addi4spn	x10,x2,12
                break;
 6bc:	0000                	c.unimp
 6be:	5702                	c.lwsp	x14,32(x2)
                outputs[i] = relu_af(outputs[i]);
 6c0:	5eca                	c.lwsp	x29,176(x2)
 6c2:	0000                	c.unimp
 6c4:	0200                	c.addi4spn	x8,x2,256
 6c6:	0891                	c.addi	x17,4 # 4004 <__global_pointer$+0x2044>
 6c8:	5301                	c.li	x6,-32
 6ca:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
 6ce:	0958                	c.addi4spn	x14,x2,148
 6d0:	005e                	c.slli	x0,0x17
 6d2:	0000                	c.unimp
 6d4:	9102                	c.jalr	x2
 6d6:	0154                	c.addi4spn	x13,x2,132
 6d8:	02b8                	c.addi4spn	x14,x2,328
 6da:	0000                	c.unimp
 6dc:	5902                	c.lwsp	x18,32(x2)
 6de:	5e06                	c.lwsp	x28,96(x2)
 6e0:	0000                	c.unimp
 6e2:	0200                	c.addi4spn	x8,x2,256
 6e4:	6c91                	c.lui	x25,0x4
 6e6:	5d01                	c.li	x26,-32
 6e8:	0002                	c.slli64	x0
 6ea:	0200                	c.addi4spn	x8,x2,256
 6ec:	1059                	c.addi	x0,-10
 6ee:	005e                	c.slli	x0,0x17
 6f0:	0000                	c.unimp
 6f2:	9102                	c.jalr	x2
 6f4:	0168                	c.addi4spn	x10,x2,140
 6f6:	00000113          	addi	x2,x0,0
                break;
 6fa:	5902                	c.lwsp	x18,32(x2)
	for (i = 0; i < output_num; i++) {
 6fc:	5e19                	c.li	x28,-26
 6fe:	0000                	c.unimp
 700:	0200                	c.addi4spn	x8,x2,256
 702:	6491                	c.lui	x9,0x4
 704:	b101                	c.j	304 <tj_malloc+0x14>
 706:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
 70a:	2259                	c.jal	890 <fc_soft_max+0x4>
 70c:	005e                	c.slli	x0,0x17
 70e:	0000                	c.unimp
 710:	9102                	c.jalr	x2
 712:	0160                	c.addi4spn	x8,x2,140
}
 714:	0394                	c.addi4spn	x13,x2,448
 716:	0000                	c.unimp
 718:	5902                	c.lwsp	x18,32(x2)
 71a:	5e2c                	c.lw	x11,120(x12)
 71c:	0000                	c.unimp
 71e:	0200                	c.addi4spn	x8,x2,256
 720:	5c91                	c.li	x25,-28
 722:	9901                	c.andi	x10,-32
 724:	0002                	c.slli64	x0
 726:	0200                	c.addi4spn	x8,x2,256
 728:	3559                	c.jal	5ae <fc_layer+0x36>
 72a:	005e                	c.slli	x0,0x17
 72c:	0000                	c.unimp
 72e:	9102                	c.jalr	x2
void fc_input_generator(int inputs[5], int input_num){
 730:	0058                	c.addi4spn	x14,x2,4
 732:	c10e                	c.swsp	x3,128(x2)
 734:	0002                	c.slli64	x0
 736:	4d00                	c.lw	x8,24(x10)
 738:	005e                	c.slli	x0,0x17
 73a:	0000                	c.unimp
 73c:	088c                	c.addi4spn	x11,x2,80
 73e:	0000                	c.unimp
 740:	0084                	c.addi4spn	x9,x2,64
 742:	0000                	c.unimp
 744:	9c01                	.2byte	0x9c01
 746:	0762                	c.slli	x14,0x18
    for (i = 0; i < input_num; i++) {
 748:	0000                	c.unimp
 74a:	1b02                	c.slli	x22,0x20
 74c:	0001                	c.addi	x0,0
 74e:	0200                	c.addi4spn	x8,x2,256
        inputs[i] = (random_gen()&15) - 5;
 750:	154d                	c.addi	x10,-13 # ff3 <cnn_pool+0x27b>
 752:	03d9                	c.addi	x7,22
 754:	0000                	c.unimp
 756:	9102                	c.jalr	x2
 758:	025c                	c.addi4spn	x15,x2,260
 75a:	03ee                	c.slli	x7,0x1b
 75c:	0000                	c.unimp
 75e:	4d02                	c.lwsp	x26,0(x2)
 760:	5e26                	c.lwsp	x28,104(x2)
 762:	0000                	c.unimp
 764:	0200                	c.addi4spn	x8,x2,256
 766:	5891                	c.li	x17,-28
 768:	02006903          	.4byte	0x2006903
 76c:	064e                	c.slli	x12,0x13
 76e:	005e                	c.slli	x0,0x17
 770:	0000                	c.unimp
 772:	9102                	c.jalr	x2
 774:	036c                	c.addi4spn	x11,x2,396
 776:	616d                	c.addi16sp	x2,240
    for (i = 0; i < input_num; i++) {
 778:	0078                	c.addi4spn	x14,x2,12
 77a:	4f02                	c.lwsp	x30,0(x2)
 77c:	5e06                	c.lwsp	x28,96(x2)
 77e:	0000                	c.unimp
 780:	0200                	c.addi4spn	x8,x2,256
 782:	6891                	c.lui	x17,0x4
 784:	0800                	c.addi4spn	x8,x2,16
 786:	0320                	c.addi4spn	x8,x2,392
 788:	0000                	c.unimp
 78a:	a842                	.2byte	0xa842
 78c:	e4000007          	.4byte	0xe4000007
}
 790:	0000                	c.unimp
 792:	0100                	c.addi4spn	x8,x2,128
 794:	cd9c                	c.sw	x15,24(x11)
 796:	02000007          	.4byte	0x2000007
 79a:	03d5                	c.addi	x7,21
 79c:	0000                	c.unimp
 79e:	4202                	c.lwsp	x4,0(x2)
 7a0:	cd1e                	c.swsp	x7,152(x2)
 7a2:	02000007          	.4byte	0x2000007
 7a6:	5c91                	c.li	x25,-28
void fc_weight_generator(int weights[5][5], int biasses[5], int input_num, int output_num){
 7a8:	a902                	.2byte	0xa902
 7aa:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
 7ae:	3142                	.2byte	0x3142
 7b0:	03d9                	c.addi	x7,22
 7b2:	0000                	c.unimp
 7b4:	9102                	c.jalr	x2
 7b6:	0258                	c.addi4spn	x14,x2,260
 7b8:	0316                	c.slli	x6,0x5
 7ba:	0000                	c.unimp
 7bc:	4202                	c.lwsp	x4,0(x2)
 7be:	5e41                	c.li	x28,-16
 7c0:	0000                	c.unimp
 7c2:	0200                	c.addi4spn	x8,x2,256
 7c4:	5491                	c.li	x9,-28
 7c6:	3702                	.2byte	0x3702
	for (i = 0; i < output_num; i++) {
 7c8:	0002                	c.slli64	x0
 7ca:	0200                	c.addi4spn	x8,x2,256
 7cc:	5042                	.2byte	0x5042
 7ce:	005e                	c.slli	x0,0x17
        biasses[i] = (random_gen()&15) - 5;
 7d0:	0000                	c.unimp
 7d2:	9102                	c.jalr	x2
 7d4:	0350                	c.addi4spn	x12,x2,388
 7d6:	0069                	c.addi	x0,26
 7d8:	4302                	c.lwsp	x6,0(x2)
 7da:	5e06                	c.lwsp	x28,96(x2)
 7dc:	0000                	c.unimp
 7de:	0200                	c.addi4spn	x8,x2,256
 7e0:	6c91                	c.lui	x25,0x4
 7e2:	02006a03          	.4byte	0x2006a03
 7e6:	0644                	c.addi4spn	x9,x2,772
 7e8:	005e                	c.slli	x0,0x17
 7ea:	0000                	c.unimp
 7ec:	9102                	c.jalr	x2
 7ee:	0068                	c.addi4spn	x10,x2,12
 7f0:	00030807          	.4byte	0x30807
 7f4:	0800                	c.addi4spn	x8,x2,16
 7f6:	00000173          	.4byte	0x173
        for (j = 0; j < input_num; j++) {
 7fa:	0007303b          	.4byte	0x7303b
 7fe:	7800                	.2byte	0x7800
            weights[i][j] = (random_gen()&15) - 5;
 800:	0000                	c.unimp
 802:	0100                	c.addi4spn	x8,x2,128
 804:	129c                	c.addi4spn	x15,x2,352
 806:	0008                	.2byte	0x8
 808:	0200                	c.addi4spn	x8,x2,256
 80a:	00d9                	c.addi	x1,22
 80c:	0000                	c.unimp
 80e:	3b02                	.2byte	0x3b02
 810:	d91d                	c.beqz	x10,746 <fc_input_generator+0x16>
 812:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
 816:	5c91                	c.li	x25,-28
 818:	1602                	c.slli	x12,0x20
 81a:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
 81e:	005e2c3b          	.4byte	0x5e2c3b
 822:	0000                	c.unimp
 824:	9102                	c.jalr	x2
 826:	0358                	c.addi4spn	x14,x2,388
 828:	0069                	c.addi	x0,26
 82a:	3c02                	.2byte	0x3c02
 82c:	5e06                	c.lwsp	x28,96(x2)
 82e:	0000                	c.unimp
 830:	0200                	c.addi4spn	x8,x2,256
 832:	6c91                	c.lui	x25,0x4
 834:	0800                	c.addi4spn	x8,x2,16
 836:	035f 0000 7828      	.byte	0x5f, 0x03, 0x00, 0x00, 0x28, 0x78
 83c:	0005                	c.addi	x0,1
 83e:	b800                	.2byte	0xb800
 840:	0001                	c.addi	x0,0
 842:	0100                	c.addi4spn	x8,x2,128
        for (j = 0; j < input_num; j++) {
 844:	aa9c                	.2byte	0xaa9c
 846:	0008                	.2byte	0x8
 848:	0200                	c.addi4spn	x8,x2,256
 84a:	03d5                	c.addi	x7,21
 84c:	0000                	c.unimp
 84e:	2802                	.2byte	0x2802
 850:	0007cd13          	xori	x26,x15,0
 854:	0200                	c.addi4spn	x8,x2,256
 856:	5c91                	c.li	x25,-28
 858:	a902                	.2byte	0xa902
 85a:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
	for (i = 0; i < output_num; i++) {
 85e:	2628                	.2byte	0x2628
 860:	03d9                	c.addi	x7,22
 862:	0000                	c.unimp
 864:	9102                	c.jalr	x2
 866:	0258                	c.addi4spn	x14,x2,260
 868:	00d9                	c.addi	x1,22
 86a:	0000                	c.unimp
 86c:	2802                	.2byte	0x2802
 86e:	d936                	c.swsp	x13,176(x2)
 870:	02000003          	lb	x0,32(x0) # 20 <crt+0x20>
}
 874:	5491                	c.li	x9,-28
 876:	b202                	.2byte	0xb202
 878:	0001                	c.addi	x0,0
 87a:	0200                	c.addi4spn	x8,x2,256
 87c:	4528                	c.lw	x10,72(x10)
 87e:	03d9                	c.addi	x7,22
 880:	0000                	c.unimp
 882:	9102                	c.jalr	x2
 884:	0250                	c.addi4spn	x12,x2,260
 886:	0316                	c.slli	x6,0x5
 888:	0000                	c.unimp
 88a:	2802                	.2byte	0x2802
int fc_soft_max(int features[5], int feature_num){
 88c:	5e55                	c.li	x28,-11
 88e:	0000                	c.unimp
 890:	0200                	c.addi4spn	x8,x2,256
 892:	4c91                	c.li	x25,4
 894:	3702                	.2byte	0x3702
 896:	0002                	c.slli64	x0
 898:	0200                	c.addi4spn	x8,x2,256
 89a:	6428                	.2byte	0x6428
 89c:	005e                	c.slli	x0,0x17
 89e:	0000                	c.unimp
	int max = 0;
 8a0:	9102                	c.jalr	x2
 8a2:	0248                	c.addi4spn	x10,x2,260
    for (i = 1; i < feature_num; i++) {
 8a4:	0068                	c.addi4spn	x10,x2,12
 8a6:	0000                	c.unimp
 8a8:	2802                	.2byte	0x2802
 8aa:	5e74                	c.lw	x13,124(x12)
 8ac:	0000                	c.unimp
 8ae:	0200                	c.addi4spn	x8,x2,256
        if(features[max] < features[i])
 8b0:	4491                	c.li	x9,4
 8b2:	02006903          	.4byte	0x2006903
 8b6:	0629                	c.addi	x12,10
 8b8:	005e                	c.slli	x0,0x17
 8ba:	0000                	c.unimp
 8bc:	9102                	c.jalr	x2
 8be:	036c                	c.addi4spn	x11,x2,396
 8c0:	006a                	c.slli	x0,0x1a
 8c2:	2a02                	.2byte	0x2a02
 8c4:	5e06                	c.lwsp	x28,96(x2)
 8c6:	0000                	c.unimp
 8c8:	0200                	c.addi4spn	x8,x2,256
 8ca:	6891                	c.lui	x17,0x4
 8cc:	0e00                	c.addi4spn	x8,x2,784
 8ce:	0334                	c.addi4spn	x13,x2,392
 8d0:	0000                	c.unimp
 8d2:	5e21                	c.li	x28,-24
 8d4:	0000                	c.unimp
 8d6:	4400                	c.lw	x8,8(x8)
 8d8:	0005                	c.addi	x0,1
 8da:	3400                	.2byte	0x3400
            max = i;
 8dc:	0000                	c.unimp
 8de:	0100                	c.addi4spn	x8,x2,128
 8e0:	d29c                	c.sw	x15,32(x13)
 8e2:	0008                	.2byte	0x8
    for (i = 1; i < feature_num; i++) {
 8e4:	0200                	c.addi4spn	x8,x2,256
 8e6:	033c                	c.addi4spn	x15,x2,392
 8e8:	0000                	c.unimp
 8ea:	2102                	.2byte	0x2102
 8ec:	5e11                	c.li	x28,-28
 8ee:	0000                	c.unimp
 8f0:	0200                	c.addi4spn	x8,x2,256
 8f2:	6c91                	c.lui	x25,0x4
 8f4:	1900                	c.addi4spn	x8,x2,176
 8f6:	02fc                	c.addi4spn	x15,x2,332
 8f8:	0000                	c.unimp
 8fa:	1602                	c.slli	x12,0x20
    return max;
 8fc:	5e05                	c.li	x28,-31
 8fe:	0000                	c.unimp
}
 900:	d400                	c.sw	x8,40(x8)
 902:	0004                	.2byte	0x4
 904:	7000                	.2byte	0x7000
 906:	0000                	c.unimp
 908:	0100                	c.addi4spn	x8,x2,128
 90a:	fc9c                	.2byte	0xfc9c
 90c:	0008                	.2byte	0x8
 90e:	0300                	c.addi4spn	x8,x2,384
void cnn_layer(int weights[5][5][5][5], int biasses[5], int inputs[5][5][5], int outputs[5][5][5], int input_channel, int output_channel, int input_size, int kernel_size, int stride, int zero_pad, int af_num){
 910:	736c                	.2byte	0x736c
 912:	0062                	c.slli	x0,0x18
 914:	1702                	c.slli	x14,0x20
 916:	650e                	.2byte	0x650e
 918:	0000                	c.unimp
 91a:	0200                	c.addi4spn	x8,x2,256
 91c:	6c91                	c.lui	x25,0x4
 91e:	0f00                	c.addi4spn	x8,x2,912
 920:	02de                	c.slli	x5,0x17
 922:	0000                	c.unimp
 924:	7f84                	.2byte	0x7f84
 926:	0000                	c.unimp
 928:	8400                	.2byte	0x8400
 92a:	0004                	.2byte	0x4
 92c:	5000                	c.lw	x8,32(x8)
 92e:	0000                	c.unimp
 930:	0100                	c.addi4spn	x8,x2,128
 932:	339c                	.2byte	0x339c
 934:	0009                	c.addi	x0,2
 936:	0200                	c.addi4spn	x8,x2,256
 938:	02d9                	c.addi	x5,22
 93a:	0000                	c.unimp
 93c:	8401                	c.srai64	x8
 93e:	651e                	.2byte	0x651e
 940:	0000                	c.unimp
 942:	0200                	c.addi4spn	x8,x2,256
    int output_size = ((input_size + (2 * zero_pad) - kernel_size) >> stride) + 1;
 944:	5c91                	c.li	x25,-28
 946:	6d656d03          	.4byte	0x6d656d03
 94a:	0100                	c.addi4spn	x8,x2,128
 94c:	0885                	c.addi	x17,1 # 4001 <__global_pointer$+0x2041>
 94e:	007f                	.2byte	0x7f
 950:	0000                	c.unimp
 952:	9102                	c.jalr	x2
 954:	006c                	c.addi4spn	x11,x2,12
 956:	00039c0f          	.4byte	0x39c0f
 95a:	5800                	c.lw	x8,48(x8)
 95c:	007f                	.2byte	0x7f
 95e:	0000                	c.unimp
 960:	02f0                	c.addi4spn	x12,x2,332
 962:	0000                	c.unimp
 964:	0194                	c.addi4spn	x13,x2,192
 966:	0000                	c.unimp
 968:	9c01                	.2byte	0x9c01
 96a:	0986                	c.slli	x19,0x1
	for (o_ch_itr = 0; o_ch_itr < output_channel; o_ch_itr++) {
 96c:	0000                	c.unimp
 96e:	d902                	c.swsp	x0,176(x2)
 970:	0002                	c.slli64	x0
 972:	0100                	c.addi4spn	x8,x2,128
        for (o_r_itr = 0; o_r_itr < output_size; o_r_itr++) {
 974:	1e58                	c.addi4spn	x14,x2,820
 976:	0065                	c.addi	x0,25
 978:	0000                	c.unimp
 97a:	9102                	c.jalr	x2
            for (o_c_itr = 0; o_c_itr < output_size; o_c_itr++) {
 97c:	035c                	c.addi4spn	x15,x2,388
 97e:	0070                	c.addi4spn	x12,x2,12
 980:	6201                	.2byte	0x6201
 982:	2a0a                	.2byte	0x2a0a
                outputs[o_ch_itr][o_r_itr][o_c_itr] = biasses[o_ch_itr];
 984:	0001                	c.addi	x0,0
 986:	0200                	c.addi4spn	x8,x2,256
 988:	6c91                	c.lui	x25,0x4
 98a:	e001                	c.bnez	x8,98a <cnn_layer+0x7a>
 98c:	0000                	c.unimp
 98e:	0100                	c.addi4spn	x8,x2,128
 990:	0e62                	c.slli	x28,0x18
 992:	012a                	c.slli	x2,0xa
 994:	0000                	c.unimp
 996:	9102                	c.jalr	x2
 998:	0168                	c.addi4spn	x10,x2,140
 99a:	005d                	c.addi	x0,23
 99c:	0000                	c.unimp
 99e:	6401                	.2byte	0x6401
 9a0:	0000650f          	.4byte	0x650f
 9a4:	0200                	c.addi4spn	x8,x2,256
 9a6:	6491                	c.lui	x9,0x4
 9a8:	1a00                	c.addi4spn	x8,x2,304
 9aa:	03fa                	c.slli	x7,0x1e
 9ac:	0000                	c.unimp
 9ae:	4e01                	c.li	x28,0
 9b0:	2a10                	.2byte	0x2a10
 9b2:	0001                	c.addi	x0,0
 9b4:	4400                	c.lw	x8,8(x8)
 9b6:	0002                	c.slli64	x0
 9b8:	ac00                	.2byte	0xac00
 9ba:	0000                	c.unimp
 9bc:	0100                	c.addi4spn	x8,x2,128
 9be:	be9c                	.2byte	0xbe9c
 9c0:	0009                	c.addi	x0,2
 9c2:	0200                	c.addi4spn	x8,x2,256
 9c4:	005d                	c.addi	x0,23
 9c6:	0000                	c.unimp
 9c8:	4e01                	c.li	x28,0
 9ca:	6528                	.2byte	0x6528
 9cc:	0000                	c.unimp
 9ce:	0200                	c.addi4spn	x8,x2,256
        		for (i_ch_itr = 0; i_ch_itr < input_channel; i_ch_itr++) {
 9d0:	5c91                	c.li	x25,-28
 9d2:	00707503          	.4byte	0x707503
 9d6:	5001                	c.li	x0,-32
                    for (k_r_itr = 0; k_r_itr < kernel_size; k_r_itr++) {
 9d8:	2a0a                	.2byte	0x2a0a
 9da:	0001                	c.addi	x0,0
 9dc:	0200                	c.addi4spn	x8,x2,256
 9de:	6c91                	c.lui	x25,0x4
                        for (k_c_itr = 0; k_c_itr < kernel_size; k_c_itr++) {
 9e0:	1b00                	c.addi4spn	x8,x2,432
 9e2:	00e6                	c.slli	x1,0x19
 9e4:	0000                	c.unimp
 9e6:	2a01                	c.jal	af6 <cnn_layer+0x1e6>
                            outputs[o_ch_itr][o_r_itr][o_c_itr] += (((stride*o_r_itr)+k_r_itr-zero_pad) < 0) || (((stride*o_c_itr)+k_c_itr-zero_pad) < 0) || (((stride*o_r_itr)+k_r_itr-zero_pad) >= input_size) || (((stride*o_c_itr)+k_c_itr-zero_pad) >= input_size) ? 0 : inputs[i_ch_itr][(stride*o_r_itr)+k_r_itr-zero_pad][(stride*o_c_itr)+k_c_itr-zero_pad] * weights[o_ch_itr][i_ch_itr][k_r_itr][k_c_itr];
 9e8:	b406                	.2byte	0xb406
 9ea:	0000                	c.unimp
 9ec:	9000                	.2byte	0x9000
 9ee:	0001                	c.addi	x0,0
 9f0:	0100                	c.addi4spn	x8,x2,128
 9f2:	1c9c                	c.addi4spn	x15,x2,624
 9f4:	656d                	c.lui	x10,0x1b
 9f6:	006d                	c.addi	x0,27
 9f8:	2a01                	c.jal	b08 <cnn_layer+0x1f8>
 9fa:	7f14                	.2byte	0x7f14
 9fc:	0000                	c.unimp
 9fe:	0200                	c.addi4spn	x8,x2,256
 a00:	5c91                	c.li	x25,-28
 a02:	00706203          	.4byte	0x706203
 a06:	3001                	c.jal	206 <tj_free+0x152>
 a08:	2a0a                	.2byte	0x2a0a
 a0a:	0001                	c.addi	x0,0
 a0c:	0200                	c.addi4spn	x8,x2,256
 a0e:	6891                	c.lui	x17,0x4
 a10:	01007003          	.4byte	0x1007003
 a14:	0f30                	c.addi4spn	x12,x2,920
 a16:	012a                	c.slli	x2,0xa
 a18:	0000                	c.unimp
 a1a:	9102                	c.jalr	x2
 a1c:	006c                	c.addi4spn	x11,x2,12
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
	nop
   0:	1101                	c.addi	x2,-32
   2:	1000                	c.addi4spn	x8,x2,32
	la ra, exit
   4:	03175517          	auipc	x10,0x3175
   8:	1b0e                	c.slli	x22,0x23
   a:	250e                	.2byte	0x250e
	la sp, _sp
   c:	130e                	c.slli	x6,0x23
   e:	0005                	c.addi	x0,1
  10:	0000                	c.unimp
  12:	3401                	c.jal	fffffa12 <_sp+0xfffefa12>
	mv s0, sp
  14:	0300                	c.addi4spn	x8,x2,384
  16:	3a0e                	.2byte	0x3a0e
	la gp, __global_pointer$
  18:	390b3b0b          	.4byte	0x390b3b0b
  1c:	0213490b          	.4byte	0x213490b
	li tp, 0
  20:	0018                	.2byte	0x18
  22:	0200                	c.addi4spn	x8,x2,256
	li t0, 0
  24:	0005                	c.addi	x0,1
  26:	0b3a0e03          	lb	x28,179(x20)
	li t1, 0
  2a:	0b390b3b          	.4byte	0xb390b3b
	li t2, 0
  2e:	1349                	c.addi	x6,-14
	li s1, 0
  30:	1802                	c.slli	x16,0x20
  32:	0000                	c.unimp
	li a0, 0
  34:	03003403          	.4byte	0x3003403
	li a1, 0
  38:	3a08                	.2byte	0x3a08
  3a:	390b3b0b          	.4byte	0x390b3b0b
	li a2, 0
  3e:	0213490b          	.4byte	0x213490b
	li a3, 0
  42:	0018                	.2byte	0x18
	li a4, 0
  44:	0400                	c.addi4spn	x8,x2,512
  46:	0024                	c.addi4spn	x9,x2,8
	li a5, 0
  48:	0b3e0b0b          	.4byte	0xb3e0b0b
	li a6, 0
  4c:	00000e03          	lb	x28,0(x0) # 0 <crt>
	li a7, 0
  50:	2105                	c.jal	470 <tj_malloc+0x180>
  52:	4900                	c.lw	x8,16(x10)
	li s2, 0
  54:	000b2f13          	slti	x30,x22,0
	li s3, 0
  58:	0600                	c.addi4spn	x8,x2,768
  5a:	0101                	c.addi	x2,0
	li s4, 0
  5c:	1349                	c.addi	x6,-14
  5e:	1301                	c.addi	x6,-32
	li s5, 0
  60:	0000                	c.unimp
  62:	0b000f07          	.4byte	0xb000f07
	li s6, 0
  66:	0421                	c.addi	x8,8 # ffffa008 <_sp+0xfffea008>
	li s7, 0
  68:	1349                	c.addi	x6,-14
  6a:	0000                	c.unimp
	li s8, 0
  6c:	2e08                	.2byte	0x2e08
  6e:	3f01                	c.jal	ffffff7e <_sp+0xfffeff7e>
	li s9, 0
  70:	0319                	c.addi	x6,6
  72:	3a0e                	.2byte	0x3a0e
	li s10, 0
  74:	0221                	c.addi	x4,8 # 8 <crt+0x8>
  76:	21390b3b          	.4byte	0x21390b3b
	li s11, 0
  7a:	2706                	.2byte	0x2706
	li t3, 0
  7c:	1119                	c.addi	x2,-26
  7e:	1201                	c.addi	x4,-32 # ffffffe0 <_sp+0xfffeffe0>
	li t4, 0
  80:	4006                	.2byte	0x4006
  82:	7c18                	.2byte	0x7c18
	li t5, 0
  84:	0119                	c.addi	x2,6
  86:	09000013          	addi	x0,x0,144
	li t6, 0
  8a:	0005                	c.addi	x0,1
	j main
  8c:	1349                	c.addi	x6,-14
  8e:	0000                	c.unimp
  90:	160a                	c.slli	x12,0x22
  92:	0300                	c.addi4spn	x8,x2,384
  94:	3a0e                	.2byte	0x3a0e
  96:	390b3b0b          	.4byte	0x390b3b0b
  9a:	0013490b          	.4byte	0x13490b
  9e:	0b00                	c.addi4spn	x8,x2,400
	la sp, _sp
  a0:	000d                	c.addi	x0,3
  a2:	213a0e03          	lb	x28,531(x20)
  a6:	3b01                	c.jal	fffffdb6 <_sp+0xfffefdb6>
	sw a0, -8(sp)
  a8:	490b390b          	.4byte	0x490b390b
	nop
  ac:	000b3813          	sltiu	x16,x22,0
	wfi
  b0:	0c00                	c.addi4spn	x8,x2,528
  b2:	0034                	c.addi4spn	x13,x2,8
void tj_free(void *mem) {
  b4:	213a0e03          	lb	x28,531(x20)
  b8:	3b02                	.2byte	0x3b02
  ba:	490b390b          	.4byte	0x490b390b
  be:	02193f13          	sltiu	x30,x18,33
  c2:	0018                	.2byte	0x18
  c4:	0d00                	c.addi4spn	x8,x2,656
  c6:	012e                	c.slli	x2,0xb
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	0e03193f 3b02213a 	.8byte	0x3b02213a0e03193f
  d0:	0621390b          	.4byte	0x621390b
  d4:	01111927          	.4byte	0x1111927
  d8:	0612                	c.slli	x12,0x4
  da:	1840                	c.addi4spn	x8,x2,52
  dc:	197a                	c.slli	x18,0x3e
  de:	1301                	c.addi	x6,-32
  e0:	0000                	c.unimp
  e2:	2e0e                	.2byte	0x2e0e
  e4:	3f01                	c.jal	fffffff4 <_sp+0xfffefff4>
  e6:	0319                	c.addi	x6,6
		exit(1);
  e8:	3a0e                	.2byte	0x3a0e
  ea:	0221                	c.addi	x4,8 # 8 <crt+0x8>
  ec:	21390b3b          	.4byte	0x21390b3b
  f0:	2705                	c.jal	810 <fc_weight_generator+0x68>
  f2:	4919                	c.li	x18,6
	bp = (Header *)mem - 1; //point to block header
  f4:	12011113          	.4byte	0x12011113
  f8:	4006                	.2byte	0x4006
  fa:	7a18                	.2byte	0x7a18
  fc:	0119                	c.addi	x2,6
  fe:	0f000013          	addi	x0,x0,240
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 102:	012e                	c.slli	x2,0xb
 104:	0e03193f 3b01213a 	.8byte	0x3b01213a0e03193f
 10c:	0721390b          	.4byte	0x721390b
		if (p >= p->next && (bp > p || bp < p->next))
 110:	13491927          	.4byte	0x13491927
 114:	0111                	c.addi	x2,4
 116:	0612                	c.slli	x12,0x4
 118:	1840                	c.addi4spn	x8,x2,52
 11a:	197c                	c.addi4spn	x15,x2,188
 11c:	1301                	c.addi	x6,-32
 11e:	0000                	c.unimp
 120:	1110                	c.addi4spn	x12,x2,160
 122:	2501                	c.jal	722 <fc_layer+0x1aa>
 124:	130e                	c.slli	x6,0x23
 126:	1b1f030b          	.4byte	0x1b1f030b
 12a:	111f 1201 1006      	.byte	0x1f, 0x11, 0x01, 0x12, 0x06, 0x10
 130:	11000017          	auipc	x0,0x11000
 134:	0024                	c.addi4spn	x9,x2,8
 136:	0b3e0b0b          	.4byte	0xb3e0b0b
 13a:	00000803          	lb	x16,0(x0) # 0 <crt>
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13e:	0f12                	c.slli	x30,0x4
 140:	0b00                	c.addi4spn	x8,x2,400
 142:	1300000b          	.4byte	0x1300000b
 146:	0021                	c.addi	x0,8
 148:	1349                	c.addi	x6,-14
 14a:	0000052f          	.4byte	0x52f
 14e:	1314                	c.addi4spn	x13,x2,416
 150:	0301                	c.addi	x6,0
 152:	0b0e                	c.slli	x22,0x3
 154:	3b0b3a0b          	.4byte	0x3b0b3a0b
 158:	010b390b          	.4byte	0x10b390b
 15c:	15000013          	addi	x0,x0,336
 160:	0034                	c.addi4spn	x13,x2,8
 162:	0b3a0803          	lb	x16,179(x20)
	if (bp + bp->size == p->next) { //join to upper nbr
 166:	0b390b3b          	.4byte	0xb390b3b
 16a:	1349                	c.addi	x6,-14
 16c:	1802193f 2e160000 	.8byte	0x2e1600001802193f
 174:	3f01                	c.jal	84 <crt+0x84>
 176:	0319                	c.addi	x6,6
 178:	3a0e                	.2byte	0x3a0e
 17a:	390b3b0b          	.4byte	0x390b3b0b
 17e:	4919270b          	.4byte	0x4919270b
 182:	01193c13          	sltiu	x24,x18,17
		bp->size += p->next->size;
 186:	17000013          	addi	x0,x0,368
 18a:	012e                	c.slli	x2,0xb
 18c:	0e03193f 0b3b0b3a 	.8byte	0xb3b0b3a0e03193f
 194:	0b39                	c.addi	x22,14 # fffe000e <_sp+0xfffd000e>
 196:	01871927          	.4byte	0x1871927
 19a:	3c19                	c.jal	fffffbb0 <_sp+0xfffefbb0>
 19c:	0119                	c.addi	x2,6
 19e:	18000013          	addi	x0,x0,384
 1a2:	012e                	c.slli	x2,0xb
		bp->next = p->next->next;
 1a4:	0e03193f 0b3b0b3a 	.8byte	0xb3b0b3a0e03193f
 1ac:	0b39                	c.addi	x22,14
 1ae:	1349                	c.addi	x6,-14
 1b0:	0111                	c.addi	x2,4
 1b2:	0612                	c.slli	x12,0x4
 1b4:	1840                	c.addi4spn	x8,x2,52
 1b6:	197c                	c.addi4spn	x15,x2,188
 1b8:	1301                	c.addi	x6,-32
 1ba:	0000                	c.unimp
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	2e19                	c.jal	4d2 <tj_calloc+0x4e>
 1be:	3f01                	c.jal	ce <tj_free+0x1a>
 1c0:	0319                	c.addi	x6,6
 1c2:	3a0e                	.2byte	0x3a0e
 1c4:	390b3b0b          	.4byte	0x390b3b0b
 1c8:	1113490b          	.4byte	0x1113490b
	if (p + p->size == bp) { //join to lower nbr
 1cc:	1201                	c.addi	x4,-32 # ffffffe0 <_sp+0xfffeffe0>
 1ce:	4006                	.2byte	0x4006
 1d0:	7a18                	.2byte	0x7a18
 1d2:	0119                	c.addi	x2,6
 1d4:	1a000013          	addi	x0,x0,416
 1d8:	012e                	c.slli	x2,0xb
 1da:	0b3a0e03          	lb	x28,179(x20)
 1de:	0b390b3b          	.4byte	0xb390b3b
 1e2:	13491927          	.4byte	0x13491927
 1e6:	0111                	c.addi	x2,4
		p->size += bp->size;
 1e8:	0612                	c.slli	x12,0x4
 1ea:	1840                	c.addi4spn	x8,x2,52
 1ec:	197c                	c.addi4spn	x15,x2,188
 1ee:	1301                	c.addi	x6,-32
 1f0:	0000                	c.unimp
 1f2:	3f012e1b          	.4byte	0x3f012e1b
 1f6:	0319                	c.addi	x6,6
 1f8:	3a0e                	.2byte	0x3a0e
 1fa:	390b3b0b          	.4byte	0x390b3b0b
 1fe:	1119270b          	.4byte	0x1119270b
 202:	1201                	c.addi	x4,-32 # ffffffe0 <_sp+0xfffeffe0>
		p->next = bp->next;
 204:	4006                	.2byte	0x4006
 206:	7c18                	.2byte	0x7c18
 208:	0019                	c.addi	x0,6
 20a:	1c00                	c.addi4spn	x8,x2,560
 20c:	0005                	c.addi	x0,1
 20e:	0b3a0803          	lb	x16,179(x20)
 212:	0b390b3b          	.4byte	0xb390b3b
 216:	1349                	c.addi	x6,-14
		p->next = bp; //again, if the free list is just the base
 218:	1802                	c.slli	x16,0x20
 21a:	0000                	c.unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
	nop
   0:	0024                	c.addi4spn	x9,x2,8
   2:	0000                	c.unimp
	la ra, exit
   4:	0002                	c.slli64	x0
   6:	0000                	c.unimp
   8:	0000                	c.unimp
   a:	0004                	.2byte	0x4
	...
	mv s0, sp
  14:	0090                	c.addi4spn	x12,x2,64
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	00a0                	c.addi4spn	x8,x2,72
  1a:	0000                	c.unimp
  1c:	0014                	.2byte	0x14
	...
	li t0, 0
  26:	0000                	c.unimp
	li t1, 0
  28:	001c                	.2byte	0x1c
  2a:	0000                	c.unimp
	li t2, 0
  2c:	0002                	c.slli64	x0
  2e:	00000023          	sb	x0,0(x0) # 0 <crt>
	li s1, 0
  32:	0004                	.2byte	0x4
	li a0, 0
  34:	0000                	c.unimp
  36:	0000                	c.unimp
	li a1, 0
  38:	00b4                	c.addi4spn	x13,x2,72
  3a:	0000                	c.unimp
	li a2, 0
  3c:	1628                	c.addi4spn	x10,x2,808
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
	nop
   0:	2e747263          	bgeu	x8,x7,2e4 <getmoremem+0xa0>
	la ra, exit
   4:	682f0073          	.4byte	0x682f0073
   8:	2f656d6f          	jal	x26,562fe <_sp+0x462fe>
	la sp, _sp
   c:	7961                	c.lui	x18,0xffff8
   e:	742d616b          	.4byte	0x742d616b
  12:	757a7573          	csrrci	x10,0x757,20
	mv s0, sp
  16:	442f696b          	.4byte	0x442f696b
	la gp, __global_pointer$
  1a:	6d75636f          	jal	x6,56ef0 <_sp+0x46ef0>
  1e:	6e65                	c.lui	x28,0x19
	li tp, 0
  20:	7374                	.2byte	0x7374
  22:	6f72702f          	.4byte	0x6f72702f
	li t0, 0
  26:	656a                	.2byte	0x656a
	li t1, 0
  28:	762d7463          	bgeu	x26,x2,790 <fc_input_generator+0x60>
	li t2, 0
  2c:	6f2d                	c.lui	x30,0xb
  2e:	6570                	.2byte	0x6570
	li s1, 0
  30:	2d6e                	.2byte	0x2d6e
  32:	6562                	.2byte	0x6562
	li a0, 0
  34:	6174                	.2byte	0x6174
  36:	462d                	c.li	x12,11
	li a1, 0
  38:	452d726f          	jal	x4,d748a <_sp+0xc748a>
	li a2, 0
  3c:	37344543          	.4byte	0x37344543
	li a3, 0
  40:	3030                	.2byte	0x3030
  42:	2f4a                	.2byte	0x2f4a
	li a4, 0
  44:	6974706f          	jal	x0,47eda <_sp+0x37eda>
	li a5, 0
  48:	696d                	c.lui	x18,0x1b
  4a:	617a                	.2byte	0x617a
	li a6, 0
  4c:	6974                	.2byte	0x6974
  4e:	47006e6f          	jal	x28,64be <_ebss+0xc9a>
	li a7, 0
  52:	554e                	c.lwsp	x10,240(x2)
	li s2, 0
  54:	4120                	c.lw	x8,64(x10)
  56:	2e322053          	.4byte	0x2e322053
	li s3, 0
  5a:	74003833          	.4byte	0x74003833
	li s4, 0
  5e:	6c61746f          	jal	x8,17724 <_sp+0x7724>
	li s5, 0
  62:	735f 7a69 0065      	.byte	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x00
	li s7, 0
  68:	6661                	c.lui	x12,0x18
  6a:	6e5f 6d75 6600      	.byte	0x5f, 0x6e, 0x75, 0x6d, 0x00, 0x66
	li s9, 0
  70:	66615f63          	bge	x2,x6,6ee <fc_layer+0x176>
	li s10, 0
  74:	745f 7079 0065      	.byte	0x5f, 0x74, 0x79, 0x70, 0x65, 0x00
	li s11, 0
  7a:	5f6e6e63          	bltu	x28,x22,676 <fc_layer+0xfe>
	li t3, 0
  7e:	67696577          	.4byte	0x67696577
	li t4, 0
  82:	7468                	.2byte	0x7468
	li t5, 0
  84:	675f 6e65 7265      	.byte	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72
	li t6, 0
  8a:	7461                	c.lui	x8,0xffff8
	j main
  8c:	6300726f          	jal	x4,76bc <_ebss+0x1e98>
  90:	6e6e                	.2byte	0x6e6e
  92:	695f 706e 7475      	.byte	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74
  98:	635f 6168 6e6e      	.byte	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e
  9e:	6c65                	c.lui	x24,0x19
	la sp, _sp
  a0:	6300                	.2byte	0x6300
  a2:	6e6e                	.2byte	0x6e6e
  a4:	695f 706e 7475      	.byte	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74
	sw a0, -8(sp)
  aa:	6f700073          	.4byte	0x6f700073
	nop
  ae:	6e5f6c6f          	jal	x24,f6f92 <_sp+0xe6f92>
	wfi
  b2:	6d75                	c.lui	x26,0x1d
void tj_free(void *mem) {
  b4:	6600                	.2byte	0x6600
  b6:	6572                	.2byte	0x6572
  b8:	7065                	c.lui	x0,0xffff9
  ba:	6300                	.2byte	0x6300
  bc:	6e6e                	.2byte	0x6e6e
  be:	745f 5f6f 6366      	.byte	0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x63
  c4:	7300                	.2byte	0x7300
  c6:	6f68                	.2byte	0x6f68
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	7472                	.2byte	0x7472
  ca:	6920                	.2byte	0x6920
  cc:	746e                	.2byte	0x746e
  ce:	7300                	.2byte	0x7300
  d0:	7a69                	c.lui	x20,0xffffa
  d2:	5f65                	c.li	x30,-7
  d4:	0074                	c.addi4spn	x13,x2,12
  d6:	6366                	.2byte	0x6366
  d8:	695f 706e 7475      	.byte	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74
  de:	72700073          	.4byte	0x72700073
  e2:	7665                	c.lui	x12,0xffff9
  e4:	0070                	c.addi4spn	x12,x2,12
  e6:	6a74                	.2byte	0x6a74
		exit(1);
  e8:	665f 6572 0065      	.byte	0x5f, 0x66, 0x72, 0x65, 0x65, 0x00
  ee:	616d                	c.addi16sp	x2,240
  f0:	6e69                	c.lui	x28,0x1a
  f2:	6300                	.2byte	0x6300
	bp = (Header *)mem - 1; //point to block header
  f4:	6e6e                	.2byte	0x6e6e
  f6:	735f 7274 6469      	.byte	0x5f, 0x73, 0x74, 0x72, 0x69, 0x64
  fc:	0065                	c.addi	x0,25
  fe:	5f6e6e63          	bltu	x28,x22,6fa <fc_layer+0x182>
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 102:	6f70                	.2byte	0x6f70
 104:	745f6c6f          	jal	x24,f7048 <_sp+0xe7048>
 108:	7079                	c.lui	x0,0xffffe
 10a:	0065                	c.addi	x0,25
 10c:	6568                	.2byte	0x6568
 10e:	6461                	c.lui	x8,0x18
		if (p >= p->next && (bp > p || bp < p->next))
 110:	7265                	c.lui	x4,0xffff9
 112:	6f00                	.2byte	0x6f00
 114:	635f 695f 7274      	.byte	0x5f, 0x63, 0x5f, 0x69, 0x74, 0x72
 11a:	6600                	.2byte	0x6600
 11c:	6165                	c.addi16sp	x2,112
 11e:	7574                	.2byte	0x7574
 120:	6572                	.2byte	0x6572
 122:	6e630073          	.4byte	0x6e630073
 126:	5f6e                	c.lwsp	x30,248(x2)
 128:	6e72656b          	.4byte	0x6e72656b
 12c:	6c65                	c.lui	x24,0x19
 12e:	735f 7a69 0065      	.byte	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x00
 134:	6548                	.2byte	0x6548
 136:	6461                	c.lui	x8,0x18
 138:	7265                	c.lui	x4,0xffff9
 13a:	6300                	.2byte	0x6300
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	6e6e                	.2byte	0x6e6e
 13e:	625f 6169 7373      	.byte	0x5f, 0x62, 0x69, 0x61, 0x73, 0x73
 144:	7365                	c.lui	x6,0xffff9
 146:	6300                	.2byte	0x6300
 148:	6e6e                	.2byte	0x6e6e
 14a:	6c5f 7961 7265      	.byte	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72
 150:	6800                	.2byte	0x6800
 152:	6165                	c.addi16sp	x2,112
 154:	0070                	c.addi4spn	x12,x2,12
 156:	6f6c                	.2byte	0x6f6c
 158:	676e                	.2byte	0x676e
 15a:	6c20                	.2byte	0x6c20
 15c:	20676e6f          	jal	x28,76362 <_sp+0x66362>
 160:	6e69                	c.lui	x28,0x1a
 162:	0074                	c.addi4spn	x13,x2,12
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	5f6e6e63          	bltu	x28,x22,760 <fc_input_generator+0x30>
 168:	6e69                	c.lui	x28,0x1a
 16a:	7570                	.2byte	0x7570
 16c:	5f74                	c.lw	x13,124(x14)
 16e:	657a6973          	csrrsi	x18,0x657,20
 172:	6600                	.2byte	0x6600
 174:	6e695f63          	bge	x18,x6,872 <fc_weight_generator+0xca>
 178:	7570                	.2byte	0x7570
 17a:	5f74                	c.lw	x13,124(x14)
 17c:	656e6567          	.4byte	0x656e6567
 180:	6172                	.2byte	0x6172
 182:	6f74                	.2byte	0x6f74
		bp->size += p->next->size;
 184:	0072                	c.slli	x0,0x1c
 186:	656e                	.2byte	0x656e
 188:	61635f77          	.4byte	0x61635f77
 18c:	646e                	.2byte	0x646e
 18e:	6469                	c.lui	x8,0x1a
 190:	7461                	c.lui	x8,0xffff8
 192:	0065                	c.addi	x0,25
 194:	5f6e6e63          	bltu	x28,x22,790 <fc_input_generator+0x60>
 198:	6e69                	c.lui	x28,0x1a
 19a:	7570                	.2byte	0x7570
 19c:	5f74                	c.lw	x13,124(x14)
 19e:	656e6567          	.4byte	0x656e6567
 1a2:	6172                	.2byte	0x6172
		bp->next = p->next->next;
 1a4:	6f74                	.2byte	0x6f74
 1a6:	0072                	c.slli	x0,0x1c
 1a8:	6570                	.2byte	0x6570
 1aa:	6972                	.2byte	0x6972
 1ac:	6600646f          	jal	x8,680c <_ebss+0xfe8>
 1b0:	756f5f63          	bge	x30,x22,90e <fc_soft_max+0x82>
 1b4:	7074                	.2byte	0x7074
 1b6:	7475                	c.lui	x8,0xffffd
 1b8:	4e470073          	.4byte	0x4e470073
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	2055                	c.jal	260 <getmoremem+0x1c>
 1be:	20313143          	.4byte	0x20313143
 1c2:	3131                	c.jal	fffffdce <_sp+0xfffefdce>
 1c4:	312e                	.2byte	0x312e
 1c6:	302e                	.2byte	0x302e
 1c8:	2d20                	.2byte	0x2d20
 1ca:	6e6d                	c.lui	x28,0x1b
	if (p + p->size == bp) { //join to lower nbr
 1cc:	65722d6f          	jal	x26,23022 <_sp+0x13022>
 1d0:	616c                	.2byte	0x616c
 1d2:	2078                	.2byte	0x2078
 1d4:	6d2d                	c.lui	x26,0xb
 1d6:	7261                	c.lui	x4,0xffff8
 1d8:	723d6863          	bltu	x26,x3,908 <fc_soft_max+0x7c>
 1dc:	3376                	.2byte	0x3376
 1de:	6932                	.2byte	0x6932
 1e0:	206d                	c.jal	28a <getmoremem+0x46>
 1e2:	6d2d                	c.lui	x26,0xb
 1e4:	6261                	c.lui	x4,0x18
 1e6:	3d69                	c.jal	80 <crt+0x80>
		p->size += bp->size;
 1e8:	6c69                	c.lui	x24,0x1a
 1ea:	3370                	.2byte	0x3370
 1ec:	2032                	.2byte	0x2032
 1ee:	6d2d                	c.lui	x26,0xb
 1f0:	69727473          	csrrci	x8,0x697,4
 1f4:	612d7463          	bgeu	x26,x18,7fc <fc_weight_generator+0x54>
 1f8:	696c                	.2byte	0x696c
 1fa:	2d206e67          	.4byte	0x2d206e67
 1fe:	6e6d                	c.lui	x28,0x1b
 200:	69642d6f          	jal	x26,42896 <_sp+0x32896>
		p->next = bp->next;
 204:	2076                	.2byte	0x2076
 206:	6d2d                	c.lui	x26,0xb
 208:	7574                	.2byte	0x7574
 20a:	656e                	.2byte	0x656e
 20c:	723d                	c.lui	x4,0xfffef
 20e:	656b636f          	jal	x6,b6864 <_sp+0xa6864>
 212:	2074                	.2byte	0x2074
 214:	6d2d                	c.lui	x26,0xb
 216:	7261                	c.lui	x4,0xffff8
		p->next = bp; //again, if the free list is just the base
 218:	723d6863          	bltu	x26,x3,948 <cnn_layer+0x38>
 21c:	3376                	.2byte	0x3376
 21e:	6932                	.2byte	0x6932
 220:	206d                	c.jal	2ca <getmoremem+0x86>
 222:	672d                	c.lui	x14,0xb
	freep = p;
 224:	2d20                	.2byte	0x2d20
 226:	2d20304f          	.4byte	0x2d20304f
 22a:	3d647473          	csrrci	x8,0x3d6,8
 22e:	31756e67          	.4byte	0x31756e67
}
 232:	0031                	c.addi	x0,12
 234:	6366                	.2byte	0x6366
 236:	6f5f 7475 7570      	.byte	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75
 23c:	5f74                	c.lw	x13,124(x14)
 23e:	756e                	.2byte	0x756e
 240:	006d                	c.addi	x0,27
 242:	5f69                	c.li	x30,-6
static Header* getmoremem(unsigned int total_size) {
 244:	74695f63          	bge	x18,x6,9a2 <cnn_layer+0x92>
 248:	0072                	c.slli	x0,0x1c
 24a:	6e75                	c.lui	x28,0x1d
 24c:	6e676973          	csrrsi	x18,0x6e6,14
 250:	6465                	c.lui	x8,0x19
 252:	6320                	.2byte	0x6320
 254:	6168                	.2byte	0x6168
 256:	0072                	c.slli	x0,0x1c
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 258:	7865                	c.lui	x16,0xffff9
 25a:	7469                	c.lui	x8,0xffffa
 25c:	6f00                	.2byte	0x6f00
 25e:	725f 695f 7274      	.byte	0x5f, 0x72, 0x5f, 0x69, 0x74, 0x72
 264:	6c00                	.2byte	0x6c00
 266:	20676e6f          	jal	x28,7646c <_sp+0x6646c>
 26a:	6f64                	.2byte	0x6f64
 26c:	6275                	c.lui	x4,0x1d
 26e:	656c                	.2byte	0x656c
	Header* up = (Header *)next_index;
 270:	6300                	.2byte	0x6300
 272:	6e6e                	.2byte	0x6e6e
 274:	615f 5f66 7974      	.byte	0x5f, 0x61, 0x66, 0x5f, 0x74, 0x79
 27a:	6570                	.2byte	0x6570
	next_index += total_size; //allocate the block
 27c:	6300                	.2byte	0x6300
 27e:	6e6e                	.2byte	0x6e6e
 280:	6f5f 7475 7570      	.byte	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75
 286:	5f74                	c.lw	x13,124(x14)
 288:	6e616863          	bltu	x2,x6,978 <cnn_layer+0x68>
 28c:	656e                	.2byte	0x656e
 28e:	006c                	c.addi4spn	x11,x2,12
 290:	657a                	.2byte	0x657a
 292:	6f72                	.2byte	0x6f72
	avail_mem -= total_size; //deduct from avail mem;
 294:	705f 6461 6b00      	.byte	0x5f, 0x70, 0x61, 0x64, 0x00, 0x6b
 29a:	635f 695f 7274      	.byte	0x5f, 0x63, 0x5f, 0x69, 0x74, 0x72
 2a0:	6c00                	.2byte	0x6c00
 2a2:	20676e6f          	jal	x28,764a8 <_sp+0x664a8>
 2a6:	6f6c                	.2byte	0x6f6c
 2a8:	676e                	.2byte	0x676e
 2aa:	7520                	.2byte	0x7520
	up->size = total_size - sizeof(Header); //set the size right
 2ac:	736e                	.2byte	0x736e
 2ae:	6769                	c.lui	x14,0x1a
 2b0:	656e                	.2byte	0x656e
 2b2:	2064                	.2byte	0x2064
 2b4:	6e69                	c.lui	x28,0x1a
 2b6:	0074                	c.addi4spn	x13,x2,12
 2b8:	68635f6f          	jal	x30,3593e <_sp+0x2593e>
	tj_free((void *)(++up)); //append the new block to the free list first
 2bc:	695f 7274 6600      	.byte	0x5f, 0x69, 0x74, 0x72, 0x00, 0x66
 2c2:	6f735f63          	bge	x6,x23,9c0 <cnn_layer+0xb0>
 2c6:	7466                	.2byte	0x7466
 2c8:	6d5f 7861 6300      	.byte	0x5f, 0x6d, 0x61, 0x78, 0x00, 0x63
 2ce:	6e6e                	.2byte	0x6e6e
 2d0:	665f 6165 7574      	.byte	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75
	return freep;
 2d6:	6572                	.2byte	0x6572
 2d8:	735f 7a69 0065      	.byte	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x00
}
 2de:	6a74                	.2byte	0x6a74
 2e0:	635f 6c61 6f6c      	.byte	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x6f
 2e6:	6e630063          	beq	x6,x6,9c6 <cnn_layer+0xb6>
 2ea:	5f6e                	c.lwsp	x30,248(x2)
 2ec:	6566                	.2byte	0x6566
 2ee:	7461                	c.lui	x8,0xffff8
void *tj_malloc(unsigned int size) {
 2f0:	7275                	c.lui	x4,0xffffd
 2f2:	5f65                	c.li	x30,-7
 2f4:	6e616863          	bltu	x2,x6,9e4 <cnn_layer+0xd4>
 2f8:	656e                	.2byte	0x656e
 2fa:	006c                	c.addi4spn	x11,x2,12
 2fc:	6172                	.2byte	0x6172
 2fe:	646e                	.2byte	0x646e
 300:	675f6d6f          	jal	x26,f7174 <_sp+0xe7174>
	if (size > sizeof(heap)) return NULL;
 304:	6e65                	c.lui	x28,0x19
 306:	6300                	.2byte	0x6300
 308:	6e6e                	.2byte	0x6e6e
 30a:	775f 6965 6867      	.byte	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68
 310:	7374                	.2byte	0x7374
 312:	6600                	.2byte	0x6600
 314:	6e695f63          	bge	x18,x6,a12 <cnn_layer+0x102>
	if ((size & 3) != 0) {
 318:	7570                	.2byte	0x7570
 31a:	5f74                	c.lw	x13,124(x14)
 31c:	756e                	.2byte	0x756e
 31e:	006d                	c.addi	x0,27
 320:	6366                	.2byte	0x6366
 322:	775f 6965 6867      	.byte	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68
		size = size + 4 - (size & 3);
 328:	5f74                	c.lw	x13,124(x14)
 32a:	656e6567          	.4byte	0x656e6567
 32e:	6172                	.2byte	0x6172
 330:	6f74                	.2byte	0x6f74
 332:	0072                	c.slli	x0,0x1c
	unsigned int total_size = size + sizeof(Header); //need to include the header size as well
 334:	6572                	.2byte	0x6572
 336:	756c                	.2byte	0x756c
 338:	615f 0066 6e69      	.byte	0x5f, 0x61, 0x66, 0x00, 0x69, 0x6e
 33e:	615f 0066 6e63      	.byte	0x5f, 0x61, 0x66, 0x00, 0x63, 0x6e
	prevp = freep;
 344:	5f6e                	c.lwsp	x30,248(x2)
 346:	6f70                	.2byte	0x6f70
 348:	69006c6f          	jal	x24,69d8 <_ebss+0x11b4>
	if (prevp == NULL) {
 34c:	725f 695f 7274      	.byte	0x5f, 0x72, 0x5f, 0x69, 0x74, 0x72
 352:	6f00                	.2byte	0x6f00
		prevp = &base;
 354:	7475                	c.lui	x8,0xffffd
 356:	7570                	.2byte	0x7570
 358:	5f74                	c.lw	x13,124(x14)
 35a:	657a6973          	csrrsi	x18,0x657,20
 35e:	6600                	.2byte	0x6600
		freep = prevp;
 360:	616c5f63          	bge	x24,x22,97e <cnn_layer+0x6e>
 364:	6579                	c.lui	x10,0x1e
 366:	0072                	c.slli	x0,0x1c
 368:	726f6873          	csrrsi	x16,0x726,30
		base.next = freep;
 36c:	2074                	.2byte	0x2074
 36e:	6e75                	c.lui	x28,0x1d
 370:	6e676973          	csrrsi	x18,0x6e6,14
 374:	6465                	c.lui	x8,0x19
 376:	6920                	.2byte	0x6920
 378:	746e                	.2byte	0x746e
 37a:	6300                	.2byte	0x6300
 37c:	6e6e                	.2byte	0x6e6e
 37e:	7a5f 7265 5f6f      	.byte	0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f
		base.size = 0;
 384:	6170                	.2byte	0x6170
 386:	6464                	.2byte	0x6464
 388:	6e00                	.2byte	0x6e00
 38a:	7865                	c.lui	x16,0xffff9
	for (p = prevp->next; ;prevp = p, p = p->next) {
 38c:	5f74                	c.lw	x13,124(x14)
 38e:	6e69                	c.lui	x28,0x1a
 390:	6564                	.2byte	0x6564
 392:	0078                	c.addi4spn	x14,x2,12
 394:	5f725f6b          	.4byte	0x5f725f6b
		if (p->size >= size) { //big enough
 398:	7469                	c.lui	x8,0xffffa
 39a:	0072                	c.slli	x0,0x1c
 39c:	6a74                	.2byte	0x6a74
 39e:	6d5f 6c61 6f6c      	.byte	0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f
 3a4:	63660063          	beq	x12,x22,9c4 <cnn_layer+0xb4>
			if (p->size == size) // exact size
 3a8:	625f 6169 7373      	.byte	0x5f, 0x62, 0x69, 0x61, 0x73, 0x73
 3ae:	7365                	c.lui	x6,0xffff9
 3b0:	6900                	.2byte	0x6900
 3b2:	635f 5f68 7469      	.byte	0x5f, 0x63, 0x68, 0x5f, 0x69, 0x74
				prevp->next = p->next; // just return that block
 3b8:	0072                	c.slli	x0,0x1c
 3ba:	5f6e6e63          	bltu	x28,x22,9b6 <cnn_layer+0xa6>
 3be:	7074756f          	jal	x10,482c4 <_sp+0x382c4>
 3c2:	7475                	c.lui	x8,0xffffd
 3c4:	6e630073          	.4byte	0x6e630073
 3c8:	5f6e                	c.lwsp	x30,248(x2)
 3ca:	6566                	.2byte	0x6566
				p->size -= total_size; //break up the block
 3cc:	7461                	c.lui	x8,0xffff8
 3ce:	7275                	c.lui	x4,0xffffd
 3d0:	0065                	c.addi	x0,25
 3d2:	6366                	.2byte	0x6366
 3d4:	775f 6965 6867      	.byte	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68
 3da:	7374                	.2byte	0x7374
 3dc:	6d00                	.2byte	0x6d00
 3de:	6d65                	c.lui	x26,0x19
 3e0:	00746573          	csrrsi	x10,0x7,8
				p += p->size;
 3e4:	7661                	c.lui	x12,0xffff8
 3e6:	6961                	c.lui	x18,0x18
 3e8:	5f6c                	c.lw	x11,124(x14)
 3ea:	656d                	c.lui	x10,0x1b
 3ec:	006d                	c.addi	x0,27
 3ee:	6566                	.2byte	0x6566
 3f0:	7461                	c.lui	x8,0xffff8
 3f2:	7275                	c.lui	x4,0xffffd
 3f4:	5f65                	c.li	x30,-7
 3f6:	756e                	.2byte	0x756e
 3f8:	006d                	c.addi	x0,27
 3fa:	6d746567          	.4byte	0x6d746567
				p->size = size;
 3fe:	6d65726f          	jal	x4,57ad4 <_sp+0x47ad4>
 402:	6d65                	c.lui	x26,0x19
 404:	6c00                	.2byte	0x6c00
 406:	7366                	.2byte	0x7366
			freep = prevp;
 408:	0072                	c.slli	x0,0x1c
 40a:	6366                	.2byte	0x6366
 40c:	665f 6165 7574      	.byte	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75
 412:	6572                	.2byte	0x6572
			return (void *)(++p);
 414:	6200                	.2byte	0x6200
 416:	7361                	c.lui	x6,0xffff8
 418:	0065                	c.addi	x0,25
 41a:	656e                	.2byte	0x656e
 41c:	7478                	.2byte	0x7478
	...

Disassembly of section .debug_rnglists:

00000000 <.debug_rnglists>:
	nop
   0:	0016                	c.slli	x0,0x5
   2:	0000                	c.unimp
	la ra, exit
   4:	0005                	c.addi	x0,1
   6:	0004                	.2byte	0x4
   8:	0000                	c.unimp
   a:	0000                	c.unimp
	la sp, _sp
   c:	00000007          	.4byte	0x7
  10:	9c00                	.2byte	0x9c00
  12:	0701                	c.addi	x14,0 # 1a000 <_sp+0xa000>
	mv s0, sp
  14:	00a0                	c.addi4spn	x8,x2,72
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	0020                	c.addi4spn	x8,x2,8

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
	nop
   0:	000c                	.2byte	0xc
   2:	0000                	c.unimp
	la ra, exit
   4:	ffff                	.2byte	0xffff
   6:	ffff                	.2byte	0xffff
   8:	7c010003          	lb	x0,1984(x2)
	la sp, _sp
   c:	0d01                	c.addi	x26,0 # 19000 <_sp+0x9000>
   e:	0002                	c.slli64	x0
  10:	0024                	c.addi4spn	x9,x2,8
  12:	0000                	c.unimp
	mv s0, sp
  14:	0000                	c.unimp
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	00b4                	c.addi4spn	x13,x2,72
  1a:	0000                	c.unimp
  1c:	0190                	c.addi4spn	x12,x2,192
  1e:	0000                	c.unimp
	li tp, 0
  20:	0e44                	c.addi4spn	x9,x2,788
  22:	4830                	c.lw	x12,80(x8)
	li t0, 0
  24:	0181                	c.addi	x3,0 # 1fc0 <__global_pointer$>
  26:	0288                	c.addi4spn	x10,x2,320
	li t1, 0
  28:	0c44                	c.addi4spn	x9,x2,532
  2a:	0008                	.2byte	0x8
	li t2, 0
  2c:	c1017403          	.4byte	0xc1017403
	li s1, 0
  30:	c844                	c.sw	x9,20(x8)
  32:	020c                	c.addi4spn	x11,x2,256
	li a0, 0
  34:	4430                	c.lw	x12,72(x8)
  36:	000e                	c.slli	x0,0x3
	li a1, 0
  38:	0024                	c.addi4spn	x9,x2,8
  3a:	0000                	c.unimp
	li a2, 0
  3c:	0000                	c.unimp
  3e:	0000                	c.unimp
	li a3, 0
  40:	0244                	c.addi4spn	x9,x2,260
  42:	0000                	c.unimp
	li a4, 0
  44:	00ac                	c.addi4spn	x11,x2,72
  46:	0000                	c.unimp
	li a5, 0
  48:	0e44                	c.addi4spn	x9,x2,788
  4a:	4830                	c.lw	x12,80(x8)
	li a6, 0
  4c:	0181                	c.addi	x3,0 # 1fc0 <__global_pointer$>
  4e:	0288                	c.addi4spn	x10,x2,320
	li a7, 0
  50:	0c44                	c.addi4spn	x9,x2,532
  52:	0008                	.2byte	0x8
	li s2, 0
  54:	9002                	c.ebreak
  56:	44c1                	c.li	x9,16
	li s3, 0
  58:	0cc8                	c.addi4spn	x10,x2,596
  5a:	3002                	.2byte	0x3002
	li s4, 0
  5c:	0e44                	c.addi4spn	x9,x2,788
  5e:	0000                	c.unimp
	li s5, 0
  60:	0024                	c.addi4spn	x9,x2,8
  62:	0000                	c.unimp
	li s6, 0
  64:	0000                	c.unimp
  66:	0000                	c.unimp
	li s7, 0
  68:	02f0                	c.addi4spn	x12,x2,332
  6a:	0000                	c.unimp
	li s8, 0
  6c:	0194                	c.addi4spn	x13,x2,192
  6e:	0000                	c.unimp
	li s9, 0
  70:	0e44                	c.addi4spn	x9,x2,788
  72:	4830                	c.lw	x12,80(x8)
	li s10, 0
  74:	0181                	c.addi	x3,0 # 1fc0 <__global_pointer$>
  76:	0288                	c.addi4spn	x10,x2,320
	li s11, 0
  78:	0c44                	c.addi4spn	x9,x2,532
  7a:	0008                	.2byte	0x8
	li t3, 0
  7c:	c1017803          	.4byte	0xc1017803
	li t4, 0
  80:	c844                	c.sw	x9,20(x8)
  82:	020c                	c.addi4spn	x11,x2,256
	li t5, 0
  84:	4430                	c.lw	x12,72(x8)
  86:	000e                	c.slli	x0,0x3
	li t6, 0
  88:	0024                	c.addi4spn	x9,x2,8
  8a:	0000                	c.unimp
	j main
  8c:	0000                	c.unimp
  8e:	0000                	c.unimp
  90:	0484                	c.addi4spn	x9,x2,576
  92:	0000                	c.unimp
  94:	0050                	c.addi4spn	x12,x2,4
  96:	0000                	c.unimp
  98:	0e44                	c.addi4spn	x9,x2,788
  9a:	4830                	c.lw	x12,80(x8)
  9c:	0181                	c.addi	x3,0 # 1fc0 <__global_pointer$>
  9e:	0288                	c.addi4spn	x10,x2,320
	la sp, _sp
  a0:	0c44                	c.addi4spn	x9,x2,532
  a2:	0008                	.2byte	0x8
  a4:	c174                	c.sw	x13,68(x10)
  a6:	c844                	c.sw	x9,20(x8)
	sw a0, -8(sp)
  a8:	020c                	c.addi4spn	x11,x2,256
  aa:	4430                	c.lw	x12,72(x8)
	nop
  ac:	000e                	c.slli	x0,0x3
  ae:	0000                	c.unimp
	wfi
  b0:	0020                	c.addi4spn	x8,x2,8
  b2:	0000                	c.unimp
void tj_free(void *mem) {
  b4:	0000                	c.unimp
  b6:	0000                	c.unimp
  b8:	04d4                	c.addi4spn	x13,x2,580
  ba:	0000                	c.unimp
  bc:	0070                	c.addi4spn	x12,x2,12
  be:	0000                	c.unimp
  c0:	0e44                	c.addi4spn	x9,x2,788
  c2:	4420                	c.lw	x8,72(x8)
  c4:	0188                	c.addi4spn	x10,x2,192
  c6:	0c44                	c.addi4spn	x9,x2,532
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	0008                	.2byte	0x8
  ca:	5c02                	c.lwsp	x24,32(x2)
  cc:	0cc8                	c.addi4spn	x10,x2,596
  ce:	2002                	.2byte	0x2002
  d0:	0e44                	c.addi4spn	x9,x2,788
  d2:	0000                	c.unimp
  d4:	0020                	c.addi4spn	x8,x2,8
  d6:	0000                	c.unimp
  d8:	0000                	c.unimp
  da:	0000                	c.unimp
  dc:	0544                	c.addi4spn	x9,x2,644
  de:	0000                	c.unimp
  e0:	0034                	c.addi4spn	x13,x2,8
  e2:	0000                	c.unimp
  e4:	0e44                	c.addi4spn	x9,x2,788
  e6:	4420                	c.lw	x8,72(x8)
		exit(1);
  e8:	0188                	c.addi4spn	x10,x2,192
  ea:	0c44                	c.addi4spn	x9,x2,532
  ec:	0008                	.2byte	0x8
  ee:	c860                	c.sw	x8,84(x8)
  f0:	020c                	c.addi4spn	x11,x2,256
  f2:	4420                	c.lw	x8,72(x8)
	bp = (Header *)mem - 1; //point to block header
  f4:	000e                	c.slli	x0,0x3
  f6:	0000                	c.unimp
  f8:	0028                	c.addi4spn	x10,x2,8
  fa:	0000                	c.unimp
  fc:	0000                	c.unimp
  fe:	0000                	c.unimp
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	0578                	c.addi4spn	x14,x2,652
 102:	0000                	c.unimp
 104:	01b8                	c.addi4spn	x14,x2,200
 106:	0000                	c.unimp
 108:	0e44                	c.addi4spn	x9,x2,788
 10a:	4c40                	c.lw	x8,28(x8)
 10c:	0181                	c.addi	x3,0 # 1fc0 <__global_pointer$>
 10e:	0288                	c.addi4spn	x10,x2,320
		if (p >= p->next && (bp > p || bp < p->next))
 110:	0389                	c.addi	x7,2
 112:	0c44                	c.addi4spn	x9,x2,532
 114:	0008                	.2byte	0x8
 116:	c1019403          	lh	x8,-1008(x3) # 1bd0 <heap+0x3b8>
 11a:	c844                	c.sw	x9,20(x8)
 11c:	020c                	c.addi4spn	x11,x2,256
 11e:	4440                	c.lw	x8,12(x8)
 120:	44c9                	c.li	x9,18
 122:	000e                	c.slli	x0,0x3
 124:	0024                	c.addi4spn	x9,x2,8
 126:	0000                	c.unimp
 128:	0000                	c.unimp
 12a:	0000                	c.unimp
 12c:	0730                	c.addi4spn	x12,x2,904
 12e:	0000                	c.unimp
 130:	0078                	c.addi4spn	x14,x2,12
 132:	0000                	c.unimp
 134:	0e44                	c.addi4spn	x9,x2,788
 136:	4830                	c.lw	x12,80(x8)
 138:	0181                	c.addi	x3,0 # 1fc0 <__global_pointer$>
 13a:	0288                	c.addi4spn	x10,x2,320
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	0c44                	c.addi4spn	x9,x2,532
 13e:	0008                	.2byte	0x8
 140:	5c02                	c.lwsp	x24,32(x2)
 142:	44c1                	c.li	x9,16
 144:	0cc8                	c.addi4spn	x10,x2,596
 146:	3002                	.2byte	0x3002
 148:	0e44                	c.addi4spn	x9,x2,788
 14a:	0000                	c.unimp
 14c:	0024                	c.addi4spn	x9,x2,8
 14e:	0000                	c.unimp
 150:	0000                	c.unimp
 152:	0000                	c.unimp
 154:	07a8                	c.addi4spn	x10,x2,968
 156:	0000                	c.unimp
 158:	00e4                	c.addi4spn	x9,x2,76
 15a:	0000                	c.unimp
 15c:	0e44                	c.addi4spn	x9,x2,788
 15e:	4830                	c.lw	x12,80(x8)
 160:	0181                	c.addi	x3,0 # 1fc0 <__global_pointer$>
 162:	0288                	c.addi4spn	x10,x2,320
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	0c44                	c.addi4spn	x9,x2,532
 166:	0008                	.2byte	0x8
 168:	c802                	c.swsp	x0,16(x2)
 16a:	44c1                	c.li	x9,16
 16c:	0cc8                	c.addi4spn	x10,x2,596
 16e:	3002                	.2byte	0x3002
 170:	0e44                	c.addi4spn	x9,x2,788
 172:	0000                	c.unimp
 174:	0020                	c.addi4spn	x8,x2,8
 176:	0000                	c.unimp
 178:	0000                	c.unimp
 17a:	0000                	c.unimp
 17c:	088c                	c.addi4spn	x11,x2,80
 17e:	0000                	c.unimp
 180:	0084                	c.addi4spn	x9,x2,64
 182:	0000                	c.unimp
		bp->size += p->next->size;
 184:	0e44                	c.addi4spn	x9,x2,788
 186:	4430                	c.lw	x12,72(x8)
 188:	0188                	c.addi4spn	x10,x2,192
 18a:	0c44                	c.addi4spn	x9,x2,532
 18c:	0008                	.2byte	0x8
 18e:	7002                	.2byte	0x7002
 190:	0cc8                	c.addi4spn	x10,x2,596
 192:	3002                	.2byte	0x3002
 194:	0e44                	c.addi4spn	x9,x2,788
 196:	0000                	c.unimp
 198:	0028                	c.addi4spn	x10,x2,8
 19a:	0000                	c.unimp
 19c:	0000                	c.unimp
 19e:	0000                	c.unimp
 1a0:	0910                	c.addi4spn	x12,x2,144
 1a2:	0000                	c.unimp
		bp->next = p->next->next;
 1a4:	0468                	c.addi4spn	x10,x2,524
 1a6:	0000                	c.unimp
 1a8:	0e44                	c.addi4spn	x9,x2,788
 1aa:	4c50                	c.lw	x12,28(x8)
 1ac:	0181                	c.addi	x3,0 # 1fc0 <__global_pointer$>
 1ae:	0288                	c.addi4spn	x10,x2,320
 1b0:	0389                	c.addi	x7,2
 1b2:	0c44                	c.addi4spn	x9,x2,532
 1b4:	0008                	.2byte	0x8
 1b6:	c1044403          	lbu	x8,-1008(x8) # ffff7c10 <_sp+0xfffe7c10>
 1ba:	c844                	c.sw	x9,20(x8)
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	020c                	c.addi4spn	x11,x2,256
 1be:	4450                	c.lw	x12,12(x8)
 1c0:	44c9                	c.li	x9,18
 1c2:	000e                	c.slli	x0,0x3
 1c4:	0020                	c.addi4spn	x8,x2,8
 1c6:	0000                	c.unimp
 1c8:	0000                	c.unimp
 1ca:	0000                	c.unimp
	if (p + p->size == bp) { //join to lower nbr
 1cc:	0d78                	c.addi4spn	x14,x2,668
 1ce:	0000                	c.unimp
 1d0:	03dc                	c.addi4spn	x15,x2,452
 1d2:	0000                	c.unimp
 1d4:	0e44                	c.addi4spn	x9,x2,788
 1d6:	4450                	c.lw	x12,12(x8)
 1d8:	0188                	c.addi4spn	x10,x2,192
 1da:	0c44                	c.addi4spn	x9,x2,532
 1dc:	0008                	.2byte	0x8
 1de:	c803c803          	lbu	x16,-896(x7)
 1e2:	020c                	c.addi4spn	x11,x2,256
 1e4:	4450                	c.lw	x12,12(x8)
 1e6:	000e                	c.slli	x0,0x3
		p->size += bp->size;
 1e8:	0024                	c.addi4spn	x9,x2,8
 1ea:	0000                	c.unimp
 1ec:	0000                	c.unimp
 1ee:	0000                	c.unimp
 1f0:	1154                	c.addi4spn	x13,x2,164
 1f2:	0000                	c.unimp
 1f4:	00e0                	c.addi4spn	x8,x2,76
 1f6:	0000                	c.unimp
 1f8:	0e44                	c.addi4spn	x9,x2,788
 1fa:	4830                	c.lw	x12,80(x8)
 1fc:	0181                	c.addi	x3,0 # 1fc0 <__global_pointer$>
 1fe:	0288                	c.addi4spn	x10,x2,320
 200:	0c44                	c.addi4spn	x9,x2,532
 202:	0008                	.2byte	0x8
		p->next = bp->next;
 204:	c402                	c.swsp	x0,8(x2)
 206:	44c1                	c.li	x9,16
 208:	0cc8                	c.addi4spn	x10,x2,596
 20a:	3002                	.2byte	0x3002
 20c:	0e44                	c.addi4spn	x9,x2,788
 20e:	0000                	c.unimp
 210:	0024                	c.addi4spn	x9,x2,8
 212:	0000                	c.unimp
 214:	0000                	c.unimp
 216:	0000                	c.unimp
		p->next = bp; //again, if the free list is just the base
 218:	1234                	c.addi4spn	x13,x2,296
 21a:	0000                	c.unimp
 21c:	014c                	c.addi4spn	x11,x2,132
 21e:	0000                	c.unimp
 220:	0e44                	c.addi4spn	x9,x2,788
 222:	4840                	c.lw	x8,20(x8)
	freep = p;
 224:	0181                	c.addi	x3,0 # 1fc0 <__global_pointer$>
 226:	0288                	c.addi4spn	x10,x2,320
 228:	0c44                	c.addi4spn	x9,x2,532
 22a:	0008                	.2byte	0x8
 22c:	c1013003          	.4byte	0xc1013003
}
 230:	c844                	c.sw	x9,20(x8)
 232:	020c                	c.addi4spn	x11,x2,256
 234:	4440                	c.lw	x8,12(x8)
 236:	000e                	c.slli	x0,0x3
 238:	0020                	c.addi4spn	x8,x2,8
 23a:	0000                	c.unimp
 23c:	0000                	c.unimp
 23e:	0000                	c.unimp
 240:	1380                	c.addi4spn	x8,x2,480
 242:	0000                	c.unimp
static Header* getmoremem(unsigned int total_size) {
 244:	0104                	c.addi4spn	x9,x2,128
 246:	0000                	c.unimp
 248:	0e44                	c.addi4spn	x9,x2,788
 24a:	4430                	c.lw	x12,72(x8)
 24c:	0188                	c.addi4spn	x10,x2,192
 24e:	0c44                	c.addi4spn	x9,x2,532
 250:	0008                	.2byte	0x8
 252:	f002                	.2byte	0xf002
 254:	0cc8                	c.addi4spn	x10,x2,596
 256:	3002                	.2byte	0x3002
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 258:	0e44                	c.addi4spn	x9,x2,788
 25a:	0000                	c.unimp
 25c:	0028                	c.addi4spn	x10,x2,8
 25e:	0000                	c.unimp
 260:	0000                	c.unimp
 262:	0000                	c.unimp
 264:	1484                	c.addi4spn	x9,x2,608
 266:	0000                	c.unimp
 268:	0258                	c.addi4spn	x14,x2,260
 26a:	0000                	c.unimp
 26c:	0e44                	c.addi4spn	x9,x2,788
 26e:	0ff0                	c.addi4spn	x12,x2,988
	Header* up = (Header *)next_index;
 270:	8148                	.2byte	0x8148
 272:	8801                	c.andi	x8,0
 274:	4402                	c.lwsp	x8,0(x2)
 276:	080c                	c.addi4spn	x11,x2,16
 278:	0300                	c.addi4spn	x8,x2,384
 27a:	0238                	c.addi4spn	x14,x2,264
	next_index += total_size; //allocate the block
 27c:	020c                	c.addi4spn	x11,x2,256
 27e:	0ff0                	c.addi4spn	x12,x2,988
 280:	c144                	c.sw	x9,4(x10)
 282:	c844                	c.sw	x9,20(x8)
 284:	0e44                	c.addi4spn	x9,x2,788
	...
