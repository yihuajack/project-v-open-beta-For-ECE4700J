
program.debug_bfs.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <crt>:

.global crt
.section .text.prologue, "ax"
.align 4
crt:
	nop
   0:	00000013          	addi	zero,zero,0
	la ra, exit
   4:	00000097          	auipc	ra,0x0
   8:	09c08093          	addi	ra,ra,156 # a0 <exit>
	la sp, _sp
   c:	00010117          	auipc	sp,0x10
  10:	ff410113          	addi	sp,sp,-12 # 10000 <_sp>
	mv s0, sp
  14:	00010413          	addi	s0,sp,0
	la gp, __global_pointer$
  18:	00001197          	auipc	gp,0x1
  1c:	26818193          	addi	gp,gp,616 # 1280 <__global_pointer$>
	li tp, 0
  20:	00000213          	addi	tp,zero,0
	li t0, 0
  24:	00000293          	addi	t0,zero,0
	li t1, 0
  28:	00000313          	addi	t1,zero,0
	li t2, 0
  2c:	00000393          	addi	t2,zero,0
	li s1, 0
  30:	00000493          	addi	s1,zero,0
	li a0, 0
  34:	00000513          	addi	a0,zero,0
	li a1, 0
  38:	00000593          	addi	a1,zero,0
	li a2, 0
  3c:	00000613          	addi	a2,zero,0
	li a3, 0
  40:	00000693          	addi	a3,zero,0
	li a4, 0
  44:	00000713          	addi	a4,zero,0
	li a5, 0
  48:	00000793          	addi	a5,zero,0
	li a6, 0
  4c:	00000813          	addi	a6,zero,0
	li a7, 0
  50:	00000893          	addi	a7,zero,0
	li s2, 0
  54:	00000913          	addi	s2,zero,0
	li s3, 0
  58:	00000993          	addi	s3,zero,0
	li s4, 0
  5c:	00000a13          	addi	s4,zero,0
	li s5, 0
  60:	00000a93          	addi	s5,zero,0
	li s6, 0
  64:	00000b13          	addi	s6,zero,0
	li s7, 0
  68:	00000b93          	addi	s7,zero,0
	li s8, 0
  6c:	00000c13          	addi	s8,zero,0
	li s9, 0
  70:	00000c93          	addi	s9,zero,0
	li s10, 0
  74:	00000d13          	addi	s10,zero,0
	li s11, 0
  78:	00000d93          	addi	s11,zero,0
	li t3, 0
  7c:	00000e13          	addi	t3,zero,0
	li t4, 0
  80:	00000e93          	addi	t4,zero,0
	li t5, 0
  84:	00000f13          	addi	t5,zero,0
	li t6, 0
  88:	00000f93          	addi	t6,zero,0
	j main
  8c:	7dc0006f          	jal	zero,868 <main>
	...

000000a0 <exit>:

.global exit
.section .text
.align 4
exit:
	la sp, _sp
  a0:	00010117          	auipc	sp,0x10
  a4:	f6010113          	addi	sp,sp,-160 # 10000 <_sp>
	sw a0, -8(sp)
  a8:	fea12c23          	sw	a0,-8(sp)
	nop
  ac:	00000013          	addi	zero,zero,0
	wfi
  b0:	10500073          	wfi

000000b4 <tj_free>:
} Header;
static Header base; //empty list to get started
static Header *freep = NULL; //start of the free list


void tj_free(void *mem) {
  b4:	fd010113          	addi	sp,sp,-48
  b8:	02112623          	sw	ra,44(sp)
  bc:	02812423          	sw	s0,40(sp)
  c0:	03010413          	addi	s0,sp,48
  c4:	fca42e23          	sw	a0,-36(s0)
	//sanity check, we don't want to free memory that's not
	//in the heap
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	fdc42703          	lw	a4,-36(s0)
  cc:	000017b7          	lui	a5,0x1
  d0:	b5878793          	addi	a5,a5,-1192 # b58 <heap>
  d4:	00f76a63          	bltu	a4,a5,e8 <tj_free+0x34>
  d8:	000057b7          	lui	a5,0x5
  dc:	b5878793          	addi	a5,a5,-1192 # 4b58 <base>
  e0:	fdc42703          	lw	a4,-36(s0)
  e4:	00e7f863          	bgeu	a5,a4,f4 <tj_free+0x40>
		exit(1);
  e8:	00100513          	addi	a0,zero,1
  ec:	00000097          	auipc	ra,0x0
  f0:	fb4080e7          	jalr	ra,-76(ra) # a0 <exit>

	Header *bp, *p;
	bp = (Header *)mem - 1; //point to block header
  f4:	fdc42783          	lw	a5,-36(s0)
  f8:	ff878793          	addi	a5,a5,-8
  fc:	fef42423          	sw	a5,-24(s0)
	//scan the free list to see where the current block should sit in between
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	000057b7          	lui	a5,0x5
 104:	b607a783          	lw	a5,-1184(a5) # 4b60 <freep>
 108:	fef42623          	sw	a5,-20(s0)
 10c:	03c0006f          	jal	zero,148 <tj_free+0x94>
		// self wrapped free list with only one entry
		//                  or you are just at the very beginning/end
		if (p >= p->next && (bp > p || bp < p->next))
 110:	fec42783          	lw	a5,-20(s0)
 114:	0007a783          	lw	a5,0(a5)
 118:	fec42703          	lw	a4,-20(s0)
 11c:	02f76063          	bltu	a4,a5,13c <tj_free+0x88>
 120:	fe842703          	lw	a4,-24(s0)
 124:	fec42783          	lw	a5,-20(s0)
 128:	02e7ee63          	bltu	a5,a4,164 <tj_free+0xb0>
 12c:	fec42783          	lw	a5,-20(s0)
 130:	0007a783          	lw	a5,0(a5)
 134:	fe842703          	lw	a4,-24(s0)
 138:	02f76663          	bltu	a4,a5,164 <tj_free+0xb0>
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	fec42783          	lw	a5,-20(s0)
 140:	0007a783          	lw	a5,0(a5)
 144:	fef42623          	sw	a5,-20(s0)
 148:	fe842703          	lw	a4,-24(s0)
 14c:	fec42783          	lw	a5,-20(s0)
 150:	fce7f0e3          	bgeu	a5,a4,110 <tj_free+0x5c>
 154:	fec42783          	lw	a5,-20(s0)
 158:	0007a783          	lw	a5,0(a5)
 15c:	fe842703          	lw	a4,-24(s0)
 160:	faf778e3          	bgeu	a4,a5,110 <tj_free+0x5c>
			break; //freed block at start of end of the arena
		//we can merge the 2 free blocks if they are adjacent to each other
		//or we just can append a new entry into the free list
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	fe842783          	lw	a5,-24(s0)
 168:	0047a783          	lw	a5,4(a5)
 16c:	00379793          	slli	a5,a5,0x3
 170:	fe842703          	lw	a4,-24(s0)
 174:	00f70733          	add	a4,a4,a5
 178:	fec42783          	lw	a5,-20(s0)
 17c:	0007a783          	lw	a5,0(a5)
 180:	02f71e63          	bne	a4,a5,1bc <tj_free+0x108>
		//merge if exactly adjacent
		bp->size += p->next->size;
 184:	fe842783          	lw	a5,-24(s0)
 188:	0047a703          	lw	a4,4(a5)
 18c:	fec42783          	lw	a5,-20(s0)
 190:	0007a783          	lw	a5,0(a5)
 194:	0047a783          	lw	a5,4(a5)
 198:	00f70733          	add	a4,a4,a5
 19c:	fe842783          	lw	a5,-24(s0)
 1a0:	00e7a223          	sw	a4,4(a5)
		bp->next = p->next->next;
 1a4:	fec42783          	lw	a5,-20(s0)
 1a8:	0007a783          	lw	a5,0(a5)
 1ac:	0007a703          	lw	a4,0(a5)
 1b0:	fe842783          	lw	a5,-24(s0)
 1b4:	00e7a023          	sw	a4,0(a5)
 1b8:	0140006f          	jal	zero,1cc <tj_free+0x118>
	} else
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	fec42783          	lw	a5,-20(s0)
 1c0:	0007a703          	lw	a4,0(a5)
 1c4:	fe842783          	lw	a5,-24(s0)
 1c8:	00e7a023          	sw	a4,0(a5)
		//if p is freep which is base, then this will make the newly
		//allocated block point to base

	if (p + p->size == bp) { //join to lower nbr
 1cc:	fec42783          	lw	a5,-20(s0)
 1d0:	0047a783          	lw	a5,4(a5)
 1d4:	00379793          	slli	a5,a5,0x3
 1d8:	fec42703          	lw	a4,-20(s0)
 1dc:	00f707b3          	add	a5,a4,a5
 1e0:	fe842703          	lw	a4,-24(s0)
 1e4:	02f71a63          	bne	a4,a5,218 <tj_free+0x164>
		//merge if exactly adjacent
		p->size += bp->size;
 1e8:	fec42783          	lw	a5,-20(s0)
 1ec:	0047a703          	lw	a4,4(a5)
 1f0:	fe842783          	lw	a5,-24(s0)
 1f4:	0047a783          	lw	a5,4(a5)
 1f8:	00f70733          	add	a4,a4,a5
 1fc:	fec42783          	lw	a5,-20(s0)
 200:	00e7a223          	sw	a4,4(a5)
		p->next = bp->next;
 204:	fe842783          	lw	a5,-24(s0)
 208:	0007a703          	lw	a4,0(a5)
 20c:	fec42783          	lw	a5,-20(s0)
 210:	00e7a023          	sw	a4,0(a5)
 214:	0100006f          	jal	zero,224 <tj_free+0x170>
	} else //or just append to linked list
		p->next = bp; //again, if the free list is just the base
 218:	fec42783          	lw	a5,-20(s0)
 21c:	fe842703          	lw	a4,-24(s0)
 220:	00e7a023          	sw	a4,0(a5)
		//then effectively we just created a new entry
		//and make it point to the base which has a size of 0
	freep = p;
 224:	000057b7          	lui	a5,0x5
 228:	fec42703          	lw	a4,-20(s0)
 22c:	b6e7a023          	sw	a4,-1184(a5) # 4b60 <freep>
}
 230:	00000013          	addi	zero,zero,0
 234:	02c12083          	lw	ra,44(sp)
 238:	02812403          	lw	s0,40(sp)
 23c:	03010113          	addi	sp,sp,48
 240:	00008067          	jalr	zero,0(ra)

00000244 <getmoremem>:

static Header* getmoremem(unsigned int total_size) {
 244:	fd010113          	addi	sp,sp,-48
 248:	02112623          	sw	ra,44(sp)
 24c:	02812423          	sw	s0,40(sp)
 250:	03010413          	addi	s0,sp,48
 254:	fca42e23          	sw	a0,-36(s0)
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 258:	000017b7          	lui	a5,0x1
 25c:	aa47a783          	lw	a5,-1372(a5) # aa4 <avail_mem>
 260:	fdc42703          	lw	a4,-36(s0)
 264:	00e7f663          	bgeu	a5,a4,270 <getmoremem+0x2c>
 268:	00000793          	addi	a5,zero,0
 26c:	0700006f          	jal	zero,2dc <getmoremem+0x98>
	Header* up = (Header *)next_index;
 270:	000017b7          	lui	a5,0x1
 274:	aa07a783          	lw	a5,-1376(a5) # aa0 <next_index>
 278:	fef42623          	sw	a5,-20(s0)
	next_index += total_size; //allocate the block
 27c:	000017b7          	lui	a5,0x1
 280:	aa07a703          	lw	a4,-1376(a5) # aa0 <next_index>
 284:	fdc42783          	lw	a5,-36(s0)
 288:	00f70733          	add	a4,a4,a5
 28c:	000017b7          	lui	a5,0x1
 290:	aae7a023          	sw	a4,-1376(a5) # aa0 <next_index>
	avail_mem -= total_size; //deduct from avail mem;
 294:	000017b7          	lui	a5,0x1
 298:	aa47a703          	lw	a4,-1372(a5) # aa4 <avail_mem>
 29c:	fdc42783          	lw	a5,-36(s0)
 2a0:	40f70733          	sub	a4,a4,a5
 2a4:	000017b7          	lui	a5,0x1
 2a8:	aae7a223          	sw	a4,-1372(a5) # aa4 <avail_mem>
	up->size = total_size - sizeof(Header); //set the size right
 2ac:	fdc42783          	lw	a5,-36(s0)
 2b0:	ff878713          	addi	a4,a5,-8
 2b4:	fec42783          	lw	a5,-20(s0)
 2b8:	00e7a223          	sw	a4,4(a5)
	tj_free((void *)(++up)); //append the new block to the free list first
 2bc:	fec42783          	lw	a5,-20(s0)
 2c0:	00878793          	addi	a5,a5,8
 2c4:	fef42623          	sw	a5,-20(s0)
 2c8:	fec42503          	lw	a0,-20(s0)
 2cc:	00000097          	auipc	ra,0x0
 2d0:	de8080e7          	jalr	ra,-536(ra) # b4 <tj_free>
	return freep;
 2d4:	000057b7          	lui	a5,0x5
 2d8:	b607a783          	lw	a5,-1184(a5) # 4b60 <freep>
}
 2dc:	00078513          	addi	a0,a5,0
 2e0:	02c12083          	lw	ra,44(sp)
 2e4:	02812403          	lw	s0,40(sp)
 2e8:	03010113          	addi	sp,sp,48
 2ec:	00008067          	jalr	zero,0(ra)

000002f0 <tj_malloc>:

void *tj_malloc(unsigned int size) {
 2f0:	fd010113          	addi	sp,sp,-48
 2f4:	02112623          	sw	ra,44(sp)
 2f8:	02812423          	sw	s0,40(sp)
 2fc:	03010413          	addi	s0,sp,48
 300:	fca42e23          	sw	a0,-36(s0)
	//sanity check, so that you don't blow the memory space
	if (size > sizeof(heap)) return NULL;
 304:	fdc42703          	lw	a4,-36(s0)
 308:	000047b7          	lui	a5,0x4
 30c:	00e7f663          	bgeu	a5,a4,318 <tj_malloc+0x28>
 310:	00000793          	addi	a5,zero,0
 314:	15c0006f          	jal	zero,470 <tj_malloc+0x180>
	//we want strict word alignment just to make things easier
	//and so that we don't have improper alignment issues
	if ((size & 3) != 0) {
 318:	fdc42783          	lw	a5,-36(s0)
 31c:	0037f793          	andi	a5,a5,3
 320:	00078a63          	beq	a5,zero,334 <tj_malloc+0x44>
		size = size + 4 - (size & 3);
 324:	fdc42783          	lw	a5,-36(s0)
 328:	ffc7f793          	andi	a5,a5,-4
 32c:	00478793          	addi	a5,a5,4 # 4004 <__global_pointer$+0x2d84>
 330:	fcf42e23          	sw	a5,-36(s0)
	}

	//we want to build a linked list of the existing blocks and free blocks
	Header *p, *prevp; //iterators
	
	unsigned int total_size = size + sizeof(Header); //need to include the header size as well
 334:	fdc42783          	lw	a5,-36(s0)
 338:	00878793          	addi	a5,a5,8
 33c:	fef42223          	sw	a5,-28(s0)
	//check the linked list
	prevp = freep;
 340:	000057b7          	lui	a5,0x5
 344:	b607a783          	lw	a5,-1184(a5) # 4b60 <freep>
 348:	fef42423          	sw	a5,-24(s0)
	//if there's no linked list yet
	if (prevp == NULL) {
 34c:	fe842783          	lw	a5,-24(s0)
 350:	02079e63          	bne	a5,zero,38c <tj_malloc+0x9c>
		prevp = &base;
 354:	000057b7          	lui	a5,0x5
 358:	b5878793          	addi	a5,a5,-1192 # 4b58 <base>
 35c:	fef42423          	sw	a5,-24(s0)
		freep = prevp;
 360:	000057b7          	lui	a5,0x5
 364:	fe842703          	lw	a4,-24(s0)
 368:	b6e7a023          	sw	a4,-1184(a5) # 4b60 <freep>
		base.next = freep;
 36c:	000057b7          	lui	a5,0x5
 370:	b607a703          	lw	a4,-1184(a5) # 4b60 <freep>
 374:	000057b7          	lui	a5,0x5
 378:	b5878793          	addi	a5,a5,-1192 # 4b58 <base>
 37c:	00e7a023          	sw	a4,0(a5)
		base.size = 0;
 380:	000057b7          	lui	a5,0x5
 384:	b5878793          	addi	a5,a5,-1192 # 4b58 <base>
 388:	0007a223          	sw	zero,4(a5)
	}
	//traverse through the linked list, note there's no stopping condition
	for (p = prevp->next; ;prevp = p, p = p->next) {
 38c:	fe842783          	lw	a5,-24(s0)
 390:	0007a783          	lw	a5,0(a5)
 394:	fef42623          	sw	a5,-20(s0)
		if (p->size >= size) { //big enough
 398:	fec42783          	lw	a5,-20(s0)
 39c:	0047a783          	lw	a5,4(a5)
 3a0:	fdc42703          	lw	a4,-36(s0)
 3a4:	08e7e263          	bltu	a5,a4,428 <tj_malloc+0x138>
			if (p->size == size) // exact size
 3a8:	fec42783          	lw	a5,-20(s0)
 3ac:	0047a783          	lw	a5,4(a5)
 3b0:	fdc42703          	lw	a4,-36(s0)
 3b4:	00f71c63          	bne	a4,a5,3cc <tj_malloc+0xdc>
				prevp->next = p->next; // just return that block
 3b8:	fec42783          	lw	a5,-20(s0)
 3bc:	0007a703          	lw	a4,0(a5)
 3c0:	fe842783          	lw	a5,-24(s0)
 3c4:	00e7a023          	sw	a4,0(a5)
 3c8:	0400006f          	jal	zero,408 <tj_malloc+0x118>
			else {
				p->size -= total_size; //break up the block
 3cc:	fec42783          	lw	a5,-20(s0)
 3d0:	0047a703          	lw	a4,4(a5)
 3d4:	fe442783          	lw	a5,-28(s0)
 3d8:	40f70733          	sub	a4,a4,a5
 3dc:	fec42783          	lw	a5,-20(s0)
 3e0:	00e7a223          	sw	a4,4(a5)
				p += p->size;
 3e4:	fec42783          	lw	a5,-20(s0)
 3e8:	0047a783          	lw	a5,4(a5)
 3ec:	00379793          	slli	a5,a5,0x3
 3f0:	fec42703          	lw	a4,-20(s0)
 3f4:	00f707b3          	add	a5,a4,a5
 3f8:	fef42623          	sw	a5,-20(s0)
				p->size = size;
 3fc:	fec42783          	lw	a5,-20(s0)
 400:	fdc42703          	lw	a4,-36(s0)
 404:	00e7a223          	sw	a4,4(a5)
			}
			freep = prevp;
 408:	000057b7          	lui	a5,0x5
 40c:	fe842703          	lw	a4,-24(s0)
 410:	b6e7a023          	sw	a4,-1184(a5) # 4b60 <freep>
#ifdef DEBUG
			printf("returned pointer is %i\n", (int)p + 1);
#endif
			return (void *)(++p);
 414:	fec42783          	lw	a5,-20(s0)
 418:	00878793          	addi	a5,a5,8
 41c:	fef42623          	sw	a5,-20(s0)
 420:	fec42783          	lw	a5,-20(s0)
 424:	04c0006f          	jal	zero,470 <tj_malloc+0x180>
		}
		if (p == freep) //wrapped around free list
 428:	000057b7          	lui	a5,0x5
 42c:	b607a783          	lw	a5,-1184(a5) # 4b60 <freep>
 430:	fec42703          	lw	a4,-20(s0)
 434:	02f71263          	bne	a4,a5,458 <tj_malloc+0x168>
			if ((p = getmoremem(total_size)) == NULL) //if the heap runs out
 438:	fe442503          	lw	a0,-28(s0)
 43c:	00000097          	auipc	ra,0x0
 440:	e08080e7          	jalr	ra,-504(ra) # 244 <getmoremem>
 444:	fea42623          	sw	a0,-20(s0)
 448:	fec42783          	lw	a5,-20(s0)
 44c:	00079663          	bne	a5,zero,458 <tj_malloc+0x168>
				return NULL; //well, you got nothing left, gg
 450:	00000793          	addi	a5,zero,0
 454:	01c0006f          	jal	zero,470 <tj_malloc+0x180>
	for (p = prevp->next; ;prevp = p, p = p->next) {
 458:	fec42783          	lw	a5,-20(s0)
 45c:	fef42423          	sw	a5,-24(s0)
 460:	fec42783          	lw	a5,-20(s0)
 464:	0007a783          	lw	a5,0(a5)
 468:	fef42623          	sw	a5,-20(s0)
		if (p->size >= size) { //big enough
 46c:	f2dff06f          	jal	zero,398 <tj_malloc+0xa8>
	}
}
 470:	00078513          	addi	a0,a5,0
 474:	02c12083          	lw	ra,44(sp)
 478:	02812403          	lw	s0,40(sp)
 47c:	03010113          	addi	sp,sp,48
 480:	00008067          	jalr	zero,0(ra)

00000484 <tj_calloc>:

void *tj_calloc(unsigned int size) {
 484:	fd010113          	addi	sp,sp,-48
 488:	02112623          	sw	ra,44(sp)
 48c:	02812423          	sw	s0,40(sp)
 490:	03010413          	addi	s0,sp,48
 494:	fca42e23          	sw	a0,-36(s0)
	void *mem = tj_malloc(size);
 498:	fdc42503          	lw	a0,-36(s0)
 49c:	00000097          	auipc	ra,0x0
 4a0:	e54080e7          	jalr	ra,-428(ra) # 2f0 <tj_malloc>
 4a4:	fea42623          	sw	a0,-20(s0)
	memset(mem, 0, size);
 4a8:	fdc42603          	lw	a2,-36(s0)
 4ac:	00000593          	addi	a1,zero,0
 4b0:	fec42503          	lw	a0,-20(s0)
 4b4:	00000097          	auipc	ra,0x0
 4b8:	4ec080e7          	jalr	ra,1260(ra) # 9a0 <memset>
	return mem;
 4bc:	fec42783          	lw	a5,-20(s0)
}
 4c0:	00078513          	addi	a0,a5,0
 4c4:	02c12083          	lw	ra,44(sp)
 4c8:	02812403          	lw	s0,40(sp)
 4cc:	03010113          	addi	sp,sp,48
 4d0:	00008067          	jalr	zero,0(ra)

000004d4 <insert>:
//vertex count
int vertexCount = 0;

//queue functions

void insert(int data) {
 4d4:	fe010113          	addi	sp,sp,-32
 4d8:	00812e23          	sw	s0,28(sp)
 4dc:	02010413          	addi	s0,sp,32
 4e0:	fea42623          	sw	a0,-20(s0)
   queue[++rear] = data;
 4e4:	000017b7          	lui	a5,0x1
 4e8:	aa87a783          	lw	a5,-1368(a5) # aa8 <rear>
 4ec:	00178713          	addi	a4,a5,1
 4f0:	000017b7          	lui	a5,0x1
 4f4:	aae7a423          	sw	a4,-1368(a5) # aa8 <rear>
 4f8:	000017b7          	lui	a5,0x1
 4fc:	aa87a783          	lw	a5,-1368(a5) # aa8 <rear>
 500:	00001737          	lui	a4,0x1
 504:	acc70713          	addi	a4,a4,-1332 # acc <queue>
 508:	00279793          	slli	a5,a5,0x2
 50c:	00f707b3          	add	a5,a4,a5
 510:	fec42703          	lw	a4,-20(s0)
 514:	00e7a023          	sw	a4,0(a5)
   queueItemCount++;
 518:	000017b7          	lui	a5,0x1
 51c:	ac47a783          	lw	a5,-1340(a5) # ac4 <queueItemCount>
 520:	00178713          	addi	a4,a5,1
 524:	000017b7          	lui	a5,0x1
 528:	ace7a223          	sw	a4,-1340(a5) # ac4 <queueItemCount>
}
 52c:	00000013          	addi	zero,zero,0
 530:	01c12403          	lw	s0,28(sp)
 534:	02010113          	addi	sp,sp,32
 538:	00008067          	jalr	zero,0(ra)

0000053c <removeData>:

int removeData() {
 53c:	ff010113          	addi	sp,sp,-16
 540:	00812623          	sw	s0,12(sp)
 544:	01010413          	addi	s0,sp,16
   queueItemCount--;
 548:	000017b7          	lui	a5,0x1
 54c:	ac47a783          	lw	a5,-1340(a5) # ac4 <queueItemCount>
 550:	fff78713          	addi	a4,a5,-1
 554:	000017b7          	lui	a5,0x1
 558:	ace7a223          	sw	a4,-1340(a5) # ac4 <queueItemCount>
   return queue[front++]; 
 55c:	000017b7          	lui	a5,0x1
 560:	ac07a783          	lw	a5,-1344(a5) # ac0 <front>
 564:	00178693          	addi	a3,a5,1
 568:	00001737          	lui	a4,0x1
 56c:	acd72023          	sw	a3,-1344(a4) # ac0 <front>
 570:	00001737          	lui	a4,0x1
 574:	acc70713          	addi	a4,a4,-1332 # acc <queue>
 578:	00279793          	slli	a5,a5,0x2
 57c:	00f707b3          	add	a5,a4,a5
 580:	0007a783          	lw	a5,0(a5)
}
 584:	00078513          	addi	a0,a5,0
 588:	00c12403          	lw	s0,12(sp)
 58c:	01010113          	addi	sp,sp,16
 590:	00008067          	jalr	zero,0(ra)

00000594 <isQueueEmpty>:

bool isQueueEmpty() {
 594:	ff010113          	addi	sp,sp,-16
 598:	00812623          	sw	s0,12(sp)
 59c:	01010413          	addi	s0,sp,16
   return queueItemCount == 0;
 5a0:	000017b7          	lui	a5,0x1
 5a4:	ac47a783          	lw	a5,-1340(a5) # ac4 <queueItemCount>
 5a8:	0017b793          	sltiu	a5,a5,1
 5ac:	0ff7f793          	andi	a5,a5,255
}
 5b0:	00078513          	addi	a0,a5,0
 5b4:	00c12403          	lw	s0,12(sp)
 5b8:	01010113          	addi	sp,sp,16
 5bc:	00008067          	jalr	zero,0(ra)

000005c0 <addVertex>:

//graph functions

//add vertex to the vertex list
void addVertex(char label) {
 5c0:	fd010113          	addi	sp,sp,-48
 5c4:	02112623          	sw	ra,44(sp)
 5c8:	02812423          	sw	s0,40(sp)
 5cc:	03010413          	addi	s0,sp,48
 5d0:	00050793          	addi	a5,a0,0
 5d4:	fcf40fa3          	sb	a5,-33(s0)
   struct Vertex* vertex = (struct Vertex*) tj_malloc(sizeof(struct Vertex));
 5d8:	00200513          	addi	a0,zero,2
 5dc:	00000097          	auipc	ra,0x0
 5e0:	d14080e7          	jalr	ra,-748(ra) # 2f0 <tj_malloc>
 5e4:	fea42623          	sw	a0,-20(s0)
   vertex->label = label;  
 5e8:	fec42783          	lw	a5,-20(s0)
 5ec:	fdf44703          	lbu	a4,-33(s0)
 5f0:	00e78023          	sb	a4,0(a5)
   vertex->visited = false;     
 5f4:	fec42783          	lw	a5,-20(s0)
 5f8:	000780a3          	sb	zero,1(a5)
   lstVertices[vertexCount++] = vertex;
 5fc:	000017b7          	lui	a5,0x1
 600:	ac87a783          	lw	a5,-1336(a5) # ac8 <vertexCount>
 604:	00178693          	addi	a3,a5,1
 608:	00001737          	lui	a4,0x1
 60c:	acd72423          	sw	a3,-1336(a4) # ac8 <vertexCount>
 610:	00001737          	lui	a4,0x1
 614:	ae070713          	addi	a4,a4,-1312 # ae0 <lstVertices>
 618:	00279793          	slli	a5,a5,0x2
 61c:	00f707b3          	add	a5,a4,a5
 620:	fec42703          	lw	a4,-20(s0)
 624:	00e7a023          	sw	a4,0(a5)
}
 628:	00000013          	addi	zero,zero,0
 62c:	02c12083          	lw	ra,44(sp)
 630:	02812403          	lw	s0,40(sp)
 634:	03010113          	addi	sp,sp,48
 638:	00008067          	jalr	zero,0(ra)

0000063c <addEdge>:

//add edge to edge array
void addEdge(int start,int end) {
 63c:	fe010113          	addi	sp,sp,-32
 640:	00812e23          	sw	s0,28(sp)
 644:	02010413          	addi	s0,sp,32
 648:	fea42623          	sw	a0,-20(s0)
 64c:	feb42423          	sw	a1,-24(s0)
   adjMatrix[start][end] = 1;
 650:	000017b7          	lui	a5,0x1
 654:	af478693          	addi	a3,a5,-1292 # af4 <adjMatrix>
 658:	fec42703          	lw	a4,-20(s0)
 65c:	00070793          	addi	a5,a4,0
 660:	00279793          	slli	a5,a5,0x2
 664:	00e787b3          	add	a5,a5,a4
 668:	fe842703          	lw	a4,-24(s0)
 66c:	00e787b3          	add	a5,a5,a4
 670:	00279793          	slli	a5,a5,0x2
 674:	00f687b3          	add	a5,a3,a5
 678:	00100713          	addi	a4,zero,1
 67c:	00e7a023          	sw	a4,0(a5)
   adjMatrix[end][start] = 1;
 680:	000017b7          	lui	a5,0x1
 684:	af478693          	addi	a3,a5,-1292 # af4 <adjMatrix>
 688:	fe842703          	lw	a4,-24(s0)
 68c:	00070793          	addi	a5,a4,0
 690:	00279793          	slli	a5,a5,0x2
 694:	00e787b3          	add	a5,a5,a4
 698:	fec42703          	lw	a4,-20(s0)
 69c:	00e787b3          	add	a5,a5,a4
 6a0:	00279793          	slli	a5,a5,0x2
 6a4:	00f687b3          	add	a5,a3,a5
 6a8:	00100713          	addi	a4,zero,1
 6ac:	00e7a023          	sw	a4,0(a5)
}
 6b0:	00000013          	addi	zero,zero,0
 6b4:	01c12403          	lw	s0,28(sp)
 6b8:	02010113          	addi	sp,sp,32
 6bc:	00008067          	jalr	zero,0(ra)

000006c0 <getAdjUnvisitedVertex>:

//get the adjacent unvisited vertex
int getAdjUnvisitedVertex(int vertexIndex) {
 6c0:	fd010113          	addi	sp,sp,-48
 6c4:	02812623          	sw	s0,44(sp)
 6c8:	03010413          	addi	s0,sp,48
 6cc:	fca42e23          	sw	a0,-36(s0)
   int i;
    
   for(i = 0; i<vertexCount; i++) {
 6d0:	fe042623          	sw	zero,-20(s0)
 6d4:	0740006f          	jal	zero,748 <getAdjUnvisitedVertex+0x88>
      if(adjMatrix[vertexIndex][i] == 1 && lstVertices[i]->visited == false)
 6d8:	000017b7          	lui	a5,0x1
 6dc:	af478693          	addi	a3,a5,-1292 # af4 <adjMatrix>
 6e0:	fdc42703          	lw	a4,-36(s0)
 6e4:	00070793          	addi	a5,a4,0
 6e8:	00279793          	slli	a5,a5,0x2
 6ec:	00e787b3          	add	a5,a5,a4
 6f0:	fec42703          	lw	a4,-20(s0)
 6f4:	00e787b3          	add	a5,a5,a4
 6f8:	00279793          	slli	a5,a5,0x2
 6fc:	00f687b3          	add	a5,a3,a5
 700:	0007a703          	lw	a4,0(a5)
 704:	00100793          	addi	a5,zero,1
 708:	02f71a63          	bne	a4,a5,73c <getAdjUnvisitedVertex+0x7c>
 70c:	000017b7          	lui	a5,0x1
 710:	ae078713          	addi	a4,a5,-1312 # ae0 <lstVertices>
 714:	fec42783          	lw	a5,-20(s0)
 718:	00279793          	slli	a5,a5,0x2
 71c:	00f707b3          	add	a5,a4,a5
 720:	0007a783          	lw	a5,0(a5)
 724:	0017c783          	lbu	a5,1(a5)
 728:	0017c793          	xori	a5,a5,1
 72c:	0ff7f793          	andi	a5,a5,255
 730:	00078663          	beq	a5,zero,73c <getAdjUnvisitedVertex+0x7c>
         return i;
 734:	fec42783          	lw	a5,-20(s0)
 738:	0240006f          	jal	zero,75c <getAdjUnvisitedVertex+0x9c>
   for(i = 0; i<vertexCount; i++) {
 73c:	fec42783          	lw	a5,-20(s0)
 740:	00178793          	addi	a5,a5,1
 744:	fef42623          	sw	a5,-20(s0)
 748:	000017b7          	lui	a5,0x1
 74c:	ac87a783          	lw	a5,-1336(a5) # ac8 <vertexCount>
 750:	fec42703          	lw	a4,-20(s0)
 754:	f8f742e3          	blt	a4,a5,6d8 <getAdjUnvisitedVertex+0x18>
   }
    
   return -1;
 758:	fff00793          	addi	a5,zero,-1
}
 75c:	00078513          	addi	a0,a5,0
 760:	02c12403          	lw	s0,44(sp)
 764:	03010113          	addi	sp,sp,48
 768:	00008067          	jalr	zero,0(ra)

0000076c <breadthFirstSearch>:

void breadthFirstSearch() {
 76c:	fe010113          	addi	sp,sp,-32
 770:	00112e23          	sw	ra,28(sp)
 774:	00812c23          	sw	s0,24(sp)
 778:	02010413          	addi	s0,sp,32
   int i;

   //mark first node as visited
   lstVertices[0]->visited = true;
 77c:	000017b7          	lui	a5,0x1
 780:	ae078793          	addi	a5,a5,-1312 # ae0 <lstVertices>
 784:	0007a783          	lw	a5,0(a5)
 788:	00100713          	addi	a4,zero,1
 78c:	00e780a3          	sb	a4,1(a5)

   //insert vertex index in queue
   insert(0);
 790:	00000513          	addi	a0,zero,0
 794:	00000097          	auipc	ra,0x0
 798:	d40080e7          	jalr	ra,-704(ra) # 4d4 <insert>
   int unvisitedVertex;

   while(!isQueueEmpty()) {
 79c:	05c0006f          	jal	zero,7f8 <breadthFirstSearch+0x8c>
      //get the unvisited vertex of vertex which is at front of the queue
      int tempVertex = removeData();   
 7a0:	00000097          	auipc	ra,0x0
 7a4:	d9c080e7          	jalr	ra,-612(ra) # 53c <removeData>
 7a8:	fea42423          	sw	a0,-24(s0)

      //no adjacent vertex found
      while((unvisitedVertex = getAdjUnvisitedVertex(tempVertex)) != -1) {    
 7ac:	0300006f          	jal	zero,7dc <breadthFirstSearch+0x70>
         lstVertices[unvisitedVertex]->visited = true;
 7b0:	000017b7          	lui	a5,0x1
 7b4:	ae078713          	addi	a4,a5,-1312 # ae0 <lstVertices>
 7b8:	fe442783          	lw	a5,-28(s0)
 7bc:	00279793          	slli	a5,a5,0x2
 7c0:	00f707b3          	add	a5,a4,a5
 7c4:	0007a783          	lw	a5,0(a5)
 7c8:	00100713          	addi	a4,zero,1
 7cc:	00e780a3          	sb	a4,1(a5)
         insert(unvisitedVertex);               
 7d0:	fe442503          	lw	a0,-28(s0)
 7d4:	00000097          	auipc	ra,0x0
 7d8:	d00080e7          	jalr	ra,-768(ra) # 4d4 <insert>
      while((unvisitedVertex = getAdjUnvisitedVertex(tempVertex)) != -1) {    
 7dc:	fe842503          	lw	a0,-24(s0)
 7e0:	00000097          	auipc	ra,0x0
 7e4:	ee0080e7          	jalr	ra,-288(ra) # 6c0 <getAdjUnvisitedVertex>
 7e8:	fea42223          	sw	a0,-28(s0)
 7ec:	fe442703          	lw	a4,-28(s0)
 7f0:	fff00793          	addi	a5,zero,-1
 7f4:	faf71ee3          	bne	a4,a5,7b0 <breadthFirstSearch+0x44>
   while(!isQueueEmpty()) {
 7f8:	00000097          	auipc	ra,0x0
 7fc:	d9c080e7          	jalr	ra,-612(ra) # 594 <isQueueEmpty>
 800:	00050793          	addi	a5,a0,0
 804:	0017c793          	xori	a5,a5,1
 808:	0ff7f793          	andi	a5,a5,255
 80c:	f8079ae3          	bne	a5,zero,7a0 <breadthFirstSearch+0x34>
      }
        
   }   

   //queue is empty, search is complete, reset the visited flag        
   for(i = 0;i<vertexCount;i++) {
 810:	fe042623          	sw	zero,-20(s0)
 814:	02c0006f          	jal	zero,840 <breadthFirstSearch+0xd4>
      lstVertices[i]->visited = false;
 818:	000017b7          	lui	a5,0x1
 81c:	ae078713          	addi	a4,a5,-1312 # ae0 <lstVertices>
 820:	fec42783          	lw	a5,-20(s0)
 824:	00279793          	slli	a5,a5,0x2
 828:	00f707b3          	add	a5,a4,a5
 82c:	0007a783          	lw	a5,0(a5)
 830:	000780a3          	sb	zero,1(a5)
   for(i = 0;i<vertexCount;i++) {
 834:	fec42783          	lw	a5,-20(s0)
 838:	00178793          	addi	a5,a5,1
 83c:	fef42623          	sw	a5,-20(s0)
 840:	000017b7          	lui	a5,0x1
 844:	ac87a783          	lw	a5,-1336(a5) # ac8 <vertexCount>
 848:	fec42703          	lw	a4,-20(s0)
 84c:	fcf746e3          	blt	a4,a5,818 <breadthFirstSearch+0xac>
   }    
}
 850:	00000013          	addi	zero,zero,0
 854:	00000013          	addi	zero,zero,0
 858:	01c12083          	lw	ra,28(sp)
 85c:	01812403          	lw	s0,24(sp)
 860:	02010113          	addi	sp,sp,32
 864:	00008067          	jalr	zero,0(ra)

00000868 <main>:

int main() {
 868:	fe010113          	addi	sp,sp,-32
 86c:	00112e23          	sw	ra,28(sp)
 870:	00812c23          	sw	s0,24(sp)
 874:	02010413          	addi	s0,sp,32
   int i, j;

   for(i = 0; i<MAX; i++) {
 878:	fe042623          	sw	zero,-20(s0)
 87c:	05c0006f          	jal	zero,8d8 <main+0x70>
      for(j = 0; j<MAX; j++) // matrix to 0
 880:	fe042423          	sw	zero,-24(s0)
 884:	03c0006f          	jal	zero,8c0 <main+0x58>
         adjMatrix[i][j] = 0;
 888:	000017b7          	lui	a5,0x1
 88c:	af478693          	addi	a3,a5,-1292 # af4 <adjMatrix>
 890:	fec42703          	lw	a4,-20(s0)
 894:	00070793          	addi	a5,a4,0
 898:	00279793          	slli	a5,a5,0x2
 89c:	00e787b3          	add	a5,a5,a4
 8a0:	fe842703          	lw	a4,-24(s0)
 8a4:	00e787b3          	add	a5,a5,a4
 8a8:	00279793          	slli	a5,a5,0x2
 8ac:	00f687b3          	add	a5,a3,a5
 8b0:	0007a023          	sw	zero,0(a5)
      for(j = 0; j<MAX; j++) // matrix to 0
 8b4:	fe842783          	lw	a5,-24(s0)
 8b8:	00178793          	addi	a5,a5,1
 8bc:	fef42423          	sw	a5,-24(s0)
 8c0:	fe842703          	lw	a4,-24(s0)
 8c4:	00400793          	addi	a5,zero,4
 8c8:	fce7d0e3          	bge	a5,a4,888 <main+0x20>
   for(i = 0; i<MAX; i++) {
 8cc:	fec42783          	lw	a5,-20(s0)
 8d0:	00178793          	addi	a5,a5,1
 8d4:	fef42623          	sw	a5,-20(s0)
 8d8:	fec42703          	lw	a4,-20(s0)
 8dc:	00400793          	addi	a5,zero,4
 8e0:	fae7d0e3          	bge	a5,a4,880 <main+0x18>
   }

   addVertex('S');   // 0
 8e4:	05300513          	addi	a0,zero,83
 8e8:	00000097          	auipc	ra,0x0
 8ec:	cd8080e7          	jalr	ra,-808(ra) # 5c0 <addVertex>
   addVertex('A');   // 1
 8f0:	04100513          	addi	a0,zero,65
 8f4:	00000097          	auipc	ra,0x0
 8f8:	ccc080e7          	jalr	ra,-820(ra) # 5c0 <addVertex>
   addVertex('B');   // 2
 8fc:	04200513          	addi	a0,zero,66
 900:	00000097          	auipc	ra,0x0
 904:	cc0080e7          	jalr	ra,-832(ra) # 5c0 <addVertex>
   addVertex('C');   // 3
 908:	04300513          	addi	a0,zero,67
 90c:	00000097          	auipc	ra,0x0
 910:	cb4080e7          	jalr	ra,-844(ra) # 5c0 <addVertex>
   addVertex('D');   // 4
 914:	04400513          	addi	a0,zero,68
 918:	00000097          	auipc	ra,0x0
 91c:	ca8080e7          	jalr	ra,-856(ra) # 5c0 <addVertex>
 
   addEdge(0, 1);    // S - A
 920:	00100593          	addi	a1,zero,1
 924:	00000513          	addi	a0,zero,0
 928:	00000097          	auipc	ra,0x0
 92c:	d14080e7          	jalr	ra,-748(ra) # 63c <addEdge>
   addEdge(0, 2);    // S - B
 930:	00200593          	addi	a1,zero,2
 934:	00000513          	addi	a0,zero,0
 938:	00000097          	auipc	ra,0x0
 93c:	d04080e7          	jalr	ra,-764(ra) # 63c <addEdge>
   addEdge(0, 3);    // S - C
 940:	00300593          	addi	a1,zero,3
 944:	00000513          	addi	a0,zero,0
 948:	00000097          	auipc	ra,0x0
 94c:	cf4080e7          	jalr	ra,-780(ra) # 63c <addEdge>
   addEdge(1, 4);    // A - D
 950:	00400593          	addi	a1,zero,4
 954:	00100513          	addi	a0,zero,1
 958:	00000097          	auipc	ra,0x0
 95c:	ce4080e7          	jalr	ra,-796(ra) # 63c <addEdge>
   addEdge(2, 4);    // B - D
 960:	00400593          	addi	a1,zero,4
 964:	00200513          	addi	a0,zero,2
 968:	00000097          	auipc	ra,0x0
 96c:	cd4080e7          	jalr	ra,-812(ra) # 63c <addEdge>
   addEdge(3, 4);    // C - D
 970:	00400593          	addi	a1,zero,4
 974:	00300513          	addi	a0,zero,3
 978:	00000097          	auipc	ra,0x0
 97c:	cc4080e7          	jalr	ra,-828(ra) # 63c <addEdge>
    
   
   breadthFirstSearch();
 980:	00000097          	auipc	ra,0x0
 984:	dec080e7          	jalr	ra,-532(ra) # 76c <breadthFirstSearch>

   return 0;
 988:	00000793          	addi	a5,zero,0
}
 98c:	00078513          	addi	a0,a5,0
 990:	01c12083          	lw	ra,28(sp)
 994:	01812403          	lw	s0,24(sp)
 998:	02010113          	addi	sp,sp,32
 99c:	00008067          	jalr	zero,0(ra)

000009a0 <memset>:
 9a0:	433d                	c.li	t1,15
 9a2:	872a                	c.mv	a4,a0
 9a4:	02c37363          	bgeu	t1,a2,9ca <memset+0x2a>
 9a8:	00f77793          	andi	a5,a4,15
 9ac:	efbd                	c.bnez	a5,a2a <memset+0x8a>
 9ae:	e5ad                	c.bnez	a1,a18 <memset+0x78>
 9b0:	ff067693          	andi	a3,a2,-16
 9b4:	8a3d                	c.andi	a2,15
 9b6:	96ba                	c.add	a3,a4
 9b8:	c30c                	c.sw	a1,0(a4)
 9ba:	c34c                	c.sw	a1,4(a4)
 9bc:	c70c                	c.sw	a1,8(a4)
 9be:	c74c                	c.sw	a1,12(a4)
 9c0:	0741                	c.addi	a4,16
 9c2:	fed76be3          	bltu	a4,a3,9b8 <memset+0x18>
 9c6:	e211                	c.bnez	a2,9ca <memset+0x2a>
 9c8:	8082                	c.jr	ra
 9ca:	40c306b3          	sub	a3,t1,a2
 9ce:	068a                	c.slli	a3,0x2
 9d0:	00000297          	auipc	t0,0x0
 9d4:	9696                	c.add	a3,t0
 9d6:	00a68067          	jalr	zero,10(a3)
 9da:	00b70723          	sb	a1,14(a4)
 9de:	00b706a3          	sb	a1,13(a4)
 9e2:	00b70623          	sb	a1,12(a4)
 9e6:	00b705a3          	sb	a1,11(a4)
 9ea:	00b70523          	sb	a1,10(a4)
 9ee:	00b704a3          	sb	a1,9(a4)
 9f2:	00b70423          	sb	a1,8(a4)
 9f6:	00b703a3          	sb	a1,7(a4)
 9fa:	00b70323          	sb	a1,6(a4)
 9fe:	00b702a3          	sb	a1,5(a4)
 a02:	00b70223          	sb	a1,4(a4)
 a06:	00b701a3          	sb	a1,3(a4)
 a0a:	00b70123          	sb	a1,2(a4)
 a0e:	00b700a3          	sb	a1,1(a4)
 a12:	00b70023          	sb	a1,0(a4)
 a16:	8082                	c.jr	ra
 a18:	0ff5f593          	andi	a1,a1,255
 a1c:	00859693          	slli	a3,a1,0x8
 a20:	8dd5                	c.or	a1,a3
 a22:	01059693          	slli	a3,a1,0x10
 a26:	8dd5                	c.or	a1,a3
 a28:	b761                	c.j	9b0 <memset+0x10>
 a2a:	00279693          	slli	a3,a5,0x2
 a2e:	00000297          	auipc	t0,0x0
 a32:	9696                	c.add	a3,t0
 a34:	8286                	c.mv	t0,ra
 a36:	fa8680e7          	jalr	ra,-88(a3)
 a3a:	8096                	c.mv	ra,t0
 a3c:	17c1                	c.addi	a5,-16
 a3e:	8f1d                	c.sub	a4,a5
 a40:	963e                	c.add	a2,a5
 a42:	f8c374e3          	bgeu	t1,a2,9ca <memset+0x2a>
 a46:	b7a5                	c.j	9ae <memset+0xe>
	...

Disassembly of section .sdata:

00000aa0 <next_index>:
static void* next_index = (void *)heap; //the next place to be allocated
 aa0:	0b58                	c.addi4spn	a4,sp,404
	...

00000aa4 <avail_mem>:
static unsigned int avail_mem = sizeof(heap); //the most CONTIGUOUS memory available
 aa4:	4000                	c.lw	s0,0(s0)
	...

00000aa8 <rear>:
int rear = -1;
 aa8:	ffff                	.2byte	0xffff
 aaa:	ffff                	.2byte	0xffff

Disassembly of section .bss:

00000ac0 <front>:
int front = 0;
     ac0:	0000                	c.unimp
	...

00000ac4 <queueItemCount>:
int queueItemCount = 0;
     ac4:	0000                	c.unimp
	...

00000ac8 <vertexCount>:
int vertexCount = 0;
     ac8:	0000                	c.unimp
	...

00000acc <queue>:
	...

00000ae0 <lstVertices>:
	...

00000af4 <adjMatrix>:
	...

00000b58 <heap>:
	...

00001280 <__global_pointer$>:
	...

00004b58 <base>:
	...

00004b60 <freep>:
static Header *freep = NULL; //start of the free list
    4b60:	0000                	c.unimp
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
	nop
   0:	2941                	c.jal	490 <tj_calloc+0xc>
   2:	0000                	c.unimp
	la ra, exit
   4:	7200                	.2byte	0x7200
   6:	7369                	c.lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <crt+0x14>
	la sp, _sp
   c:	001f 0000 1004      	.byte	0x1f, 0x00, 0x00, 0x00, 0x04, 0x10
  12:	7205                	c.lui	tp,0xfffe1
	mv s0, sp
  14:	3376                	.2byte	0x3376
  16:	6932                	.2byte	0x6932
	la gp, __global_pointer$
  18:	7032                	.2byte	0x7032
  1a:	5f30                	c.lw	a2,120(a4)
  1c:	326d                	c.jal	fffff9c6 <_sp+0xfffef9c6>
  1e:	3070                	.2byte	0x3070
	li tp, 0
  20:	635f 7032 0030      	.byte	0x5f, 0x63, 0x32, 0x70, 0x30, 0x00
	li t0, 0
  26:	0108                	c.addi4spn	a0,sp,128
	li t1, 0
  28:	0b0a                	c.slli	s6,0x2

Disassembly of section .comment:

00000000 <.comment>:
	nop
   0:	3a434347          	.4byte	0x3a434347
	la ra, exit
   4:	2820                	.2byte	0x2820
   6:	31202967          	.4byte	0x31202967
   a:	2e31                	c.jal	326 <tj_malloc+0x36>
	la sp, _sp
   c:	2e31                	c.jal	328 <tj_malloc+0x38>
   e:	0030                	c.addi4spn	a2,sp,8

Disassembly of section .debug_line:

00000000 <.debug_line>:
	nop
   0:	0124                	c.addi4spn	s1,sp,136
   2:	0000                	c.unimp
	la ra, exit
   4:	0005                	c.addi	zero,1
   6:	0004                	.2byte	0x4
   8:	002a                	c.slli	zero,0xa
   a:	0000                	c.unimp
	la sp, _sp
   c:	0101                	c.addi	sp,0
   e:	fb01                	c.bnez	a4,ffffff1e <_sp+0xfffeff1e>
  10:	0d0e                	c.slli	s10,0x3
  12:	0100                	c.addi4spn	s0,sp,128
	mv s0, sp
  14:	0101                	c.addi	sp,0
  16:	0001                	c.addi	zero,0
	la gp, __global_pointer$
  18:	0000                	c.unimp
  1a:	0001                	c.addi	zero,0
  1c:	0100                	c.addi4spn	s0,sp,128
  1e:	0101                	c.addi	sp,0
	li tp, 0
  20:	011f 0000 0000      	.byte	0x1f, 0x01, 0x00, 0x00, 0x00, 0x00
	li t0, 0
  26:	0102                	c.slli64	sp
	li t1, 0
  28:	021f 020f 004b      	.byte	0x1f, 0x02, 0x0f, 0x02, 0x4b, 0x00
	li t2, 0
  2e:	0000                	c.unimp
	li s1, 0
  30:	4b00                	c.lw	s0,16(a4)
  32:	0000                	c.unimp
	li a0, 0
  34:	0000                	c.unimp
  36:	0500                	c.addi4spn	s0,sp,640
	li a1, 0
  38:	0002                	c.slli64	zero
  3a:	0000                	c.unimp
	li a2, 0
  3c:	0300                	c.addi4spn	s0,sp,384
  3e:	010d                	c.addi	sp,3
	li a3, 0
  40:	04090103          	lb	sp,64(s2)
	li a4, 0
  44:	0100                	c.addi4spn	s0,sp,128
  46:	08090103          	lb	sp,128(s2)
	li a5, 0
  4a:	0100                	c.addi4spn	s0,sp,128
	li a6, 0
  4c:	08090103          	lb	sp,128(s2)
	li a7, 0
  50:	0100                	c.addi4spn	s0,sp,128
  52:	04090103          	lb	sp,64(s2)
	li s2, 0
  56:	0100                	c.addi4spn	s0,sp,128
	li s3, 0
  58:	08090103          	lb	sp,128(s2)
	li s4, 0
  5c:	0100                	c.addi4spn	s0,sp,128
  5e:	04090103          	lb	sp,64(s2)
	li s5, 0
  62:	0100                	c.addi4spn	s0,sp,128
	li s6, 0
  64:	04090103          	lb	sp,64(s2)
	li s7, 0
  68:	0100                	c.addi4spn	s0,sp,128
  6a:	04090103          	lb	sp,64(s2)
	li s8, 0
  6e:	0100                	c.addi4spn	s0,sp,128
	li s9, 0
  70:	04090103          	lb	sp,64(s2)
	li s10, 0
  74:	0100                	c.addi4spn	s0,sp,128
  76:	04090103          	lb	sp,64(s2)
	li s11, 0
  7a:	0100                	c.addi4spn	s0,sp,128
	li t3, 0
  7c:	04090103          	lb	sp,64(s2)
	li t4, 0
  80:	0100                	c.addi4spn	s0,sp,128
  82:	04090103          	lb	sp,64(s2)
	li t5, 0
  86:	0100                	c.addi4spn	s0,sp,128
	li t6, 0
  88:	04090103          	lb	sp,64(s2)
	j main
  8c:	0100                	c.addi4spn	s0,sp,128
  8e:	04090103          	lb	sp,64(s2)
  92:	0100                	c.addi4spn	s0,sp,128
  94:	04090103          	lb	sp,64(s2)
  98:	0100                	c.addi4spn	s0,sp,128
  9a:	04090103          	lb	sp,64(s2)
  9e:	0100                	c.addi4spn	s0,sp,128
	la sp, _sp
  a0:	04090103          	lb	sp,64(s2)
  a4:	0100                	c.addi4spn	s0,sp,128
  a6:	04090103          	lb	sp,64(s2)
	sw a0, -8(sp)
  aa:	0100                	c.addi4spn	s0,sp,128
	nop
  ac:	04090103          	lb	sp,64(s2)
	wfi
  b0:	0100                	c.addi4spn	s0,sp,128
  b2:	04090103          	lb	sp,64(s2)
void tj_free(void *mem) {
  b6:	0100                	c.addi4spn	s0,sp,128
  b8:	04090103          	lb	sp,64(s2)
  bc:	0100                	c.addi4spn	s0,sp,128
  be:	04090103          	lb	sp,64(s2)
  c2:	0100                	c.addi4spn	s0,sp,128
  c4:	04090103          	lb	sp,64(s2)
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	0100                	c.addi4spn	s0,sp,128
  ca:	04090103          	lb	sp,64(s2)
  ce:	0100                	c.addi4spn	s0,sp,128
  d0:	04090103          	lb	sp,64(s2)
  d4:	0100                	c.addi4spn	s0,sp,128
  d6:	04090103          	lb	sp,64(s2)
  da:	0100                	c.addi4spn	s0,sp,128
  dc:	04090103          	lb	sp,64(s2)
  e0:	0100                	c.addi4spn	s0,sp,128
  e2:	04090103          	lb	sp,64(s2)
  e6:	0100                	c.addi4spn	s0,sp,128
		exit(1);
  e8:	04090103          	lb	sp,64(s2)
  ec:	0100                	c.addi4spn	s0,sp,128
  ee:	04090103          	lb	sp,64(s2)
  f2:	0100                	c.addi4spn	s0,sp,128
	bp = (Header *)mem - 1; //point to block header
  f4:	04090103          	lb	sp,64(s2)
  f8:	0100                	c.addi4spn	s0,sp,128
  fa:	04090103          	lb	sp,64(s2)
  fe:	0100                	c.addi4spn	s0,sp,128
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	0409                	c.addi	s0,2
 102:	0000                	c.unimp
 104:	0101                	c.addi	sp,0
 106:	0500                	c.addi4spn	s0,sp,640
 108:	a002                	.2byte	0xa002
 10a:	0000                	c.unimp
 10c:	0300                	c.addi4spn	s0,sp,384
 10e:	01030133          	add	sp,t1,a6
		if (p >= p->next && (bp > p || bp < p->next))
 112:	0809                	c.addi	a6,2
 114:	0100                	c.addi4spn	s0,sp,128
 116:	04090103          	lb	sp,64(s2)
 11a:	0100                	c.addi4spn	s0,sp,128
 11c:	04090103          	lb	sp,64(s2)
 120:	0100                	c.addi4spn	s0,sp,128
 122:	0409                	c.addi	s0,2
 124:	0000                	c.unimp
 126:	0101                	c.addi	sp,0
 128:	0639                	c.addi	a2,14
 12a:	0000                	c.unimp
 12c:	0005                	c.addi	zero,1
 12e:	0004                	.2byte	0x4
 130:	004a                	c.slli	zero,0x12
 132:	0000                	c.unimp
 134:	0101                	c.addi	sp,0
 136:	fb01                	c.bnez	a4,46 <crt+0x46>
 138:	0d0e                	c.slli	s10,0x3
 13a:	0100                	c.addi4spn	s0,sp,128
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	0101                	c.addi	sp,0
 13e:	0001                	c.addi	zero,0
 140:	0000                	c.unimp
 142:	0001                	c.addi	zero,0
 144:	0100                	c.addi4spn	s0,sp,128
 146:	0101                	c.addi	sp,0
 148:	041f 0000 0000      	.byte	0x1f, 0x04, 0x00, 0x00, 0x00, 0x00
 14e:	0062                	c.slli	zero,0x18
 150:	0000                	c.unimp
 152:	006d                	c.addi	zero,27
 154:	0000                	c.unimp
 156:	00a5                	c.addi	ra,9
 158:	0000                	c.unimp
 15a:	0102                	c.slli64	sp
 15c:	021f 060f 005c      	.byte	0x1f, 0x02, 0x0f, 0x06, 0x5c, 0x00
 162:	0000                	c.unimp
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	ce01                	c.beqz	a2,17c <tj_free+0xc8>
 166:	0000                	c.unimp
 168:	0100                	c.addi4spn	s0,sp,128
 16a:	005c                	c.addi4spn	a5,sp,4
 16c:	0000                	c.unimp
 16e:	da01                	c.beqz	a2,7e <crt+0x7e>
 170:	0000                	c.unimp
 172:	0200                	c.addi4spn	s0,sp,256
 174:	000000e3          	beq	zero,zero,974 <main+0x10c>
 178:	0000ec03          	.4byte	0xec03
 17c:	0300                	c.addi4spn	s0,sp,384
 17e:	1905                	c.addi	s2,-31
 180:	0500                	c.addi4spn	s0,sp,640
 182:	b402                	.2byte	0xb402
		bp->size += p->next->size;
 184:	0000                	c.unimp
 186:	0300                	c.addi4spn	s0,sp,384
 188:	0129                	c.addi	sp,10
 18a:	0505                	c.addi	a0,1
 18c:	14090303          	lb	t1,320(s2)
 190:	0100                	c.addi4spn	s0,sp,128
 192:	2205                	c.jal	2b2 <getmoremem+0x6e>
 194:	0200                	c.addi4spn	s0,sp,256
 196:	0104                	c.addi4spn	s1,sp,128
 198:	10090003          	lb	zero,256(s2)
 19c:	0100                	c.addi4spn	s0,sp,128
 19e:	1905                	c.addi	s2,-31
 1a0:	0200                	c.addi4spn	s0,sp,256
 1a2:	0104                	c.addi4spn	s1,sp,128
		bp->next = p->next->next;
 1a4:	08090003          	lb	zero,128(s2)
 1a8:	0100                	c.addi4spn	s0,sp,128
 1aa:	0305                	c.addi	t1,1 # ffffa001 <_sp+0xfffea001>
 1ac:	08090103          	lb	sp,128(s2)
 1b0:	0100                	c.addi4spn	s0,sp,128
 1b2:	0505                	c.addi	a0,1
 1b4:	0c090303          	lb	t1,192(s2)
 1b8:	0100                	c.addi4spn	s0,sp,128
 1ba:	0905                	c.addi	s2,1
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	0c090203          	lb	tp,192(s2)
 1c0:	0100                	c.addi4spn	s0,sp,128
 1c2:	0205                	c.addi	tp,1 # fffe1001 <_sp+0xfffd1001>
 1c4:	0c090003          	lb	zero,192(s2)
 1c8:	0100                	c.addi4spn	s0,sp,128
 1ca:	0d05                	c.addi	s10,1
	if (p + p->size == bp) { //join to lower nbr
 1cc:	04090303          	lb	t1,64(s2)
 1d0:	0100                	c.addi4spn	s0,sp,128
 1d2:	0605                	c.addi	a2,1
 1d4:	08090003          	lb	zero,128(s2)
 1d8:	0100                	c.addi4spn	s0,sp,128
 1da:	1405                	c.addi	s0,-31
 1dc:	0200                	c.addi4spn	s0,sp,256
 1de:	0104                	c.addi4spn	s1,sp,128
 1e0:	08090003          	lb	zero,128(s2)
 1e4:	0100                	c.addi4spn	s0,sp,128
 1e6:	2805                	c.jal	216 <tj_free+0x162>
		p->size += bp->size;
 1e8:	0200                	c.addi4spn	s0,sp,256
 1ea:	0204                	c.addi4spn	s1,sp,256
 1ec:	0c090003          	lb	zero,192(s2)
 1f0:	0100                	c.addi4spn	s0,sp,128
 1f2:	1f05                	c.addi	t5,-31
 1f4:	0200                	c.addi4spn	s0,sp,256
 1f6:	0204                	c.addi4spn	s1,sp,256
 1f8:	08090003          	lb	zero,128(s2)
 1fc:	0100                	c.addi4spn	s0,sp,128
 1fe:	2f05                	c.jal	92e <main+0xc6>
 200:	0200                	c.addi4spn	s0,sp,256
 202:	0204                	c.addi4spn	s1,sp,256
		p->next = bp->next;
 204:	08097d03          	.4byte	0x8097d03
 208:	0100                	c.addi4spn	s0,sp,128
 20a:	1205                	c.addi	tp,-31 # ffffffe1 <_sp+0xfffeffe1>
 20c:	0200                	c.addi4spn	s0,sp,256
 20e:	0104                	c.addi4spn	s1,sp,128
 210:	0c090003          	lb	zero,192(s2)
 214:	0100                	c.addi4spn	s0,sp,128
 216:	2405                	c.jal	436 <tj_malloc+0x146>
		p->next = bp; //again, if the free list is just the base
 218:	0200                	c.addi4spn	s0,sp,256
 21a:	0304                	c.addi4spn	s1,sp,384
 21c:	0c090003          	lb	zero,192(s2)
 220:	0100                	c.addi4spn	s0,sp,128
 222:	1205                	c.addi	tp,-31 # ffffffe1 <_sp+0xfffeffe1>
	freep = p;
 224:	0200                	c.addi4spn	s0,sp,256
 226:	0304                	c.addi4spn	s1,sp,384
 228:	08090003          	lb	zero,128(s2)
 22c:	0100                	c.addi4spn	s0,sp,128
 22e:	0d05                	c.addi	s10,1
}
 230:	08090703          	lb	a4,128(s2)
 234:	0100                	c.addi4spn	s0,sp,128
 236:	0905                	c.addi	s2,1
 238:	08090003          	lb	zero,128(s2)
 23c:	0100                	c.addi4spn	s0,sp,128
 23e:	1805                	c.addi	a6,-31
 240:	0c090003          	lb	zero,192(s2)
static Header* getmoremem(unsigned int total_size) {
 244:	0100                	c.addi4spn	s0,sp,128
 246:	0505                	c.addi	a0,1
 248:	08090003          	lb	zero,128(s2)
 24c:	0100                	c.addi4spn	s0,sp,128
 24e:	0c05                	c.addi	s8,1
 250:	04090203          	lb	tp,64(s2)
 254:	0100                	c.addi4spn	s0,sp,128
 256:	1005                	c.addi	zero,-31
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 258:	08090003          	lb	zero,128(s2)
 25c:	0100                	c.addi4spn	s0,sp,128
 25e:	1605                	c.addi	a2,-31
 260:	08090003          	lb	zero,128(s2)
 264:	0100                	c.addi4spn	s0,sp,128
 266:	0c05                	c.addi	s8,1
 268:	04090003          	lb	zero,64(s2)
 26c:	0100                	c.addi4spn	s0,sp,128
 26e:	0f05                	c.addi	t5,1
	Header* up = (Header *)next_index;
 270:	0c090103          	lb	sp,192(s2)
 274:	0100                	c.addi4spn	s0,sp,128
 276:	1505                	c.addi	a0,-31
 278:	08090003          	lb	zero,128(s2)
	next_index += total_size; //allocate the block
 27c:	0100                	c.addi4spn	s0,sp,128
 27e:	0c05                	c.addi	s8,1
 280:	04090003          	lb	zero,64(s2)
 284:	0100                	c.addi4spn	s0,sp,128
 286:	0f05                	c.addi	t5,1
 288:	0c090203          	lb	tp,192(s2)
 28c:	0100                	c.addi4spn	s0,sp,128
 28e:	0c05                	c.addi	s8,1
 290:	08090003          	lb	zero,128(s2)
	avail_mem -= total_size; //deduct from avail mem;
 294:	0100                	c.addi4spn	s0,sp,128
 296:	0b05                	c.addi	s6,1
 298:	08090403          	lb	s0,128(s2)
 29c:	0100                	c.addi4spn	s0,sp,128
 29e:	0805                	c.addi	a6,1
 2a0:	08090003          	lb	zero,128(s2)
 2a4:	0100                	c.addi4spn	s0,sp,128
 2a6:	0505                	c.addi	a0,1
 2a8:	0c090003          	lb	zero,192(s2)
	up->size = total_size - sizeof(Header); //set the size right
 2ac:	0100                	c.addi4spn	s0,sp,128
 2ae:	0b05                	c.addi	s6,1
 2b0:	08090203          	lb	tp,128(s2)
 2b4:	0100                	c.addi4spn	s0,sp,128
 2b6:	1005                	c.addi	zero,-31
 2b8:	08090003          	lb	zero,128(s2)
	tj_free((void *)(++up)); //append the new block to the free list first
 2bc:	0100                	c.addi4spn	s0,sp,128
 2be:	0b05                	c.addi	s6,1
 2c0:	08090003          	lb	zero,128(s2)
 2c4:	0100                	c.addi4spn	s0,sp,128
 2c6:	0f05                	c.addi	t5,1
 2c8:	0c090103          	lb	sp,192(s2)
 2cc:	0100                	c.addi4spn	s0,sp,128
 2ce:	0b05                	c.addi	s6,1
 2d0:	08090003          	lb	zero,128(s2)
	return freep;
 2d4:	0100                	c.addi4spn	s0,sp,128
 2d6:	0c090203          	lb	tp,192(s2)
 2da:	0100                	c.addi4spn	s0,sp,128
}
 2dc:	0805                	c.addi	a6,1
 2de:	0c090303          	lb	t1,192(s2)
 2e2:	0100                	c.addi4spn	s0,sp,128
 2e4:	0105                	c.addi	sp,1
 2e6:	0c090103          	lb	sp,192(s2)
 2ea:	0100                	c.addi4spn	s0,sp,128
 2ec:	3405                	c.jal	fffffd0c <_sp+0xfffefd0c>
 2ee:	14090203          	lb	tp,320(s2)
void *tj_malloc(unsigned int size) {
 2f2:	0100                	c.addi4spn	s0,sp,128
 2f4:	1005                	c.addi	zero,-31
 2f6:	14090103          	lb	sp,320(s2)
 2fa:	0100                	c.addi4spn	s0,sp,128
 2fc:	0505                	c.addi	a0,1
 2fe:	08090003          	lb	zero,128(s2)
 302:	0100                	c.addi4spn	s0,sp,128
	if (size > sizeof(heap)) return NULL;
 304:	2505                	c.jal	924 <main+0xbc>
 306:	0200                	c.addi4spn	s0,sp,256
 308:	0104                	c.addi4spn	s1,sp,128
 30a:	08090003          	lb	zero,128(s2)
 30e:	0100                	c.addi4spn	s0,sp,128
 310:	0a05                	c.addi	s4,1
 312:	08090103          	lb	sp,128(s2)
 316:	0100                	c.addi4spn	s0,sp,128
	if ((size & 3) != 0) {
 318:	0d05                	c.addi	s10,1
 31a:	0c090103          	lb	sp,192(s2)
 31e:	0100                	c.addi4spn	s0,sp,128
 320:	0c05                	c.addi	s8,1
 322:	18090103          	lb	sp,384(s2)
		size = size + 4 - (size & 3);
 326:	0100                	c.addi4spn	s0,sp,128
 328:	1805                	c.addi	a6,-31
 32a:	18090103          	lb	sp,384(s2)
 32e:	0100                	c.addi4spn	s0,sp,128
 330:	0b05                	c.addi	s6,1
 332:	08090003          	lb	zero,128(s2)
	unsigned int total_size = size + sizeof(Header); //need to include the header size as well
 336:	0100                	c.addi4spn	s0,sp,128
 338:	0205                	c.addi	tp,1 # 1 <crt+0x1>
 33a:	08090103          	lb	sp,128(s2)
 33e:	0100                	c.addi4spn	s0,sp,128
	prevp = freep;
 340:	0905                	c.addi	s2,1
 342:	18090103          	lb	sp,384(s2)
 346:	0100                	c.addi4spn	s0,sp,128
 348:	0105                	c.addi	sp,1
 34a:	08090103          	lb	sp,128(s2)
	if (prevp == NULL) {
 34e:	0100                	c.addi4spn	s0,sp,128
 350:	2405                	c.jal	570 <removeData+0x34>
 352:	14090203          	lb	tp,320(s2)
		prevp = &base;
 356:	0100                	c.addi4spn	s0,sp,128
 358:	0505                	c.addi	a0,1
 35a:	14090203          	lb	tp,320(s2)
 35e:	0100                	c.addi4spn	s0,sp,128
		freep = prevp;
 360:	2205                	c.jal	480 <tj_malloc+0x190>
 362:	0200                	c.addi4spn	s0,sp,256
 364:	0104                	c.addi4spn	s1,sp,128
 366:	0c090003          	lb	zero,192(s2)
 36a:	0100                	c.addi4spn	s0,sp,128
		base.next = freep;
 36c:	0c05                	c.addi	s8,1
 36e:	08090303          	lb	t1,128(s2)
 372:	0100                	c.addi4spn	s0,sp,128
 374:	0505                	c.addi	a0,1
 376:	08090003          	lb	zero,128(s2)
 37a:	0100                	c.addi4spn	s0,sp,128
 37c:	1305                	c.addi	t1,-31
 37e:	04090103          	lb	sp,64(s2)
		base.size = 0;
 382:	0100                	c.addi4spn	s0,sp,128
 384:	0805                	c.addi	a6,1
 386:	08090003          	lb	zero,128(s2)
 38a:	0100                	c.addi4spn	s0,sp,128
	for (p = prevp->next; ;prevp = p, p = p->next) {
 38c:	0f05                	c.addi	t5,1
 38e:	08090603          	lb	a2,128(s2)
 392:	0100                	c.addi4spn	s0,sp,128
 394:	0805                	c.addi	a6,1
 396:	0c090203          	lb	tp,192(s2)
		if (p->size >= size) { //big enough
 39a:	0100                	c.addi4spn	s0,sp,128
 39c:	0505                	c.addi	a0,1
 39e:	0c090203          	lb	tp,192(s2)
 3a2:	0100                	c.addi4spn	s0,sp,128
 3a4:	0905                	c.addi	s2,1
 3a6:	08090103          	lb	sp,128(s2)
			if (p->size == size) // exact size
 3aa:	0100                	c.addi4spn	s0,sp,128
 3ac:	0c090103          	lb	sp,192(s2)
 3b0:	0100                	c.addi4spn	s0,sp,128
 3b2:	0d05                	c.addi	s10,1
 3b4:	0c090103          	lb	sp,192(s2)
				prevp->next = p->next; // just return that block
 3b8:	0100                	c.addi4spn	s0,sp,128
 3ba:	14090103          	lb	sp,320(s2)
 3be:	0100                	c.addi4spn	s0,sp,128
 3c0:	0905                	c.addi	s2,1
 3c2:	0c090303          	lb	t1,192(s2)
 3c6:	0100                	c.addi4spn	s0,sp,128
 3c8:	0805                	c.addi	a6,1
 3ca:	0c090103          	lb	sp,192(s2)
				p->size -= total_size; //break up the block
 3ce:	0100                	c.addi4spn	s0,sp,128
 3d0:	0605                	c.addi	a2,1
 3d2:	08090003          	lb	zero,128(s2)
 3d6:	0100                	c.addi4spn	s0,sp,128
 3d8:	0905                	c.addi	s2,1
 3da:	08090103          	lb	sp,128(s2)
 3de:	0100                	c.addi4spn	s0,sp,128
 3e0:	0705                	c.addi	a4,1
 3e2:	08090003          	lb	zero,128(s2)
				p += p->size;
 3e6:	0100                	c.addi4spn	s0,sp,128
 3e8:	1405                	c.addi	s0,-31
 3ea:	08090103          	lb	sp,128(s2)
 3ee:	0100                	c.addi4spn	s0,sp,128
 3f0:	1105                	c.addi	sp,-31
 3f2:	08090003          	lb	zero,128(s2)
 3f6:	0100                	c.addi4spn	s0,sp,128
 3f8:	0d05                	c.addi	s10,1
 3fa:	0c090203          	lb	tp,192(s2)
				p->size = size;
 3fe:	0100                	c.addi4spn	s0,sp,128
 400:	0b05                	c.addi	s6,1
 402:	18090103          	lb	sp,384(s2)
 406:	0100                	c.addi4spn	s0,sp,128
			freep = prevp;
 408:	0705                	c.addi	a4,1
 40a:	08090003          	lb	zero,128(s2)
 40e:	0100                	c.addi4spn	s0,sp,128
 410:	0d05                	c.addi	s10,1
 412:	10090103          	lb	sp,256(s2)
			return (void *)(++p);
 416:	0100                	c.addi4spn	s0,sp,128
 418:	0a05                	c.addi	s4,1
 41a:	0c090203          	lb	tp,192(s2)
 41e:	0100                	c.addi4spn	s0,sp,128
 420:	0b05                	c.addi	s6,1
 422:	0c090403          	lb	s0,192(s2)
 426:	0100                	c.addi4spn	s0,sp,128
		if (p == freep) //wrapped around free list
 428:	0905                	c.addi	s2,1
 42a:	14090203          	lb	tp,320(s2)
 42e:	0100                	c.addi4spn	s0,sp,128
 430:	0605                	c.addi	a2,1
 432:	08090003          	lb	zero,128(s2)
 436:	0100                	c.addi4spn	s0,sp,128
			if ((p = getmoremem(total_size)) == NULL) //if the heap runs out
 438:	0d05                	c.addi	s10,1
 43a:	08090103          	lb	sp,128(s2)
 43e:	0100                	c.addi4spn	s0,sp,128
 440:	0705                	c.addi	a4,1
 442:	10090003          	lb	zero,256(s2)
 446:	0100                	c.addi4spn	s0,sp,128
 448:	0c05                	c.addi	s8,1
 44a:	08090103          	lb	sp,128(s2)
 44e:	0100                	c.addi4spn	s0,sp,128
				return NULL; //well, you got nothing left, gg
 450:	1f05                	c.addi	t5,-31
 452:	08096f03          	.4byte	0x8096f03
 456:	0100                	c.addi4spn	s0,sp,128
	for (p = prevp->next; ;prevp = p, p = p->next) {
 458:	2605                	c.jal	778 <breadthFirstSearch+0xc>
 45a:	08090003          	lb	zero,128(s2)
 45e:	0100                	c.addi4spn	s0,sp,128
 460:	0605                	c.addi	a2,1
 462:	0c090103          	lb	sp,192(s2)
 466:	0100                	c.addi4spn	s0,sp,128
 468:	0105                	c.addi	sp,1
 46a:	04091203          	lh	tp,64(s2)
		if (p->size >= size) { //big enough
 46e:	0100                	c.addi4spn	s0,sp,128
}
 470:	2405                	c.jal	690 <addEdge+0x54>
 472:	14090203          	lb	tp,320(s2)
 476:	0100                	c.addi4spn	s0,sp,128
 478:	0e05                	c.addi	t3,1
 47a:	14090103          	lb	sp,320(s2)
 47e:	0100                	c.addi4spn	s0,sp,128
 480:	0205                	c.addi	tp,1 # 1 <crt+0x1>
 482:	10090103          	lb	sp,256(s2)
void *tj_calloc(unsigned int size) {
 486:	0100                	c.addi4spn	s0,sp,128
 488:	0905                	c.addi	s2,1
 48a:	14090103          	lb	sp,320(s2)
 48e:	0100                	c.addi4spn	s0,sp,128
 490:	0105                	c.addi	sp,1
 492:	04090103          	lb	sp,64(s2)
 496:	0100                	c.addi4spn	s0,sp,128
	void *mem = tj_malloc(size);
 498:	0204                	c.addi4spn	s1,sp,256
 49a:	1705                	c.addi	a4,-31
 49c:	097fa103          	lw	sp,151(t6)
 4a0:	0014                	.2byte	0x14
 4a2:	0501                	c.addi	a0,0
 4a4:	030a                	c.slli	t1,0x2
 4a6:	0901                	c.addi	s2,0
	memset(mem, 0, size);
 4a8:	0010                	.2byte	0x10
 4aa:	0501                	c.addi	a0,0
 4ac:	0312                	c.slli	t1,0x4
 4ae:	0900                	c.addi4spn	s0,sp,144
 4b0:	000c                	.2byte	0xc
 4b2:	0501                	c.addi	a0,0
 4b4:	030a                	c.slli	t1,0x2
 4b6:	0900                	c.addi4spn	s0,sp,144
 4b8:	0008                	.2byte	0x8
 4ba:	0501                	c.addi	a0,0
	return mem;
 4bc:	0312                	c.slli	t1,0x4
 4be:	0900                	c.addi4spn	s0,sp,144
}
 4c0:	0008                	.2byte	0x8
 4c2:	0301                	c.addi	t1,0
 4c4:	0901                	c.addi	s2,0
 4c6:	0018                	.2byte	0x18
 4c8:	0501                	c.addi	a0,0
 4ca:	0301                	c.addi	t1,0
 4cc:	0901                	c.addi	s2,0
 4ce:	0014                	.2byte	0x14
 4d0:	0501                	c.addi	a0,0
 4d2:	0312                	c.slli	t1,0x4
void insert(int data) {
 4d4:	0902                	c.slli64	s2
 4d6:	0010                	.2byte	0x10
 4d8:	0301                	c.addi	t1,0
 4da:	0901                	c.addi	s2,0
 4dc:	000c                	.2byte	0xc
 4de:	0501                	c.addi	a0,0
 4e0:	0316                	c.slli	t1,0x5
 4e2:	0901                	c.addi	s2,0
   queue[++rear] = data;
 4e4:	0014                	.2byte	0x14
 4e6:	0501                	c.addi	a0,0
 4e8:	0310                	c.addi4spn	a2,sp,384
 4ea:	0900                	c.addi4spn	s0,sp,144
 4ec:	0014                	.2byte	0x14
 4ee:	0501                	c.addi	a0,0
 4f0:	0301                	c.addi	t1,0
 4f2:	0901                	c.addi	s2,0
 4f4:	0014                	.2byte	0x14
 4f6:	0501                	c.addi	a0,0
 4f8:	0315                	c.addi	t1,5
 4fa:	0902                	c.slli64	s2
 4fc:	0010                	.2byte	0x10
 4fe:	0501                	c.addi	a0,0
 500:	031a                	c.slli	t1,0x6
 502:	0901                	c.addi	s2,0
 504:	000c                	.2byte	0xc
 506:	0501                	c.addi	a0,0
 508:	0301                	c.addi	t1,0
 50a:	0901                	c.addi	s2,0
 50c:	0010                	.2byte	0x10
 50e:	0501                	c.addi	a0,0
 510:	031c                	c.addi4spn	a5,sp,384
 512:	0905                	c.addi	s2,1
 514:	0010                	.2byte	0x10
 516:	0501                	c.addi	a0,0
   queueItemCount++;
 518:	032d                	c.addi	t1,11
 51a:	0901                	c.addi	s2,0
 51c:	0018                	.2byte	0x18
 51e:	0501                	c.addi	a0,0
 520:	0312                	c.slli	t1,0x4
 522:	0901                	c.addi	s2,0
 524:	0010                	.2byte	0x10
 526:	0501                	c.addi	a0,0
 528:	0314                	c.addi4spn	a3,sp,384
 52a:	0901                	c.addi	s2,0
}
 52c:	000c                	.2byte	0xc
 52e:	0501                	c.addi	a0,0
 530:	0901031b          	.4byte	0x901031b
 534:	0008                	.2byte	0x8
 536:	0501                	c.addi	a0,0
 538:	031f 0900 0014      	.byte	0x1f, 0x03, 0x00, 0x09, 0x14, 0x00
int removeData() {
 53e:	0501                	c.addi	a0,0
 540:	0301                	c.addi	t1,0
 542:	0901                	c.addi	s2,0
 544:	0018                	.2byte	0x18
 546:	0501                	c.addi	a0,0
   queueItemCount--;
 548:	0321                	c.addi	t1,8
 54a:	00140903          	lb	s2,1(s0)
 54e:	0501                	c.addi	a0,0
 550:	031a                	c.slli	t1,0x6
 552:	0901                	c.addi	s2,0
 554:	0014                	.2byte	0x14
 556:	0301                	c.addi	t1,0
 558:	0901                	c.addi	s2,0
 55a:	0030                	c.addi4spn	a2,sp,8
   return queue[front++]; 
 55c:	0501                	c.addi	a0,0
 55e:	0301                	c.addi	t1,0
 560:	0901                	c.addi	s2,0
 562:	0030                	c.addi4spn	a2,sp,8
 564:	0501                	c.addi	a0,0
 566:	032c                	c.addi4spn	a1,sp,392
 568:	00100903          	lb	s2,1(zero) # 1 <crt+0x1>
 56c:	0501                	c.addi	a0,0
 56e:	030a                	c.slli	t1,0x2
 570:	00100903          	lb	s2,1(zero) # 1 <crt+0x1>
 574:	0501                	c.addi	a0,0
 576:	0304                	c.addi4spn	s1,sp,384
 578:	0900                	c.addi4spn	s0,sp,144
 57a:	0004                	.2byte	0x4
 57c:	0501                	c.addi	a0,0
 57e:	0320                	c.addi4spn	s0,sp,392
 580:	0901                	c.addi	s2,0
 582:	0004                	.2byte	0x4
}
 584:	0501                	c.addi	a0,0
 586:	0309                	c.addi	t1,2
 588:	0900                	c.addi4spn	s0,sp,144
 58a:	002c                	c.addi4spn	a1,sp,8
 58c:	0501                	c.addi	a0,0
 58e:	04020037          	lui	zero,0x4020
 592:	0301                	c.addi	t1,0
bool isQueueEmpty() {
 594:	0900                	c.addi4spn	s0,sp,144
 596:	0008                	.2byte	0x8
 598:	0501                	c.addi	a0,0
 59a:	003a                	c.slli	zero,0xe
 59c:	0402                	c.slli64	s0
 59e:	0301                	c.addi	t1,0
   return queueItemCount == 0;
 5a0:	0900                	c.addi4spn	s0,sp,144
 5a2:	0018                	.2byte	0x18
 5a4:	0501                	c.addi	a0,0
 5a6:	0044                	c.addi4spn	s1,sp,4
 5a8:	0402                	c.slli64	s0
 5aa:	0301                	c.addi	t1,0
 5ac:	0900                	c.addi4spn	s0,sp,144
 5ae:	0004                	.2byte	0x4
}
 5b0:	0501                	c.addi	a0,0
 5b2:	0029                	c.addi	zero,10
 5b4:	0402                	c.slli64	s0
 5b6:	0301                	c.addi	t1,0
 5b8:	0900                	c.addi4spn	s0,sp,144
 5ba:	0008                	.2byte	0x8
 5bc:	0501                	c.addi	a0,0
 5be:	0311                	c.addi	t1,4
void addVertex(char label) {
 5c0:	0901                	c.addi	s2,0
 5c2:	0004                	.2byte	0x4
 5c4:	0501                	c.addi	a0,0
 5c6:	001f 0402 0302      	.byte	0x1f, 0x00, 0x02, 0x04, 0x02, 0x03
 5cc:	097e                	c.slli	s2,0x1f
 5ce:	0008                	.2byte	0x8
 5d0:	0501                	c.addi	a0,0
 5d2:	0010                	.2byte	0x10
 5d4:	0402                	c.slli64	s0
 5d6:	0301                	c.addi	t1,0
   struct Vertex* vertex = (struct Vertex*) tj_malloc(sizeof(struct Vertex));
 5d8:	0900                	c.addi4spn	s0,sp,144
 5da:	000c                	.2byte	0xc
 5dc:	0501                	c.addi	a0,0
 5de:	0905030b          	.4byte	0x905030b
 5e2:	0010                	.2byte	0x10
 5e4:	0501                	c.addi	a0,0
 5e6:	0301                	c.addi	t1,0
   vertex->label = label;  
 5e8:	0901                	c.addi	s2,0
 5ea:	0004                	.2byte	0x4
 5ec:	0501                	c.addi	a0,0
 5ee:	0902031b          	.4byte	0x902031b
 5f2:	0010                	.2byte	0x10
   vertex->visited = false;     
 5f4:	0501                	c.addi	a0,0
 5f6:	0904030f          	.4byte	0x904030f
 5fa:	0010                	.2byte	0x10
   lstVertices[vertexCount++] = vertex;
 5fc:	0501                	c.addi	a0,0
 5fe:	031c                	c.addi4spn	a5,sp,384
 600:	0900                	c.addi4spn	s0,sp,144
 602:	000c                	.2byte	0xc
 604:	0501                	c.addi	a0,0
 606:	0304                	c.addi4spn	s1,sp,384
 608:	00080903          	lb	s2,0(a6)
 60c:	0501                	c.addi	a0,0
 60e:	0309                	c.addi	t1,2
 610:	000c0903          	lb	s2,0(s8)
 614:	0501                	c.addi	a0,0
 616:	0318                	c.addi4spn	a4,sp,384
 618:	0902                	c.slli64	s2
 61a:	0004                	.2byte	0x4
 61c:	0501                	c.addi	a0,0
 61e:	030c                	c.addi4spn	a1,sp,384
 620:	000c0903          	lb	s2,0(s8)
 624:	0501                	c.addi	a0,0
 626:	0315                	c.addi	t1,5
}
 628:	0901                	c.addi	s2,0
 62a:	0004                	.2byte	0x4
 62c:	0501                	c.addi	a0,0
 62e:	0330                	c.addi4spn	a2,sp,392
 630:	0900                	c.addi4spn	s0,sp,144
 632:	0018                	.2byte	0x18
 634:	0501                	c.addi	a0,0
 636:	030a                	c.slli	t1,0x2
 638:	0901                	c.addi	s2,0
 63a:	0008                	.2byte	0x8
void addEdge(int start,int end) {
 63c:	0501                	c.addi	a0,0
 63e:	0320                	c.addi4spn	s0,sp,392
 640:	097e                	c.slli	s2,0x1f
 642:	000c                	.2byte	0xc
 644:	0501                	c.addi	a0,0
 646:	09000343          	.4byte	0x9000343
 64a:	0010                	.2byte	0x10
 64c:	0501                	c.addi	a0,0
 64e:	097b030b          	.4byte	0x97b030b
   adjMatrix[start][end] = 1;
 652:	000c                	.2byte	0xc
 654:	0501                	c.addi	a0,0
 656:	030a                	c.slli	t1,0x2
 658:	0900                	c.addi4spn	s0,sp,144
 65a:	000c                	.2byte	0xc
 65c:	0301                	c.addi	t1,0
 65e:	090d                	c.addi	s2,3
 660:	000c                	.2byte	0xc
 662:	0501                	c.addi	a0,0
 664:	0304                	c.addi4spn	s1,sp,384
 666:	0900                	c.addi4spn	s0,sp,144
 668:	0004                	.2byte	0x4
 66a:	0501                	c.addi	a0,0
 66c:	0012                	c.slli	zero,0x4
 66e:	0402                	c.slli64	s0
 670:	09010303          	lb	t1,144(sp)
 674:	0004                	.2byte	0x4
 676:	0501                	c.addi	a0,0
 678:	001f 0402 0303      	.byte	0x1f, 0x00, 0x02, 0x04, 0x03, 0x03
 67e:	0900                	c.addi4spn	s0,sp,144
   adjMatrix[end][start] = 1;
 680:	0018                	.2byte	0x18
 682:	0501                	c.addi	a0,0
 684:	001d                	c.addi	zero,7
 686:	0402                	c.slli64	s0
 688:	097f0303          	lb	t1,151(t5)
 68c:	0004                	.2byte	0x4
 68e:	0501                	c.addi	a0,0
 690:	0402000f          	.4byte	0x402000f
 694:	0301                	c.addi	t1,0
 696:	0900                	c.addi4spn	s0,sp,144
 698:	000c                	.2byte	0xc
 69a:	0501                	c.addi	a0,0
 69c:	0301                	c.addi	t1,0
 69e:	00100903          	lb	s2,1(zero) # 1 <crt+0x1>
 6a2:	0501                	c.addi	a0,0
 6a4:	030c                	c.addi4spn	a1,sp,384
 6a6:	0902                	c.slli64	s2
 6a8:	0018                	.2byte	0x18
 6aa:	0501                	c.addi	a0,0
 6ac:	030a                	c.slli	t1,0x2
 6ae:	00100903          	lb	s2,1(zero) # 1 <crt+0x1>
}
 6b2:	0501                	c.addi	a0,0
 6b4:	0304                	c.addi4spn	s1,sp,384
 6b6:	0900                	c.addi4spn	s0,sp,144
 6b8:	0004                	.2byte	0x4
 6ba:	0501                	c.addi	a0,0
 6bc:	030d                	c.addi	t1,3
 6be:	0901                	c.addi	s2,0
int getAdjUnvisitedVertex(int vertexIndex) {
 6c0:	0004                	.2byte	0x4
 6c2:	0501                	c.addi	a0,0
 6c4:	09000307          	.4byte	0x9000307
 6c8:	0004                	.2byte	0x4
 6ca:	0501                	c.addi	a0,0
 6cc:	001a                	c.slli	zero,0x6
 6ce:	0402                	c.slli64	s0
   for(i = 0; i<vertexCount; i++) {
 6d0:	09010303          	lb	t1,144(sp)
 6d4:	0004                	.2byte	0x4
 6d6:	0001                	c.addi	zero,0
      if(adjMatrix[vertexIndex][i] == 1 && lstVertices[i]->visited == false)
 6d8:	0402                	c.slli64	s0
 6da:	097f0303          	lb	t1,151(t5)
 6de:	002c                	c.addi4spn	a1,sp,8
 6e0:	0501                	c.addi	a0,0
 6e2:	04020013          	addi	zero,tp,64 # 40 <crt+0x40>
 6e6:	0301                	c.addi	t1,0
 6e8:	0900                	c.addi4spn	s0,sp,144
 6ea:	000c                	.2byte	0xc
 6ec:	0501                	c.addi	a0,0
 6ee:	04020017          	auipc	zero,0x4020
 6f2:	0302                	c.slli64	t1
 6f4:	097f                	.2byte	0x97f
 6f6:	000c                	.2byte	0xc
 6f8:	0501                	c.addi	a0,0
 6fa:	0010                	.2byte	0x10
 6fc:	0402                	c.slli64	s0
 6fe:	0301                	c.addi	t1,0
 700:	0900                	c.addi4spn	s0,sp,144
 702:	000c                	.2byte	0xc
 704:	0501                	c.addi	a0,0
 706:	0304                	c.addi4spn	s1,sp,384
 708:	0905                	c.addi	s2,1
 70a:	000c                	.2byte	0xc
 70c:	0301                	c.addi	t1,0
 70e:	0901                	c.addi	s2,0
 710:	000c                	.2byte	0xc
 712:	0301                	c.addi	t1,0
 714:	0901                	c.addi	s2,0
 716:	000c                	.2byte	0xc
 718:	0301                	c.addi	t1,0
 71a:	0901                	c.addi	s2,0
 71c:	000c                	.2byte	0xc
 71e:	0301                	c.addi	t1,0
 720:	0901                	c.addi	s2,0
 722:	000c                	.2byte	0xc
 724:	0301                	c.addi	t1,0
 726:	0902                	c.slli64	s2
 728:	000c                	.2byte	0xc
 72a:	0301                	c.addi	t1,0
 72c:	0901                	c.addi	s2,0
 72e:	0010                	.2byte	0x10
 730:	0301                	c.addi	t1,0
 732:	0901                	c.addi	s2,0
         return i;
 734:	0010                	.2byte	0x10
 736:	0301                	c.addi	t1,0
 738:	0901                	c.addi	s2,0
 73a:	0010                	.2byte	0x10
   for(i = 0; i<vertexCount; i++) {
 73c:	0301                	c.addi	t1,0
 73e:	0901                	c.addi	s2,0
 740:	0010                	.2byte	0x10
 742:	0301                	c.addi	t1,0
 744:	0901                	c.addi	s2,0
 746:	0010                	.2byte	0x10
 748:	0301                	c.addi	t1,0
 74a:	00100903          	lb	s2,1(zero) # 1 <crt+0x1>
 74e:	0501                	c.addi	a0,0
 750:	0902030b          	.4byte	0x902030b
 754:	0008                	.2byte	0x8
 756:	0501                	c.addi	a0,0
   return -1;
 758:	0301                	c.addi	t1,0
 75a:	0901                	c.addi	s2,0
}
 75c:	0004                	.2byte	0x4
 75e:	0901                	c.addi	s2,0
 760:	0014                	.2byte	0x14
 762:	0100                	c.addi4spn	s0,sp,128
 764:	01              	Address 0x0000000000000764 is out of bounds.


Disassembly of section .debug_line_str:

00000000 <.debug_line_str>:
	nop
   0:	6d6f682f          	.4byte	0x6d6f682f
	la ra, exit
   4:	2f65                	c.jal	7bc <breadthFirstSearch+0x50>
   6:	7961                	c.lui	s2,0xffff8
   8:	742d616b          	.4byte	0x742d616b
	la sp, _sp
   c:	757a7573          	csrrci	a0,0x757,20
  10:	442f696b          	.4byte	0x442f696b
	mv s0, sp
  14:	6d75636f          	jal	t1,56eea <_sp+0x46eea>
	la gp, __global_pointer$
  18:	6e65                	c.lui	t3,0x19
  1a:	7374                	.2byte	0x7374
  1c:	6f72702f          	.4byte	0x6f72702f
	li tp, 0
  20:	656a                	.2byte	0x656a
  22:	762d7463          	bgeu	s10,sp,78a <breadthFirstSearch+0x1e>
	li t0, 0
  26:	6f2d                	c.lui	t5,0xb
	li t1, 0
  28:	6570                	.2byte	0x6570
  2a:	2d6e                	.2byte	0x2d6e
	li t2, 0
  2c:	6562                	.2byte	0x6562
  2e:	6174                	.2byte	0x6174
	li s1, 0
  30:	462d                	c.li	a2,11
  32:	452d726f          	jal	tp,d7484 <_sp+0xc7484>
	li a0, 0
  36:	37344543          	.4byte	0x37344543
	li a1, 0
  3a:	3030                	.2byte	0x3030
	li a2, 0
  3c:	2f4a                	.2byte	0x2f4a
  3e:	6974706f          	jal	zero,47ed4 <_sp+0x37ed4>
	li a3, 0
  42:	696d                	c.lui	s2,0x1b
	li a4, 0
  44:	617a                	.2byte	0x617a
  46:	6974                	.2byte	0x6974
	li a5, 0
  48:	63006e6f          	jal	t3,6678 <_ebss+0x1b14>
	li a6, 0
  4c:	7472                	.2byte	0x7472
  4e:	732e                	.2byte	0x732e
	li a7, 0
  50:	7400                	.2byte	0x7400
  52:	7365                	c.lui	t1,0xffff9
	li s2, 0
  54:	5f74                	c.lw	a3,124(a4)
  56:	7270                	.2byte	0x7270
	li s3, 0
  58:	2f73676f          	jal	a4,36b4e <_sp+0x26b4e>
	li s4, 0
  5c:	6662                	.2byte	0x6662
  5e:	00632e73          	csrrs	t3,0x6,t1
	li s5, 0
  62:	6574                	.2byte	0x6574
	li s6, 0
  64:	705f7473          	csrrci	s0,0x705,30
	li s7, 0
  68:	6f72                	.2byte	0x6f72
  6a:	2f007367          	.4byte	0x2f007367
	li s8, 0
  6e:	2f74706f          	jal	zero,47b64 <_sp+0x37b64>
	li s9, 0
  72:	6972                	.2byte	0x6972
	li s10, 0
  74:	33766373          	csrrsi	t1,mhpmevent23,12
	li s11, 0
  78:	2f32                	.2byte	0x2f32
  7a:	696c                	.2byte	0x696c
	li t3, 0
  7c:	2f62                	.2byte	0x2f62
  7e:	2f636367          	.4byte	0x2f636367
	li t4, 0
  82:	6972                	.2byte	0x6972
	li t5, 0
  84:	33766373          	csrrsi	t1,mhpmevent23,12
	li t6, 0
  88:	2d32                	.2byte	0x2d32
  8a:	6e75                	c.lui	t3,0x1d
	j main
  8c:	776f6e6b          	.4byte	0x776f6e6b
  90:	2d6e                	.2byte	0x2d6e
  92:	6c65                	c.lui	s8,0x19
  94:	2f66                	.2byte	0x2f66
  96:	3131                	c.jal	fffffca2 <_sp+0xfffefca2>
  98:	312e                	.2byte	0x312e
  9a:	302e                	.2byte	0x302e
  9c:	636e692f          	.4byte	0x636e692f
	la sp, _sp
  a0:	756c                	.2byte	0x756c
  a2:	6564                	.2byte	0x6564
  a4:	2f00                	.2byte	0x2f00
  a6:	2f74706f          	jal	zero,47b9c <_sp+0x37b9c>
	sw a0, -8(sp)
  aa:	6972                	.2byte	0x6972
	nop
  ac:	33766373          	csrrsi	t1,mhpmevent23,12
	wfi
  b0:	2f32                	.2byte	0x2f32
  b2:	6972                	.2byte	0x6972
void tj_free(void *mem) {
  b4:	33766373          	csrrsi	t1,mhpmevent23,12
  b8:	2d32                	.2byte	0x2d32
  ba:	6e75                	c.lui	t3,0x1d
  bc:	776f6e6b          	.4byte	0x776f6e6b
  c0:	2d6e                	.2byte	0x2d6e
  c2:	6c65                	c.lui	s8,0x19
  c4:	2f66                	.2byte	0x2f66
  c6:	6e69                	c.lui	t3,0x1a
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	64756c63          	bltu	a0,t2,720 <getAdjUnvisitedVertex+0x60>
  cc:	0065                	c.addi	zero,25
  ce:	6a74                	.2byte	0x6a74
  d0:	6d5f 6c61 6f6c      	.byte	0x5f, 0x6d, 0x61, 0x6c, 0x6c, 0x6f
  d6:	00682e63          	.4byte	0x682e63
  da:	64647473          	csrrci	s0,0x646,8
  de:	6665                	c.lui	a2,0x19
  e0:	682e                	.2byte	0x682e
  e2:	7300                	.2byte	0x7300
  e4:	7274                	.2byte	0x7274
  e6:	6e69                	c.lui	t3,0x1a
		exit(1);
  e8:	00682e67          	.4byte	0x682e67
  ec:	6c647473          	csrrci	s0,0x6c6,8
  f0:	6269                	c.lui	tp,0x1a
  f2:	682e                	.2byte	0x682e
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
	nop
   0:	001f 0000 0005      	.byte	0x1f, 0x00, 0x00, 0x00, 0x05, 0x00
	la ra, exit
   6:	0401                	c.addi	s0,0
   8:	0000                	c.unimp
   a:	0000                	c.unimp
	la sp, _sp
   c:	0001                	c.addi	zero,0
   e:	0000                	c.unimp
  10:	0c00                	c.addi4spn	s0,sp,528
  12:	0000                	c.unimp
	mv s0, sp
  14:	0000                	c.unimp
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	0600                	c.addi4spn	s0,sp,768
  1a:	0000                	c.unimp
  1c:	5100                	c.lw	s0,32(a0)
  1e:	0000                	c.unimp
	li tp, 0
  20:	0100                	c.addi4spn	s0,sp,128
  22:	aa80                	.2byte	0xaa80
	li t0, 0
  24:	0004                	.2byte	0x4
  26:	0500                	c.addi4spn	s0,sp,640
	li t1, 0
  28:	0100                	c.addi4spn	s0,sp,128
  2a:	1204                	c.addi4spn	s1,sp,288
	li t2, 0
  2c:	0000                	c.unimp
  2e:	1100                	c.addi4spn	s0,sp,160
	li s1, 0
  30:	0211                	c.addi	tp,4 # 1a004 <_sp+0xa004>
  32:	0000                	c.unimp
	li a0, 0
  34:	511d                	c.li	sp,-25
  36:	0000                	c.unimp
	li a1, 0
  38:	0000                	c.unimp
  3a:	0000                	c.unimp
	li a2, 0
  3c:	b400                	.2byte	0xb400
  3e:	0000                	c.unimp
	li a3, 0
  40:	ec00                	.2byte	0xec00
  42:	0008                	.2byte	0x8
	li a4, 0
  44:	2800                	.2byte	0x2800
  46:	0001                	c.addi	zero,0
	li a5, 0
  48:	0100                	c.addi4spn	s0,sp,128
  4a:	0601                	c.addi	a2,0 # 19000 <_sp+0x9000>
	li a6, 0
  4c:	0144                	c.addi4spn	s1,sp,132
  4e:	0000                	c.unimp
	li a7, 0
  50:	0101                	c.addi	sp,0
  52:	4208                	c.lw	a0,0(a2)
	li s2, 0
  54:	0001                	c.addi	zero,0
  56:	0100                	c.addi4spn	s0,sp,128
	li s3, 0
  58:	0502                	c.slli64	a0
  5a:	01f1                	c.addi	gp,28 # 129c <__global_pointer$+0x1c>
	li s4, 0
  5c:	0000                	c.unimp
  5e:	0201                	c.addi	tp,0 # 0 <crt>
	li s5, 0
  60:	00010107          	.4byte	0x10107
	li s6, 0
  64:	0100                	c.addi4spn	s0,sp,128
  66:	0504                	c.addi4spn	s1,sp,640
	li s7, 0
  68:	01c4                	c.addi4spn	s1,sp,196
  6a:	0000                	c.unimp
	li s8, 0
  6c:	0401                	c.addi	s0,0
  6e:	00018407          	.4byte	0x18407
	li s9, 0
  72:	0100                	c.addi4spn	s0,sp,128
	li s10, 0
  74:	0508                	c.addi4spn	a0,sp,640
  76:	000001bf 7f070801 	.8byte	0x7f070801000001bf
	li t3, 0
  7e:	0001                	c.addi	zero,0
	li t4, 0
  80:	1200                	c.addi4spn	s0,sp,288
  82:	0504                	c.addi4spn	s1,sp,640
	li t5, 0
  84:	6e69                	c.lui	t3,0x1a
  86:	0074                	c.addi4spn	a3,sp,12
	li t6, 0
  88:	0401                	c.addi	s0,0
  8a:	00018907          	.4byte	0x18907
	j main
  8e:	0b00                	c.addi4spn	s0,sp,400
  90:	0064                	c.addi4spn	s1,sp,12
  92:	0000                	c.unimp
  94:	6517d103          	lhu	sp,1617(a5)
  98:	0000                	c.unimp
  9a:	0100                	c.addi4spn	s0,sp,128
  9c:	0410                	c.addi4spn	a2,sp,512
  9e:	0205                	c.addi	tp,1 # 1 <crt+0x1>
	la sp, _sp
  a0:	0000                	c.unimp
  a2:	01010413          	addi	s0,sp,16
  a6:	4b08                	c.lw	a0,16(a4)
	sw a0, -8(sp)
  a8:	0001                	c.addi	zero,0
  aa:	0600                	c.addi4spn	s0,sp,768
	nop
  ac:	002d                	c.addi	zero,11
  ae:	0000                	c.unimp
	wfi
  b0:	0099                	c.addi	ra,6
  b2:	0000                	c.unimp
void tj_free(void *mem) {
  b4:	6514                	.2byte	0x6514
  b6:	0000                	c.unimp
  b8:	ff00                	.2byte	0xff00
  ba:	9602003f 01000001 	.8byte	0x10000019602003f
  c2:	161e                	c.slli	a2,0x27
  c4:	0088                	c.addi4spn	a0,sp,64
  c6:	0000                	c.unimp
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	0305                	c.addi	t1,1 # ffff9001 <_sp+0xfffe9001>
  ca:	0b58                	c.addi4spn	a4,sp,404
  cc:	0000                	c.unimp
  ce:	d702                	c.swsp	zero,172(sp)
  d0:	0001                	c.addi	zero,0
  d2:	0100                	c.addi4spn	s0,sp,128
  d4:	0e1f 007f 0000      	.byte	0x1f, 0x0e, 0x7f, 0x00, 0x00, 0x00
  da:	0305                	c.addi	t1,1
  dc:	0aa0                	c.addi4spn	s0,sp,344
  de:	0000                	c.unimp
  e0:	9602                	c.jalr	a2
  e2:	0000                	c.unimp
  e4:	0100                	c.addi4spn	s0,sp,128
  e6:	1520                	c.addi4spn	s0,sp,680
		exit(1);
  e8:	0065                	c.addi	zero,25
  ea:	0000                	c.unimp
  ec:	0305                	c.addi	t1,1
  ee:	0aa4                	c.addi4spn	s1,sp,344
  f0:	0000                	c.unimp
  f2:	5d0c                	c.lw	a1,56(a0)
	bp = (Header *)mem - 1; //point to block header
  f4:	0000                	c.unimp
  f6:	0800                	c.addi4spn	s0,sp,16
  f8:	2201                	c.jal	1f8 <tj_free+0x144>
  fa:	f710                	.2byte	0xf710
  fc:	0000                	c.unimp
  fe:	0700                	c.addi4spn	s0,sp,896
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	0000006b          	.4byte	0x6b
 104:	2301                	c.jal	604 <addVertex+0x44>
 106:	f711                	c.bnez	a4,12 <crt+0x12>
 108:	0000                	c.unimp
 10a:	0000                	c.unimp
 10c:	0000dc07          	.4byte	0xdc07
		if (p >= p->next && (bp > p || bp < p->next))
 110:	0100                	c.addi4spn	s0,sp,128
 112:	0f24                	c.addi4spn	s1,sp,920
 114:	0065                	c.addi	zero,25
 116:	0000                	c.unimp
 118:	0004                	.2byte	0x4
 11a:	cf0a                	c.swsp	sp,156(sp)
 11c:	0000                	c.unimp
 11e:	0b00                	c.addi4spn	s0,sp,400
 120:	0291                	c.addi	t0,4 # a32 <memset+0x92>
 122:	0000                	c.unimp
 124:	2501                	c.jal	724 <getAdjUnvisitedVertex+0x64>
 126:	0000cf03          	lbu	t5,0(ra)
 12a:	0200                	c.addi4spn	s0,sp,256
 12c:	017a                	c.slli	sp,0x1e
 12e:	0000                	c.unimp
 130:	2601                	c.jal	430 <tj_malloc+0x140>
 132:	0000fc0f          	.4byte	0xfc0f
 136:	0500                	c.addi4spn	s0,sp,640
 138:	004b5803          	lhu	a6,4(s6)
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	0200                	c.addi4spn	s0,sp,256
 13e:	0088                	c.addi4spn	a0,sp,64
 140:	0000                	c.unimp
 142:	2701                	c.jal	842 <breadthFirstSearch+0xd6>
 144:	2c10                	.2byte	0x2c10
 146:	0001                	c.addi	zero,0
 148:	0500                	c.addi4spn	s0,sp,640
 14a:	004b6003          	.4byte	0x4b6003
 14e:	0a00                	c.addi4spn	s0,sp,272
 150:	00fc                	c.addi4spn	a5,sp,76
 152:	0000                	c.unimp
 154:	170c                	c.addi4spn	a1,sp,928
 156:	0001                	c.addi	zero,0
 158:	0200                	c.addi4spn	s0,sp,256
 15a:	1002                	c.slli	zero,0x20
 15c:	5908                	c.lw	a0,48(a0)
 15e:	0001                	c.addi	zero,0
 160:	0700                	c.addi4spn	s0,sp,896
 162:	0000028b          	.4byte	0x28b
	if (bp + bp->size == p->next) { //join to upper nbr
 166:	1102                	c.slli	sp,0x20
 168:	8109                	c.srli	a0,0x2
 16a:	0000                	c.unimp
 16c:	0000                	c.unimp
 16e:	00012407          	.4byte	0x12407
 172:	0200                	c.addi4spn	s0,sp,256
 174:	0912                	c.slli	s2,0x4
 176:	0159                	c.addi	sp,22
 178:	0000                	c.unimp
 17a:	0001                	c.addi	zero,0
 17c:	0101                	c.addi	sp,0
 17e:	7002                	.2byte	0x7002
 180:	0000                	c.unimp
 182:	0600                	c.addi4spn	s0,sp,768
		bp->size += p->next->size;
 184:	005e                	c.slli	zero,0x17
 186:	0000                	c.unimp
 188:	0000016f          	jal	sp,188 <tj_free+0xd4>
 18c:	6508                	.2byte	0x6508
 18e:	0000                	c.unimp
 190:	0000                	c.unimp
 192:	b904                	.2byte	0xb904
 194:	0001                	c.addi	zero,0
 196:	1700                	c.addi4spn	s0,sp,928
 198:	6005                	c.lui	zero,0x1
 19a:	0001                	c.addi	zero,0
 19c:	0500                	c.addi4spn	s0,sp,640
 19e:	000acc03          	lbu	s8,0(s5)
 1a2:	0400                	c.addi4spn	s0,sp,512
		bp->next = p->next->next;
 1a4:	000000ab          	.4byte	0xab
 1a8:	0518                	c.addi4spn	a4,sp,640
 1aa:	005e                	c.slli	zero,0x17
 1ac:	0000                	c.unimp
 1ae:	0305                	c.addi	t1,1
 1b0:	0aa8                	c.addi4spn	a0,sp,344
 1b2:	0000                	c.unimp
 1b4:	1e04                	c.addi4spn	s1,sp,816
 1b6:	0001                	c.addi	zero,0
 1b8:	1900                	c.addi4spn	s0,sp,176
 1ba:	5e05                	c.li	t3,-31
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	0000                	c.unimp
 1be:	0500                	c.addi4spn	s0,sp,640
 1c0:	000ac003          	lbu	zero,0(s5)
 1c4:	0400                	c.addi4spn	s0,sp,512
 1c6:	01e2                	c.slli	gp,0x18
 1c8:	0000                	c.unimp
 1ca:	051a                	c.slli	a0,0x6
	if (p + p->size == bp) { //join to lower nbr
 1cc:	005e                	c.slli	zero,0x17
 1ce:	0000                	c.unimp
 1d0:	0305                	c.addi	t1,1
 1d2:	0ac4                	c.addi4spn	s1,sp,340
 1d4:	0000                	c.unimp
 1d6:	c206                	c.swsp	ra,4(sp)
 1d8:	0001                	c.addi	zero,0
 1da:	c200                	c.sw	s0,0(a2)
 1dc:	0001                	c.addi	zero,0
 1de:	0800                	c.addi4spn	s0,sp,16
 1e0:	0065                	c.addi	zero,25
 1e2:	0000                	c.unimp
 1e4:	0a00                	c.addi4spn	s0,sp,272
 1e6:	0131                	c.addi	sp,12
		p->size += bp->size;
 1e8:	0000                	c.unimp
 1ea:	7604                	.2byte	0x7604
 1ec:	0000                	c.unimp
 1ee:	1f00                	c.addi4spn	s0,sp,944
 1f0:	b310                	.2byte	0xb310
 1f2:	0001                	c.addi	zero,0
 1f4:	0500                	c.addi4spn	s0,sp,640
 1f6:	000ae003          	.4byte	0xae003
 1fa:	0600                	c.addi4spn	s0,sp,768
 1fc:	005e                	c.slli	zero,0x17
 1fe:	0000                	c.unimp
 200:	01ec                	c.addi4spn	a1,sp,204
 202:	0000                	c.unimp
		p->next = bp->next;
 204:	6508                	.2byte	0x6508
 206:	0000                	c.unimp
 208:	0800                	c.addi4spn	s0,sp,16
 20a:	0065                	c.addi	zero,25
 20c:	0000                	c.unimp
 20e:	0400                	c.addi4spn	s0,sp,512
 210:	000000f7          	.4byte	0xf7
 214:	0522                	c.slli	a0,0x8
 216:	01d8                	c.addi4spn	a4,sp,196
		p->next = bp; //again, if the free list is just the base
 218:	0000                	c.unimp
 21a:	0305                	c.addi	t1,1
 21c:	0af4                	c.addi4spn	a3,sp,348
 21e:	0000                	c.unimp
 220:	eb04                	.2byte	0xeb04
 222:	0000                	c.unimp
	freep = p;
 224:	2500                	.2byte	0x2500
 226:	5e05                	c.li	t3,-31
 228:	0000                	c.unimp
 22a:	0500                	c.addi4spn	s0,sp,640
 22c:	000ac803          	lbu	a6,0(s5)
}
 230:	1500                	c.addi4spn	s0,sp,672
 232:	0150                	c.addi4spn	a2,sp,132
 234:	0000                	c.unimp
 236:	2104                	.2byte	0x2104
 238:	7f09                	c.lui	t5,0xfffe2
 23a:	0000                	c.unimp
 23c:	2e00                	.2byte	0x2e00
 23e:	0002                	c.slli64	zero
 240:	0900                	c.addi4spn	s0,sp,144
 242:	007f                	.2byte	0x7f
static Header* getmoremem(unsigned int total_size) {
 244:	0000                	c.unimp
 246:	5e09                	c.li	t3,-30
 248:	0000                	c.unimp
 24a:	0900                	c.addi4spn	s0,sp,144
 24c:	006c                	c.addi4spn	a1,sp,12
 24e:	0000                	c.unimp
 250:	1600                	c.addi4spn	s0,sp,800
 252:	00e6                	c.slli	ra,0x19
 254:	0000                	c.unimp
 256:	5d05                	c.li	s10,-31
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 258:	4006                	.2byte	0x4006
 25a:	0002                	c.slli64	zero
 25c:	0900                	c.addi4spn	s0,sp,144
 25e:	005e                	c.slli	zero,0x17
 260:	0000                	c.unimp
 262:	1700                	c.addi4spn	s0,sp,928
 264:	0162                	c.slli	sp,0x18
 266:	0000                	c.unimp
 268:	6f02                	.2byte	0x6f02
 26a:	5e05                	c.li	t3,-31
 26c:	0000                	c.unimp
 26e:	6800                	.2byte	0x6800
	Header* up = (Header *)next_index;
 270:	0008                	.2byte	0x8
 272:	3800                	.2byte	0x3800
 274:	0001                	c.addi	zero,0
 276:	0100                	c.addi4spn	s0,sp,128
 278:	759c                	.2byte	0x759c
 27a:	0002                	c.slli64	zero
	next_index += total_size; //allocate the block
 27c:	0300                	c.addi4spn	s0,sp,384
 27e:	0069                	c.addi	zero,26
 280:	7002                	.2byte	0x7002
 282:	5e08                	c.lw	a0,56(a2)
 284:	0000                	c.unimp
 286:	0200                	c.addi4spn	s0,sp,256
 288:	6c91                	c.lui	s9,0x4
 28a:	02006a03          	.4byte	0x2006a03
 28e:	0b70                	c.addi4spn	a2,sp,412
 290:	005e                	c.slli	zero,0x17
 292:	0000                	c.unimp
	avail_mem -= total_size; //deduct from avail mem;
 294:	9102                	c.jalr	sp
 296:	0068                	c.addi4spn	a0,sp,12
 298:	b818                	.2byte	0xb818
 29a:	0000                	c.unimp
 29c:	0200                	c.addi4spn	s0,sp,256
 29e:	076c0653          	.4byte	0x76c0653
 2a2:	0000                	c.unimp
 2a4:	00fc                	c.addi4spn	a5,sp,76
 2a6:	0000                	c.unimp
 2a8:	9c01                	.2byte	0x9c01
 2aa:	02c1                	c.addi	t0,16
	up->size = total_size - sizeof(Header); //set the size right
 2ac:	0000                	c.unimp
 2ae:	02006903          	.4byte	0x2006903
 2b2:	0854                	c.addi4spn	a3,sp,20
 2b4:	005e                	c.slli	zero,0x17
 2b6:	0000                	c.unimp
 2b8:	9102                	c.jalr	sp
 2ba:	026c                	c.addi4spn	a1,sp,268
	tj_free((void *)(++up)); //append the new block to the free list first
 2bc:	0000019b          	.4byte	0x19b
 2c0:	5b02                	c.lwsp	s6,32(sp)
 2c2:	5e08                	c.lw	a0,56(a2)
 2c4:	0000                	c.unimp
 2c6:	0200                	c.addi4spn	s0,sp,256
 2c8:	6491                	c.lui	s1,0x4
 2ca:	a019                	c.j	2d0 <getmoremem+0x8c>
 2cc:	58000007          	.4byte	0x58000007
 2d0:	0000                	c.unimp
 2d2:	0200                	c.addi4spn	s0,sp,256
	return freep;
 2d4:	000000cb          	.4byte	0xcb
 2d8:	5f02                	c.lwsp	t5,32(sp)
 2da:	00005e0b          	.4byte	0x5e0b
}
 2de:	0200                	c.addi4spn	s0,sp,256
 2e0:	6891                	c.lui	a7,0x4
 2e2:	0000                	c.unimp
 2e4:	2c1a                	.2byte	0x2c1a
 2e6:	0001                	c.addi	zero,0
 2e8:	0200                	c.addi4spn	s0,sp,256
 2ea:	0548                	c.addi4spn	a0,sp,644
 2ec:	005e                	c.slli	zero,0x17
 2ee:	0000                	c.unimp
void *tj_malloc(unsigned int size) {
 2f0:	06c0                	c.addi4spn	s0,sp,836
 2f2:	0000                	c.unimp
 2f4:	00ac                	c.addi4spn	a1,sp,72
 2f6:	0000                	c.unimp
 2f8:	9c01                	.2byte	0x9c01
 2fa:	02f8                	c.addi4spn	a4,sp,332
 2fc:	0000                	c.unimp
 2fe:	9805                	c.andi	s0,-31
 300:	0002                	c.slli64	zero
 302:	0200                	c.addi4spn	s0,sp,256
	if (size > sizeof(heap)) return NULL;
 304:	1f48                	c.addi4spn	a0,sp,948
 306:	005e                	c.slli	zero,0x17
 308:	0000                	c.unimp
 30a:	9102                	c.jalr	sp
 30c:	035c                	c.addi4spn	a5,sp,388
 30e:	0069                	c.addi	zero,26
 310:	4902                	c.lwsp	s2,0(sp)
 312:	5e08                	c.lw	a0,56(a2)
 314:	0000                	c.unimp
 316:	0200                	c.addi4spn	s0,sp,256
	if ((size & 3) != 0) {
 318:	6c91                	c.lui	s9,0x4
 31a:	0d00                	c.addi4spn	s0,sp,656
 31c:	00b0                	c.addi4spn	a2,sp,72
 31e:	0000                	c.unimp
 320:	3c42                	.2byte	0x3c42
 322:	0006                	c.slli	zero,0x1
		size = size + 4 - (size & 3);
 324:	8400                	.2byte	0x8400
 326:	0000                	c.unimp
 328:	0100                	c.addi4spn	s0,sp,128
 32a:	2b9c                	.2byte	0x2b9c
 32c:	05000003          	lb	zero,80(zero) # 50 <crt+0x50>
 330:	0082                	c.slli64	ra
 332:	0000                	c.unimp
	unsigned int total_size = size + sizeof(Header); //need to include the header size as well
 334:	4202                	c.lwsp	tp,0(sp)
 336:	5e12                	c.lwsp	t3,36(sp)
 338:	0000                	c.unimp
 33a:	0200                	c.addi4spn	s0,sp,256
 33c:	6c91                	c.lui	s9,0x4
 33e:	650e                	.2byte	0x650e
	prevp = freep;
 340:	646e                	.2byte	0x646e
 342:	0200                	c.addi4spn	s0,sp,256
 344:	1c42                	c.slli	s8,0x30
 346:	005e                	c.slli	zero,0x17
 348:	0000                	c.unimp
 34a:	9102                	c.jalr	sp
	if (prevp == NULL) {
 34c:	0068                	c.addi4spn	a0,sp,12
 34e:	0001141b          	.4byte	0x1141b
 352:	0200                	c.addi4spn	s0,sp,256
		prevp = &base;
 354:	063a                	c.slli	a2,0xe
 356:	05c0                	c.addi4spn	s0,sp,708
 358:	0000                	c.unimp
 35a:	007c                	c.addi4spn	a5,sp,12
 35c:	0000                	c.unimp
 35e:	9c01                	.2byte	0x9c01
		freep = prevp;
 360:	0360                	c.addi4spn	s0,sp,396
 362:	0000                	c.unimp
 364:	8b05                	c.andi	a4,1
 366:	0002                	c.slli64	zero
 368:	0200                	c.addi4spn	s0,sp,256
 36a:	153a                	c.slli	a0,0x2e
		base.next = freep;
 36c:	0081                	c.addi	ra,0
 36e:	0000                	c.unimp
 370:	9102                	c.jalr	sp
 372:	025f 01b2 0000      	.byte	0x5f, 0x02, 0xb2, 0x01, 0x00, 0x00
 378:	3b02                	.2byte	0x3b02
 37a:	0001c213          	xori	tp,gp,0
 37e:	0200                	c.addi4spn	s0,sp,256
		base.size = 0;
 380:	6c91                	c.lui	s9,0x4
 382:	0f00                	c.addi4spn	s0,sp,912
 384:	00000167          	jalr	sp,0(zero) # 0 <crt>
 388:	01590633          	add	a2,s2,s5
	for (p = prevp->next; ;prevp = p, p = p->next) {
 38c:	0000                	c.unimp
 38e:	0594                	c.addi4spn	a3,sp,704
 390:	0000                	c.unimp
 392:	002c                	c.addi4spn	a1,sp,8
 394:	0000                	c.unimp
 396:	9c01                	.2byte	0x9c01
		if (p->size >= size) { //big enough
 398:	0001570f          	.4byte	0x1570f
 39c:	2e00                	.2byte	0x2e00
 39e:	5e05                	c.li	t3,-31
 3a0:	0000                	c.unimp
 3a2:	3c00                	.2byte	0x3c00
 3a4:	0005                	c.addi	zero,1
 3a6:	5800                	c.lw	s0,48(s0)
			if (p->size == size) // exact size
 3a8:	0000                	c.unimp
 3aa:	0100                	c.addi4spn	s0,sp,128
 3ac:	0d9c                	c.addi4spn	a5,sp,720
 3ae:	000001ab          	.4byte	0x1ab
 3b2:	d429                	c.beqz	s0,2fc <tj_malloc+0xc>
 3b4:	0004                	.2byte	0x4
 3b6:	6800                	.2byte	0x6800
				prevp->next = p->next; // just return that block
 3b8:	0000                	c.unimp
 3ba:	0100                	c.addi4spn	s0,sp,128
 3bc:	ae9c                	.2byte	0xae9c
 3be:	05000003          	lb	zero,80(zero) # 50 <crt+0x50>
 3c2:	00e1                	c.addi	ra,24
 3c4:	0000                	c.unimp
 3c6:	2902                	.2byte	0x2902
 3c8:	5e11                	c.li	t3,-28
 3ca:	0000                	c.unimp
				p->size -= total_size; //break up the block
 3cc:	0200                	c.addi4spn	s0,sp,256
 3ce:	6c91                	c.lui	s9,0x4
 3d0:	1000                	c.addi4spn	s0,sp,32
 3d2:	01cd                	c.addi	gp,19 # 1293 <__global_pointer$+0x13>
 3d4:	0000                	c.unimp
 3d6:	7f84                	.2byte	0x7f84
 3d8:	0000                	c.unimp
 3da:	8400                	.2byte	0x8400
 3dc:	0004                	.2byte	0x4
 3de:	5000                	c.lw	s0,32(s0)
 3e0:	0000                	c.unimp
 3e2:	0100                	c.addi4spn	s0,sp,128
				p += p->size;
 3e4:	e59c                	.2byte	0xe59c
 3e6:	05000003          	lb	zero,80(zero) # 50 <crt+0x50>
 3ea:	00dc                	c.addi4spn	a5,sp,68
 3ec:	0000                	c.unimp
 3ee:	8401                	c.srai64	s0
 3f0:	651e                	.2byte	0x651e
 3f2:	0000                	c.unimp
 3f4:	0200                	c.addi4spn	s0,sp,256
 3f6:	5c91                	c.li	s9,-28
 3f8:	6d656d03          	.4byte	0x6d656d03
				p->size = size;
 3fc:	0100                	c.addi4spn	s0,sp,128
 3fe:	0885                	c.addi	a7,1 # 4001 <__global_pointer$+0x2d81>
 400:	007f                	.2byte	0x7f
 402:	0000                	c.unimp
 404:	9102                	c.jalr	sp
 406:	006c                	c.addi4spn	a1,sp,12
			freep = prevp;
 408:	fb10                	.2byte	0xfb10
 40a:	0001                	c.addi	zero,0
 40c:	5800                	c.lw	s0,48(s0)
 40e:	007f                	.2byte	0x7f
 410:	0000                	c.unimp
 412:	02f0                	c.addi4spn	a2,sp,332
			return (void *)(++p);
 414:	0000                	c.unimp
 416:	0194                	c.addi4spn	a3,sp,192
 418:	0000                	c.unimp
 41a:	9c01                	.2byte	0x9c01
 41c:	0438                	c.addi4spn	a4,sp,520
 41e:	0000                	c.unimp
 420:	dc05                	c.beqz	s0,358 <tj_malloc+0x68>
 422:	0000                	c.unimp
 424:	0100                	c.addi4spn	s0,sp,128
 426:	1e58                	c.addi4spn	a4,sp,820
		if (p == freep) //wrapped around free list
 428:	0065                	c.addi	zero,25
 42a:	0000                	c.unimp
 42c:	9102                	c.jalr	sp
 42e:	035c                	c.addi4spn	a5,sp,388
 430:	0070                	c.addi4spn	a2,sp,12
 432:	6201                	.2byte	0x6201
 434:	2c0a                	.2byte	0x2c0a
 436:	0001                	c.addi	zero,0
			if ((p = getmoremem(total_size)) == NULL) //if the heap runs out
 438:	0200                	c.addi4spn	s0,sp,256
 43a:	6c91                	c.lui	s9,0x4
 43c:	7402                	.2byte	0x7402
 43e:	0001                	c.addi	zero,0
 440:	0100                	c.addi4spn	s0,sp,128
 442:	0e62                	c.slli	t3,0x18
 444:	012c                	c.addi4spn	a1,sp,136
 446:	0000                	c.unimp
 448:	9102                	c.jalr	sp
 44a:	0268                	c.addi4spn	a0,sp,268
 44c:	00d6                	c.slli	ra,0x15
 44e:	0000                	c.unimp
				return NULL; //well, you got nothing left, gg
 450:	6401                	.2byte	0x6401
 452:	0000650f          	.4byte	0x650f
 456:	0200                	c.addi4spn	s0,sp,256
	for (p = prevp->next; ;prevp = p, p = p->next) {
 458:	6491                	c.lui	s1,0x4
 45a:	1c00                	c.addi4spn	s0,sp,560
 45c:	00a0                	c.addi4spn	s0,sp,72
 45e:	0000                	c.unimp
 460:	4e01                	c.li	t3,0
 462:	2c10                	.2byte	0x2c10
 464:	0001                	c.addi	zero,0
 466:	4400                	c.lw	s0,8(s0)
 468:	0002                	c.slli64	zero
 46a:	ac00                	.2byte	0xac00
		if (p->size >= size) { //big enough
 46c:	0000                	c.unimp
 46e:	0100                	c.addi4spn	s0,sp,128
}
 470:	709c                	.2byte	0x709c
 472:	0004                	.2byte	0x4
 474:	0500                	c.addi4spn	s0,sp,640
 476:	00d6                	c.slli	ra,0x15
 478:	0000                	c.unimp
 47a:	4e01                	c.li	t3,0
 47c:	6528                	.2byte	0x6528
 47e:	0000                	c.unimp
 480:	0200                	c.addi4spn	s0,sp,256
 482:	5c91                	c.li	s9,-28
void *tj_calloc(unsigned int size) {
 484:	00707503          	.4byte	0x707503
 488:	5001                	c.li	zero,-32
 48a:	2c0a                	.2byte	0x2c0a
 48c:	0001                	c.addi	zero,0
 48e:	0200                	c.addi4spn	s0,sp,256
 490:	6c91                	c.lui	s9,0x4
 492:	1d00                	c.addi4spn	s0,sp,688
 494:	008e                	c.slli	ra,0x3
 496:	0000                	c.unimp
	void *mem = tj_malloc(size);
 498:	2a01                	c.jal	5a8 <isQueueEmpty+0x14>
 49a:	b406                	.2byte	0xb406
 49c:	0000                	c.unimp
 49e:	9000                	.2byte	0x9000
 4a0:	0001                	c.addi	zero,0
 4a2:	0100                	c.addi4spn	s0,sp,128
 4a4:	0e9c                	c.addi4spn	a5,sp,848
 4a6:	656d                	c.lui	a0,0x1b
	memset(mem, 0, size);
 4a8:	006d                	c.addi	zero,27
 4aa:	2a01                	c.jal	5ba <isQueueEmpty+0x26>
 4ac:	7f14                	.2byte	0x7f14
 4ae:	0000                	c.unimp
 4b0:	0200                	c.addi4spn	s0,sp,256
 4b2:	5c91                	c.li	s9,-28
 4b4:	00706203          	.4byte	0x706203
 4b8:	3001                	c.jal	fffffcb8 <_sp+0xfffefcb8>
 4ba:	2c0a                	.2byte	0x2c0a
	return mem;
 4bc:	0001                	c.addi	zero,0
 4be:	0200                	c.addi4spn	s0,sp,256
}
 4c0:	6891                	c.lui	a7,0x4
 4c2:	01007003          	.4byte	0x1007003
 4c6:	0f30                	c.addi4spn	a2,sp,920
 4c8:	012c                	c.addi4spn	a1,sp,136
 4ca:	0000                	c.unimp
 4cc:	9102                	c.jalr	sp
 4ce:	006c                	c.addi4spn	a1,sp,12
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
	nop
   0:	1101                	c.addi	sp,-32
   2:	1000                	c.addi4spn	s0,sp,32
	la ra, exit
   4:	03175517          	auipc	a0,0x3175
   8:	1b0e                	c.slli	s6,0x23
   a:	250e                	.2byte	0x250e
	la sp, _sp
   c:	130e                	c.slli	t1,0x23
   e:	0005                	c.addi	zero,1
  10:	0000                	c.unimp
  12:	2401                	c.jal	212 <tj_free+0x15e>
	mv s0, sp
  14:	0b00                	c.addi4spn	s0,sp,400
  16:	030b3e0b          	.4byte	0x30b3e0b
	la gp, __global_pointer$
  1a:	000e                	c.slli	zero,0x3
  1c:	0200                	c.addi4spn	s0,sp,256
  1e:	0034                	c.addi4spn	a3,sp,8
	li tp, 0
  20:	0b3a0e03          	lb	t3,179(s4)
	li t0, 0
  24:	0b390b3b          	.4byte	0xb390b3b
	li t1, 0
  28:	1349                	c.addi	t1,-14
  2a:	1802                	c.slli	a6,0x20
	li t2, 0
  2c:	0000                	c.unimp
  2e:	03003403          	.4byte	0x3003403
	li s1, 0
  32:	3a08                	.2byte	0x3a08
	li a0, 0
  34:	390b3b0b          	.4byte	0x390b3b0b
	li a1, 0
  38:	0213490b          	.4byte	0x213490b
	li a2, 0
  3c:	0018                	.2byte	0x18
  3e:	0400                	c.addi4spn	s0,sp,512
	li a3, 0
  40:	0034                	c.addi4spn	a3,sp,8
  42:	213a0e03          	lb	t3,531(s4)
	li a4, 0
  46:	3b02                	.2byte	0x3b02
	li a5, 0
  48:	490b390b          	.4byte	0x490b390b
	li a6, 0
  4c:	02193f13          	sltiu	t5,s2,33
	li a7, 0
  50:	0018                	.2byte	0x18
  52:	0500                	c.addi4spn	s0,sp,640
	li s2, 0
  54:	0005                	c.addi	zero,1
  56:	0b3a0e03          	lb	t3,179(s4)
	li s3, 0
  5a:	0b390b3b          	.4byte	0xb390b3b
	li s4, 0
  5e:	1349                	c.addi	t1,-14
	li s5, 0
  60:	1802                	c.slli	a6,0x20
  62:	0000                	c.unimp
	li s6, 0
  64:	0106                	c.slli	sp,0x1
  66:	4901                	c.li	s2,0
	li s7, 0
  68:	00130113          	addi	sp,t1,1
	li s8, 0
  6c:	0700                	c.addi4spn	s0,sp,896
  6e:	000d                	c.addi	zero,3
	li s9, 0
  70:	0b3a0e03          	lb	t3,179(s4)
	li s10, 0
  74:	0b390b3b          	.4byte	0xb390b3b
	li s11, 0
  78:	1349                	c.addi	t1,-14
  7a:	0b38                	c.addi4spn	a4,sp,408
	li t3, 0
  7c:	0000                	c.unimp
  7e:	2108                	.2byte	0x2108
	li t4, 0
  80:	4900                	c.lw	s0,16(a0)
  82:	04212f13          	slti	t5,sp,66
	li t5, 0
  86:	0000                	c.unimp
	li t6, 0
  88:	0509                	c.addi	a0,2 # 3175006 <_sp+0x3165006>
  8a:	4900                	c.lw	s0,16(a0)
	j main
  8c:	0a000013          	addi	zero,zero,160
  90:	210b000f          	.4byte	0x210b000f
  94:	4904                	c.lw	s1,16(a0)
  96:	0b000013          	addi	zero,zero,176
  9a:	0016                	c.slli	zero,0x5
  9c:	0b3a0e03          	lb	t3,179(s4)
	la sp, _sp
  a0:	0b390b3b          	.4byte	0xb390b3b
  a4:	1349                	c.addi	t1,-14
  a6:	0000                	c.unimp
	sw a0, -8(sp)
  a8:	130c                	c.addi4spn	a1,sp,416
  aa:	0301                	c.addi	t1,0
	nop
  ac:	0b0e                	c.slli	s6,0x3
  ae:	3b0b3a0b          	.4byte	0x3b0b3a0b
	wfi
  b2:	010b390b          	.4byte	0x10b390b
void tj_free(void *mem) {
  b6:	0d000013          	addi	zero,zero,208
  ba:	012e                	c.slli	sp,0xb
  bc:	0e03193f 3b02213a 	.8byte	0x3b02213a0e03193f
  c4:	0621390b          	.4byte	0x621390b
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	01111927          	.4byte	0x1111927
  cc:	0612                	c.slli	a2,0x4
  ce:	1840                	c.addi4spn	s0,sp,52
  d0:	197a                	c.slli	s2,0x3e
  d2:	1301                	c.addi	t1,-32
  d4:	0000                	c.unimp
  d6:	050e                	c.slli	a0,0x3
  d8:	0300                	c.addi4spn	s0,sp,384
  da:	3a08                	.2byte	0x3a08
  dc:	390b3b0b          	.4byte	0x390b3b0b
  e0:	0213490b          	.4byte	0x213490b
  e4:	0018                	.2byte	0x18
  e6:	0f00                	c.addi4spn	s0,sp,912
		exit(1);
  e8:	002e                	c.slli	zero,0xb
  ea:	0e03193f 3b02213a 	.8byte	0x3b02213a0e03193f
  f2:	490b390b          	.4byte	0x490b390b
	bp = (Header *)mem - 1; //point to block header
  f6:	12011113          	.4byte	0x12011113
  fa:	4006                	.2byte	0x4006
  fc:	7a18                	.2byte	0x7a18
  fe:	0019                	c.addi	zero,6
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	1000                	c.addi4spn	s0,sp,32
 102:	012e                	c.slli	sp,0xb
 104:	0e03193f 3b01213a 	.8byte	0x3b01213a0e03193f
 10c:	0721390b          	.4byte	0x721390b
		if (p >= p->next && (bp > p || bp < p->next))
 110:	13491927          	.4byte	0x13491927
 114:	0111                	c.addi	sp,4
 116:	0612                	c.slli	a2,0x4
 118:	1840                	c.addi4spn	s0,sp,52
 11a:	197c                	c.addi4spn	a5,sp,188
 11c:	1301                	c.addi	t1,-32
 11e:	0000                	c.unimp
 120:	1111                	c.addi	sp,-28
 122:	2501                	c.jal	722 <getAdjUnvisitedVertex+0x62>
 124:	130e                	c.slli	t1,0x23
 126:	1b1f030b          	.4byte	0x1b1f030b
 12a:	111f 1201 1006      	.byte	0x1f, 0x11, 0x01, 0x12, 0x06, 0x10
 130:	12000017          	auipc	zero,0x12000
 134:	0024                	c.addi4spn	s1,sp,8
 136:	0b3e0b0b          	.4byte	0xb3e0b0b
 13a:	00000803          	lb	a6,0(zero) # 0 <crt>
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13e:	0b000f13          	addi	t5,zero,176
 142:	1400000b          	.4byte	0x1400000b
 146:	0021                	c.addi	zero,8
 148:	1349                	c.addi	t1,-14
 14a:	0000052f          	.4byte	0x52f
 14e:	2e15                	c.jal	482 <tj_malloc+0x192>
 150:	3f01                	c.jal	60 <crt+0x60>
 152:	0319                	c.addi	t1,6
 154:	3a0e                	.2byte	0x3a0e
 156:	390b3b0b          	.4byte	0x390b3b0b
 15a:	4919270b          	.4byte	0x4919270b
 15e:	01193c13          	sltiu	s8,s2,17
 162:	16000013          	addi	zero,zero,352
	if (bp + bp->size == p->next) { //join to upper nbr
 166:	012e                	c.slli	sp,0xb
 168:	0e03193f 0b3b0b3a 	.8byte	0xb3b0b3a0e03193f
 170:	0b39                	c.addi	s6,14
 172:	01871927          	.4byte	0x1871927
 176:	3c19                	c.jal	fffffb8c <_sp+0xfffefb8c>
 178:	0119                	c.addi	sp,6
 17a:	17000013          	addi	zero,zero,368
 17e:	012e                	c.slli	sp,0xb
 180:	0e03193f 0b3b0b3a 	.8byte	0xb3b0b3a0e03193f
		bp->size += p->next->size;
 188:	0b39                	c.addi	s6,14
 18a:	1349                	c.addi	t1,-14
 18c:	0111                	c.addi	sp,4
 18e:	0612                	c.slli	a2,0x4
 190:	1840                	c.addi4spn	s0,sp,52
 192:	197c                	c.addi4spn	a5,sp,188
 194:	1301                	c.addi	t1,-32
 196:	0000                	c.unimp
 198:	2e18                	.2byte	0x2e18
 19a:	3f01                	c.jal	aa <exit+0xa>
 19c:	0319                	c.addi	t1,6
 19e:	3a0e                	.2byte	0x3a0e
 1a0:	390b3b0b          	.4byte	0x390b3b0b
		bp->next = p->next->next;
 1a4:	1201110b          	.4byte	0x1201110b
 1a8:	4006                	.2byte	0x4006
 1aa:	7c18                	.2byte	0x7c18
 1ac:	0119                	c.addi	sp,6
 1ae:	19000013          	addi	zero,zero,400
 1b2:	0111010b          	.4byte	0x111010b
 1b6:	0612                	c.slli	a2,0x4
 1b8:	0000                	c.unimp
 1ba:	2e1a                	.2byte	0x2e1a
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	3f01                	c.jal	cc <tj_free+0x18>
 1be:	0319                	c.addi	t1,6
 1c0:	3a0e                	.2byte	0x3a0e
 1c2:	390b3b0b          	.4byte	0x390b3b0b
 1c6:	4919270b          	.4byte	0x4919270b
 1ca:	12011113          	.4byte	0x12011113
	if (p + p->size == bp) { //join to lower nbr
 1ce:	4006                	.2byte	0x4006
 1d0:	7a18                	.2byte	0x7a18
 1d2:	0119                	c.addi	sp,6
 1d4:	1b000013          	addi	zero,zero,432
 1d8:	012e                	c.slli	sp,0xb
 1da:	0e03193f 0b3b0b3a 	.8byte	0xb3b0b3a0e03193f
 1e2:	0b39                	c.addi	s6,14
 1e4:	01111927          	.4byte	0x1111927
		p->size += bp->size;
 1e8:	0612                	c.slli	a2,0x4
 1ea:	1840                	c.addi4spn	s0,sp,52
 1ec:	197c                	c.addi4spn	a5,sp,188
 1ee:	1301                	c.addi	t1,-32
 1f0:	0000                	c.unimp
 1f2:	2e1c                	.2byte	0x2e1c
 1f4:	0301                	c.addi	t1,0
 1f6:	3a0e                	.2byte	0x3a0e
 1f8:	390b3b0b          	.4byte	0x390b3b0b
 1fc:	4919270b          	.4byte	0x4919270b
 200:	12011113          	.4byte	0x12011113
		p->next = bp->next;
 204:	4006                	.2byte	0x4006
 206:	7c18                	.2byte	0x7c18
 208:	0119                	c.addi	sp,6
 20a:	1d000013          	addi	zero,zero,464
 20e:	012e                	c.slli	sp,0xb
 210:	0e03193f 0b3b0b3a 	.8byte	0xb3b0b3a0e03193f
		p->next = bp; //again, if the free list is just the base
 218:	0b39                	c.addi	s6,14
 21a:	01111927          	.4byte	0x1111927
 21e:	0612                	c.slli	a2,0x4
 220:	1840                	c.addi4spn	s0,sp,52
 222:	197c                	c.addi4spn	a5,sp,188
	freep = p;
 224:	0000                	c.unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
	nop
   0:	0024                	c.addi4spn	s1,sp,8
   2:	0000                	c.unimp
	la ra, exit
   4:	0002                	c.slli64	zero
   6:	0000                	c.unimp
   8:	0000                	c.unimp
   a:	0004                	.2byte	0x4
	...
	mv s0, sp
  14:	0090                	c.addi4spn	a2,sp,64
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	00a0                	c.addi4spn	s0,sp,72
  1a:	0000                	c.unimp
  1c:	0014                	.2byte	0x14
	...
	li t0, 0
  26:	0000                	c.unimp
	li t1, 0
  28:	001c                	.2byte	0x1c
  2a:	0000                	c.unimp
	li t2, 0
  2c:	0002                	c.slli64	zero
  2e:	00000023          	sb	zero,0(zero) # 0 <crt>
	li s1, 0
  32:	0004                	.2byte	0x4
	li a0, 0
  34:	0000                	c.unimp
  36:	0000                	c.unimp
	li a1, 0
  38:	00b4                	c.addi4spn	a3,sp,72
  3a:	0000                	c.unimp
	li a2, 0
  3c:	08ec                	c.addi4spn	a1,sp,92
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
	nop
   0:	2e747263          	bgeu	s0,t2,2e4 <getmoremem+0xa0>
	la ra, exit
   4:	682f0073          	.4byte	0x682f0073
   8:	2f656d6f          	jal	s10,562fe <_sp+0x462fe>
	la sp, _sp
   c:	7961                	c.lui	s2,0xffff8
   e:	742d616b          	.4byte	0x742d616b
  12:	757a7573          	csrrci	a0,0x757,20
	mv s0, sp
  16:	442f696b          	.4byte	0x442f696b
	la gp, __global_pointer$
  1a:	6d75636f          	jal	t1,56ef0 <_sp+0x46ef0>
  1e:	6e65                	c.lui	t3,0x19
	li tp, 0
  20:	7374                	.2byte	0x7374
  22:	6f72702f          	.4byte	0x6f72702f
	li t0, 0
  26:	656a                	.2byte	0x656a
	li t1, 0
  28:	762d7463          	bgeu	s10,sp,790 <breadthFirstSearch+0x24>
	li t2, 0
  2c:	6f2d                	c.lui	t5,0xb
  2e:	6570                	.2byte	0x6570
	li s1, 0
  30:	2d6e                	.2byte	0x2d6e
  32:	6562                	.2byte	0x6562
	li a0, 0
  34:	6174                	.2byte	0x6174
  36:	462d                	c.li	a2,11
	li a1, 0
  38:	452d726f          	jal	tp,d748a <_sp+0xc748a>
	li a2, 0
  3c:	37344543          	.4byte	0x37344543
	li a3, 0
  40:	3030                	.2byte	0x3030
  42:	2f4a                	.2byte	0x2f4a
	li a4, 0
  44:	6974706f          	jal	zero,47eda <_sp+0x37eda>
	li a5, 0
  48:	696d                	c.lui	s2,0x1b
  4a:	617a                	.2byte	0x617a
	li a6, 0
  4c:	6974                	.2byte	0x6974
  4e:	47006e6f          	jal	t3,64be <_ebss+0x195a>
	li a7, 0
  52:	554e                	c.lwsp	a0,240(sp)
	li s2, 0
  54:	4120                	c.lw	s0,64(a0)
  56:	2e322053          	.4byte	0x2e322053
	li s3, 0
  5a:	68003833          	.4byte	0x68003833
	li s4, 0
  5e:	6165                	c.addi16sp	sp,112
	li s5, 0
  60:	6564                	.2byte	0x6564
  62:	0072                	c.slli	zero,0x1c
	li s6, 0
  64:	657a6973          	csrrsi	s2,0x657,20
	li s7, 0
  68:	745f 6e00 7865      	.byte	0x5f, 0x74, 0x00, 0x6e, 0x65, 0x78
	li s8, 0
  6e:	0074                	c.addi4spn	a3,sp,12
	li s9, 0
  70:	425f 6f6f 006c      	.byte	0x5f, 0x42, 0x6f, 0x6f, 0x6c, 0x00
	li s10, 0
  76:	736c                	.2byte	0x736c
	li s11, 0
  78:	5674                	c.lw	a3,108(a2)
  7a:	7265                	c.lui	tp,0xffff9
	li t3, 0
  7c:	6974                	.2byte	0x6974
  7e:	00736563          	bltu	t1,t2,88 <crt+0x88>
	li t4, 0
  82:	72617473          	csrrci	s0,0x726,2
	li t5, 0
  86:	0074                	c.addi4spn	a3,sp,12
	li t6, 0
  88:	7266                	.2byte	0x7266
  8a:	6565                	c.lui	a0,0x19
	j main
  8c:	0070                	c.addi4spn	a2,sp,12
  8e:	6a74                	.2byte	0x6a74
  90:	665f 6572 0065      	.byte	0x5f, 0x66, 0x72, 0x65, 0x65, 0x00
  96:	7661                	c.lui	a2,0xffff8
  98:	6961                	c.lui	s2,0x18
  9a:	5f6c                	c.lw	a1,124(a4)
  9c:	656d                	c.lui	a0,0x1b
  9e:	006d                	c.addi	zero,27
	la sp, _sp
  a0:	6d746567          	.4byte	0x6d746567
  a4:	6d65726f          	jal	tp,5777a <_sp+0x4777a>
	sw a0, -8(sp)
  a8:	6d65                	c.lui	s10,0x19
  aa:	7200                	.2byte	0x7200
	nop
  ac:	6165                	c.addi16sp	sp,112
  ae:	0072                	c.slli	zero,0x1c
	wfi
  b0:	6461                	c.lui	s0,0x18
  b2:	4564                	c.lw	s1,76(a0)
void tj_free(void *mem) {
  b4:	6764                	.2byte	0x6764
  b6:	0065                	c.addi	zero,25
  b8:	7262                	.2byte	0x7262
  ba:	6165                	c.addi16sp	sp,112
  bc:	7464                	.2byte	0x7464
  be:	4668                	c.lw	a0,76(a2)
  c0:	7269                	c.lui	tp,0xffffa
  c2:	65537473          	csrrci	s0,0x655,6
  c6:	7261                	c.lui	tp,0xffff8
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	74006863          	bltu	zero,zero,818 <breadthFirstSearch+0xac>
  cc:	6d65                	c.lui	s10,0x19
  ce:	5670                	c.lw	a2,108(a2)
  d0:	7265                	c.lui	tp,0xffff9
  d2:	6574                	.2byte	0x6574
  d4:	0078                	c.addi4spn	a4,sp,12
  d6:	6f74                	.2byte	0x6f74
  d8:	6174                	.2byte	0x6174
  da:	5f6c                	c.lw	a1,124(a4)
  dc:	657a6973          	csrrsi	s2,0x657,20
  e0:	6400                	.2byte	0x6400
  e2:	7461                	c.lui	s0,0xffff8
  e4:	0061                	c.addi	zero,24
  e6:	7865                	c.lui	a6,0xffff9
		exit(1);
  e8:	7469                	c.lui	s0,0xffffa
  ea:	7600                	.2byte	0x7600
  ec:	7265                	c.lui	tp,0xffff9
  ee:	6574                	.2byte	0x6574
  f0:	4378                	c.lw	a4,68(a4)
  f2:	746e756f          	jal	a0,e7838 <_sp+0xd7838>
	bp = (Header *)mem - 1; //point to block header
  f6:	6100                	.2byte	0x6100
  f8:	6a64                	.2byte	0x6a64
  fa:	614d                	c.addi16sp	sp,176
  fc:	7274                	.2byte	0x7274
  fe:	7869                	c.lui	a6,0xffffa
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	7300                	.2byte	0x7300
 102:	6f68                	.2byte	0x6f68
 104:	7472                	.2byte	0x7472
 106:	7520                	.2byte	0x7520
 108:	736e                	.2byte	0x736e
 10a:	6769                	c.lui	a4,0x1a
 10c:	656e                	.2byte	0x656e
 10e:	2064                	.2byte	0x2064
		if (p >= p->next && (bp > p || bp < p->next))
 110:	6e69                	c.lui	t3,0x1a
 112:	0074                	c.addi4spn	a3,sp,12
 114:	6461                	c.lui	s0,0x18
 116:	5664                	c.lw	s1,108(a2)
 118:	7265                	c.lui	tp,0xffff9
 11a:	6574                	.2byte	0x6574
 11c:	0078                	c.addi4spn	a4,sp,12
 11e:	7266                	.2byte	0x7266
 120:	00746e6f          	jal	t3,46926 <_sp+0x36926>
 124:	6976                	.2byte	0x6976
 126:	65746973          	csrrsi	s2,0x657,8
 12a:	0064                	c.addi4spn	s1,sp,12
 12c:	41746567          	.4byte	0x41746567
 130:	6a64                	.2byte	0x6a64
 132:	6e55                	c.lui	t3,0x15
 134:	6976                	.2byte	0x6976
 136:	65746973          	csrrsi	s2,0x657,8
 13a:	5664                	c.lw	s1,108(a2)
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	7265                	c.lui	tp,0xffff9
 13e:	6574                	.2byte	0x6574
 140:	0078                	c.addi4spn	a4,sp,12
 142:	6e75                	c.lui	t3,0x1d
 144:	6e676973          	csrrsi	s2,0x6e6,14
 148:	6465                	c.lui	s0,0x19
 14a:	6320                	.2byte	0x6320
 14c:	6168                	.2byte	0x6168
 14e:	0072                	c.slli	zero,0x1c
 150:	656d                	c.lui	a0,0x1b
 152:	736d                	c.lui	t1,0xffffb
 154:	7465                	c.lui	s0,0xffff9
 156:	7200                	.2byte	0x7200
 158:	6d65                	c.lui	s10,0x19
 15a:	4465766f          	jal	a2,575a0 <_sp+0x475a0>
 15e:	7461                	c.lui	s0,0xffff8
 160:	0061                	c.addi	zero,24
 162:	616d                	c.addi16sp	sp,240
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	6e69                	c.lui	t3,0x1a
 166:	6900                	.2byte	0x6900
 168:	65755173          	csrrwi	sp,0x657,10
 16c:	6575                	c.lui	a0,0x1d
 16e:	6d45                	c.lui	s10,0x11
 170:	7470                	.2byte	0x7470
 172:	0079                	c.addi	zero,30
 174:	7270                	.2byte	0x7270
 176:	7665                	c.lui	a2,0xffff9
 178:	0070                	c.addi4spn	a2,sp,12
 17a:	6162                	.2byte	0x6162
 17c:	6c006573          	csrrsi	a0,0x6c0,0
 180:	20676e6f          	jal	t3,76386 <_sp+0x66386>
		bp->size += p->next->size;
 184:	6f6c                	.2byte	0x6f6c
 186:	676e                	.2byte	0x676e
 188:	7520                	.2byte	0x7520
 18a:	736e                	.2byte	0x736e
 18c:	6769                	c.lui	a4,0x1a
 18e:	656e                	.2byte	0x656e
 190:	2064                	.2byte	0x2064
 192:	6e69                	c.lui	t3,0x1a
 194:	0074                	c.addi4spn	a3,sp,12
 196:	6568                	.2byte	0x6568
 198:	7061                	c.lui	zero,0xffff8
 19a:	7500                	.2byte	0x7500
 19c:	766e                	.2byte	0x766e
 19e:	7369                	c.lui	t1,0xffffa
 1a0:	7469                	c.lui	s0,0xffffa
 1a2:	6465                	c.lui	s0,0x19
		bp->next = p->next->next;
 1a4:	6556                	.2byte	0x6556
 1a6:	7472                	.2byte	0x7472
 1a8:	7865                	c.lui	a6,0xffff9
 1aa:	6900                	.2byte	0x6900
 1ac:	736e                	.2byte	0x736e
 1ae:	7265                	c.lui	tp,0xffff9
 1b0:	0074                	c.addi4spn	a3,sp,12
 1b2:	6576                	.2byte	0x6576
 1b4:	7472                	.2byte	0x7472
 1b6:	7865                	c.lui	a6,0xffff9
 1b8:	7100                	.2byte	0x7100
 1ba:	6575                	c.lui	a0,0x1d
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	6575                	c.lui	a0,0x1d
 1be:	6c00                	.2byte	0x6c00
 1c0:	20676e6f          	jal	t3,763c6 <_sp+0x663c6>
 1c4:	6f6c                	.2byte	0x6f6c
 1c6:	676e                	.2byte	0x676e
 1c8:	6920                	.2byte	0x6920
 1ca:	746e                	.2byte	0x746e
	if (p + p->size == bp) { //join to lower nbr
 1cc:	7400                	.2byte	0x7400
 1ce:	5f6a                	c.lwsp	t5,184(sp)
 1d0:	6c6c6163          	bltu	s8,t1,892 <main+0x2a>
 1d4:	6e00636f          	jal	t1,68b4 <_ebss+0x1d50>
 1d8:	7865                	c.lui	a6,0xffff9
 1da:	5f74                	c.lw	a3,124(a4)
 1dc:	6e69                	c.lui	t3,0x1a
 1de:	6564                	.2byte	0x6564
 1e0:	0078                	c.addi4spn	a4,sp,12
 1e2:	7571                	c.lui	a0,0xffffc
 1e4:	7565                	c.lui	a0,0xffff9
 1e6:	4965                	c.li	s2,25
		p->size += bp->size;
 1e8:	6574                	.2byte	0x6574
 1ea:	436d                	c.li	t1,27
 1ec:	746e756f          	jal	a0,e7932 <_sp+0xd7932>
 1f0:	7300                	.2byte	0x7300
 1f2:	6f68                	.2byte	0x6f68
 1f4:	7472                	.2byte	0x7472
 1f6:	6920                	.2byte	0x6920
 1f8:	746e                	.2byte	0x746e
 1fa:	7400                	.2byte	0x7400
 1fc:	5f6a                	c.lwsp	t5,184(sp)
 1fe:	616d                	c.addi16sp	sp,240
 200:	6c6c                	.2byte	0x6c6c
 202:	6c00636f          	jal	t1,68c2 <_ebss+0x1d5e>
		p->next = bp->next;
 206:	20676e6f          	jal	t3,7640c <_sp+0x6640c>
 20a:	6f64                	.2byte	0x6f64
 20c:	6275                	c.lui	tp,0x1d
 20e:	656c                	.2byte	0x656c
 210:	4700                	c.lw	s0,8(a4)
 212:	554e                	c.lwsp	a0,240(sp)
 214:	4320                	c.lw	s0,64(a4)
 216:	3131                	c.jal	fffffe22 <_sp+0xfffefe22>
		p->next = bp; //again, if the free list is just the base
 218:	3120                	.2byte	0x3120
 21a:	2e31                	c.jal	536 <insert+0x62>
 21c:	2e31                	c.jal	538 <insert+0x64>
 21e:	2030                	.2byte	0x2030
 220:	6d2d                	c.lui	s10,0xb
 222:	6f6e                	.2byte	0x6f6e
	freep = p;
 224:	722d                	c.lui	tp,0xfffeb
 226:	6c65                	c.lui	s8,0x19
 228:	7861                	c.lui	a6,0xffff8
 22a:	2d20                	.2byte	0x2d20
 22c:	616d                	c.addi16sp	sp,240
 22e:	6372                	.2byte	0x6372
}
 230:	3d68                	.2byte	0x3d68
 232:	7672                	.2byte	0x7672
 234:	6d693233          	.4byte	0x6d693233
 238:	2d20                	.2byte	0x2d20
 23a:	616d                	c.addi16sp	sp,240
 23c:	6962                	.2byte	0x6962
 23e:	693d                	c.lui	s2,0xf
 240:	706c                	.2byte	0x706c
 242:	2d203233          	.4byte	0x2d203233
static Header* getmoremem(unsigned int total_size) {
 246:	736d                	c.lui	t1,0xffffb
 248:	7274                	.2byte	0x7274
 24a:	6369                	c.lui	t1,0x1a
 24c:	2d74                	.2byte	0x2d74
 24e:	6c61                	c.lui	s8,0x18
 250:	6769                	c.lui	a4,0x1a
 252:	206e                	.2byte	0x206e
 254:	6d2d                	c.lui	s10,0xb
 256:	6f6e                	.2byte	0x6f6e
	if (avail_mem < total_size) return NULL; //gg, we ran out of mem :P
 258:	642d                	c.lui	s0,0xb
 25a:	7669                	c.lui	a2,0xffffa
 25c:	2d20                	.2byte	0x2d20
 25e:	746d                	c.lui	s0,0xffffb
 260:	6e75                	c.lui	t3,0x1d
 262:	3d65                	c.jal	11a <tj_free+0x66>
 264:	6f72                	.2byte	0x6f72
 266:	74656b63          	bltu	a0,t1,9bc <memset+0x1c>
 26a:	2d20                	.2byte	0x2d20
 26c:	616d                	c.addi16sp	sp,240
 26e:	6372                	.2byte	0x6372
	Header* up = (Header *)next_index;
 270:	3d68                	.2byte	0x3d68
 272:	7672                	.2byte	0x7672
 274:	6d693233          	.4byte	0x6d693233
 278:	2d20                	.2byte	0x2d20
 27a:	4f2d2067          	.4byte	0x4f2d2067
	next_index += total_size; //allocate the block
 27e:	2030                	.2byte	0x2030
 280:	732d                	c.lui	t1,0xfffeb
 282:	6474                	.2byte	0x6474
 284:	673d                	c.lui	a4,0xf
 286:	756e                	.2byte	0x756e
 288:	3131                	c.jal	fffffe94 <_sp+0xfffefe94>
 28a:	6c00                	.2byte	0x6c00
 28c:	6261                	c.lui	tp,0x18
 28e:	6c65                	c.lui	s8,0x19
 290:	4800                	c.lw	s0,16(s0)
 292:	6165                	c.addi16sp	sp,112
	avail_mem -= total_size; //deduct from avail mem;
 294:	6564                	.2byte	0x6564
 296:	0072                	c.slli	zero,0x1c
 298:	6576                	.2byte	0x6576
 29a:	7472                	.2byte	0x7472
 29c:	7865                	c.lui	a6,0xffff9
 29e:	6e49                	c.lui	t3,0x12
 2a0:	6564                	.2byte	0x6564
 2a2:	0078                	c.addi4spn	a4,sp,12

Disassembly of section .debug_rnglists:

00000000 <.debug_rnglists>:
	nop
   0:	0016                	c.slli	zero,0x5
   2:	0000                	c.unimp
	la ra, exit
   4:	0005                	c.addi	zero,1
   6:	0004                	.2byte	0x4
   8:	0000                	c.unimp
   a:	0000                	c.unimp
	la sp, _sp
   c:	00000007          	.4byte	0x7
  10:	9c00                	.2byte	0x9c00
  12:	0701                	c.addi	a4,0 # f000 <_ebss+0xa49c>
	mv s0, sp
  14:	00a0                	c.addi4spn	s0,sp,72
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	0020                	c.addi4spn	s0,sp,8

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
	nop
   0:	000c                	.2byte	0xc
   2:	0000                	c.unimp
	la ra, exit
   4:	ffff                	.2byte	0xffff
   6:	ffff                	.2byte	0xffff
   8:	7c010003          	lb	zero,1984(sp)
	la sp, _sp
   c:	0d01                	c.addi	s10,0 # b000 <_ebss+0x649c>
   e:	0002                	c.slli64	zero
  10:	0024                	c.addi4spn	s1,sp,8
  12:	0000                	c.unimp
	mv s0, sp
  14:	0000                	c.unimp
  16:	0000                	c.unimp
	la gp, __global_pointer$
  18:	00b4                	c.addi4spn	a3,sp,72
  1a:	0000                	c.unimp
  1c:	0190                	c.addi4spn	a2,sp,192
  1e:	0000                	c.unimp
	li tp, 0
  20:	0e44                	c.addi4spn	s1,sp,788
  22:	4830                	c.lw	a2,80(s0)
	li t0, 0
  24:	0181                	c.addi	gp,0 # 1280 <__global_pointer$>
  26:	0288                	c.addi4spn	a0,sp,320
	li t1, 0
  28:	0c44                	c.addi4spn	s1,sp,532
  2a:	0008                	.2byte	0x8
	li t2, 0
  2c:	c1017403          	.4byte	0xc1017403
	li s1, 0
  30:	c844                	c.sw	s1,20(s0)
  32:	020c                	c.addi4spn	a1,sp,256
	li a0, 0
  34:	4430                	c.lw	a2,72(s0)
  36:	000e                	c.slli	zero,0x3
	li a1, 0
  38:	0024                	c.addi4spn	s1,sp,8
  3a:	0000                	c.unimp
	li a2, 0
  3c:	0000                	c.unimp
  3e:	0000                	c.unimp
	li a3, 0
  40:	0244                	c.addi4spn	s1,sp,260
  42:	0000                	c.unimp
	li a4, 0
  44:	00ac                	c.addi4spn	a1,sp,72
  46:	0000                	c.unimp
	li a5, 0
  48:	0e44                	c.addi4spn	s1,sp,788
  4a:	4830                	c.lw	a2,80(s0)
	li a6, 0
  4c:	0181                	c.addi	gp,0 # 1280 <__global_pointer$>
  4e:	0288                	c.addi4spn	a0,sp,320
	li a7, 0
  50:	0c44                	c.addi4spn	s1,sp,532
  52:	0008                	.2byte	0x8
	li s2, 0
  54:	9002                	c.ebreak
  56:	44c1                	c.li	s1,16
	li s3, 0
  58:	0cc8                	c.addi4spn	a0,sp,596
  5a:	3002                	.2byte	0x3002
	li s4, 0
  5c:	0e44                	c.addi4spn	s1,sp,788
  5e:	0000                	c.unimp
	li s5, 0
  60:	0024                	c.addi4spn	s1,sp,8
  62:	0000                	c.unimp
	li s6, 0
  64:	0000                	c.unimp
  66:	0000                	c.unimp
	li s7, 0
  68:	02f0                	c.addi4spn	a2,sp,332
  6a:	0000                	c.unimp
	li s8, 0
  6c:	0194                	c.addi4spn	a3,sp,192
  6e:	0000                	c.unimp
	li s9, 0
  70:	0e44                	c.addi4spn	s1,sp,788
  72:	4830                	c.lw	a2,80(s0)
	li s10, 0
  74:	0181                	c.addi	gp,0 # 1280 <__global_pointer$>
  76:	0288                	c.addi4spn	a0,sp,320
	li s11, 0
  78:	0c44                	c.addi4spn	s1,sp,532
  7a:	0008                	.2byte	0x8
	li t3, 0
  7c:	c1017803          	.4byte	0xc1017803
	li t4, 0
  80:	c844                	c.sw	s1,20(s0)
  82:	020c                	c.addi4spn	a1,sp,256
	li t5, 0
  84:	4430                	c.lw	a2,72(s0)
  86:	000e                	c.slli	zero,0x3
	li t6, 0
  88:	0024                	c.addi4spn	s1,sp,8
  8a:	0000                	c.unimp
	j main
  8c:	0000                	c.unimp
  8e:	0000                	c.unimp
  90:	0484                	c.addi4spn	s1,sp,576
  92:	0000                	c.unimp
  94:	0050                	c.addi4spn	a2,sp,4
  96:	0000                	c.unimp
  98:	0e44                	c.addi4spn	s1,sp,788
  9a:	4830                	c.lw	a2,80(s0)
  9c:	0181                	c.addi	gp,0 # 1280 <__global_pointer$>
  9e:	0288                	c.addi4spn	a0,sp,320
	la sp, _sp
  a0:	0c44                	c.addi4spn	s1,sp,532
  a2:	0008                	.2byte	0x8
  a4:	c174                	c.sw	a3,68(a0)
  a6:	c844                	c.sw	s1,20(s0)
	sw a0, -8(sp)
  a8:	020c                	c.addi4spn	a1,sp,256
  aa:	4430                	c.lw	a2,72(s0)
	nop
  ac:	000e                	c.slli	zero,0x3
  ae:	0000                	c.unimp
	wfi
  b0:	0020                	c.addi4spn	s0,sp,8
  b2:	0000                	c.unimp
void tj_free(void *mem) {
  b4:	0000                	c.unimp
  b6:	0000                	c.unimp
  b8:	04d4                	c.addi4spn	a3,sp,580
  ba:	0000                	c.unimp
  bc:	0068                	c.addi4spn	a0,sp,12
  be:	0000                	c.unimp
  c0:	0e44                	c.addi4spn	s1,sp,788
  c2:	4420                	c.lw	s0,72(s0)
  c4:	0188                	c.addi4spn	a0,sp,192
  c6:	0c44                	c.addi4spn	s1,sp,532
	if (mem < (void *)heap || mem > (void *)(heap + sizeof(heap)))
  c8:	0008                	.2byte	0x8
  ca:	5402                	c.lwsp	s0,32(sp)
  cc:	0cc8                	c.addi4spn	a0,sp,596
  ce:	2002                	.2byte	0x2002
  d0:	0e44                	c.addi4spn	s1,sp,788
  d2:	0000                	c.unimp
  d4:	0020                	c.addi4spn	s0,sp,8
  d6:	0000                	c.unimp
  d8:	0000                	c.unimp
  da:	0000                	c.unimp
  dc:	053c                	c.addi4spn	a5,sp,648
  de:	0000                	c.unimp
  e0:	0058                	c.addi4spn	a4,sp,4
  e2:	0000                	c.unimp
  e4:	0e44                	c.addi4spn	s1,sp,788
  e6:	4410                	c.lw	a2,8(s0)
		exit(1);
  e8:	0188                	c.addi4spn	a0,sp,192
  ea:	0c44                	c.addi4spn	s1,sp,532
  ec:	0008                	.2byte	0x8
  ee:	4402                	c.lwsp	s0,0(sp)
  f0:	0cc8                	c.addi4spn	a0,sp,596
  f2:	1002                	c.slli	zero,0x20
	bp = (Header *)mem - 1; //point to block header
  f4:	0e44                	c.addi4spn	s1,sp,788
  f6:	0000                	c.unimp
  f8:	0020                	c.addi4spn	s0,sp,8
  fa:	0000                	c.unimp
  fc:	0000                	c.unimp
  fe:	0000                	c.unimp
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 100:	0594                	c.addi4spn	a3,sp,704
 102:	0000                	c.unimp
 104:	002c                	c.addi4spn	a1,sp,8
 106:	0000                	c.unimp
 108:	0e44                	c.addi4spn	s1,sp,788
 10a:	4410                	c.lw	a2,8(s0)
 10c:	0188                	c.addi4spn	a0,sp,192
 10e:	0c44                	c.addi4spn	s1,sp,532
		if (p >= p->next && (bp > p || bp < p->next))
 110:	0008                	.2byte	0x8
 112:	c858                	c.sw	a4,20(s0)
 114:	020c                	c.addi4spn	a1,sp,256
 116:	4410                	c.lw	a2,8(s0)
 118:	000e                	c.slli	zero,0x3
 11a:	0000                	c.unimp
 11c:	0024                	c.addi4spn	s1,sp,8
 11e:	0000                	c.unimp
 120:	0000                	c.unimp
 122:	0000                	c.unimp
 124:	05c0                	c.addi4spn	s0,sp,708
 126:	0000                	c.unimp
 128:	007c                	c.addi4spn	a5,sp,12
 12a:	0000                	c.unimp
 12c:	0e44                	c.addi4spn	s1,sp,788
 12e:	4830                	c.lw	a2,80(s0)
 130:	0181                	c.addi	gp,0 # 1280 <__global_pointer$>
 132:	0288                	c.addi4spn	a0,sp,320
 134:	0c44                	c.addi4spn	s1,sp,532
 136:	0008                	.2byte	0x8
 138:	6002                	.2byte	0x6002
 13a:	44c1                	c.li	s1,16
	for (p = freep; !(bp > p && bp < p->next); p = p->next) 
 13c:	0cc8                	c.addi4spn	a0,sp,596
 13e:	3002                	.2byte	0x3002
 140:	0e44                	c.addi4spn	s1,sp,788
 142:	0000                	c.unimp
 144:	0020                	c.addi4spn	s0,sp,8
 146:	0000                	c.unimp
 148:	0000                	c.unimp
 14a:	0000                	c.unimp
 14c:	063c                	c.addi4spn	a5,sp,776
 14e:	0000                	c.unimp
 150:	0084                	c.addi4spn	s1,sp,64
 152:	0000                	c.unimp
 154:	0e44                	c.addi4spn	s1,sp,788
 156:	4420                	c.lw	s0,72(s0)
 158:	0188                	c.addi4spn	a0,sp,192
 15a:	0c44                	c.addi4spn	s1,sp,532
 15c:	0008                	.2byte	0x8
 15e:	7002                	.2byte	0x7002
 160:	0cc8                	c.addi4spn	a0,sp,596
 162:	2002                	.2byte	0x2002
	if (bp + bp->size == p->next) { //join to upper nbr
 164:	0e44                	c.addi4spn	s1,sp,788
 166:	0000                	c.unimp
 168:	0020                	c.addi4spn	s0,sp,8
 16a:	0000                	c.unimp
 16c:	0000                	c.unimp
 16e:	0000                	c.unimp
 170:	06c0                	c.addi4spn	s0,sp,836
 172:	0000                	c.unimp
 174:	00ac                	c.addi4spn	a1,sp,72
 176:	0000                	c.unimp
 178:	0e44                	c.addi4spn	s1,sp,788
 17a:	4430                	c.lw	a2,72(s0)
 17c:	0188                	c.addi4spn	a0,sp,192
 17e:	0c44                	c.addi4spn	s1,sp,532
 180:	0008                	.2byte	0x8
 182:	9802                	c.jalr	a6
		bp->size += p->next->size;
 184:	0cc8                	c.addi4spn	a0,sp,596
 186:	3002                	.2byte	0x3002
 188:	0e44                	c.addi4spn	s1,sp,788
 18a:	0000                	c.unimp
 18c:	0024                	c.addi4spn	s1,sp,8
 18e:	0000                	c.unimp
 190:	0000                	c.unimp
 192:	0000                	c.unimp
 194:	076c                	c.addi4spn	a1,sp,908
 196:	0000                	c.unimp
 198:	00fc                	c.addi4spn	a5,sp,76
 19a:	0000                	c.unimp
 19c:	0e44                	c.addi4spn	s1,sp,788
 19e:	4820                	c.lw	s0,80(s0)
 1a0:	0181                	c.addi	gp,0 # 1280 <__global_pointer$>
 1a2:	0288                	c.addi4spn	a0,sp,320
		bp->next = p->next->next;
 1a4:	0c44                	c.addi4spn	s1,sp,532
 1a6:	0008                	.2byte	0x8
 1a8:	e002                	.2byte	0xe002
 1aa:	44c1                	c.li	s1,16
 1ac:	0cc8                	c.addi4spn	a0,sp,596
 1ae:	2002                	.2byte	0x2002
 1b0:	0e44                	c.addi4spn	s1,sp,788
 1b2:	0000                	c.unimp
 1b4:	0024                	c.addi4spn	s1,sp,8
 1b6:	0000                	c.unimp
 1b8:	0000                	c.unimp
 1ba:	0000                	c.unimp
		bp->next = p->next; //insert bp after p in the linked list
 1bc:	0868                	c.addi4spn	a0,sp,28
 1be:	0000                	c.unimp
 1c0:	0138                	c.addi4spn	a4,sp,136
 1c2:	0000                	c.unimp
 1c4:	0e44                	c.addi4spn	s1,sp,788
 1c6:	4820                	c.lw	s0,80(s0)
 1c8:	0181                	c.addi	gp,0 # 1280 <__global_pointer$>
 1ca:	0288                	c.addi4spn	a0,sp,320
	if (p + p->size == bp) { //join to lower nbr
 1cc:	0c44                	c.addi4spn	s1,sp,532
 1ce:	0008                	.2byte	0x8
 1d0:	c1011c03          	lh	s8,-1008(sp)
 1d4:	c844                	c.sw	s1,20(s0)
 1d6:	020c                	c.addi4spn	a1,sp,256
 1d8:	4420                	c.lw	s0,72(s0)
 1da:	000e                	c.slli	zero,0x3
